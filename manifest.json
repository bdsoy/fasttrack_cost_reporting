{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.3", "generated_at": "2025-03-20T11:34:34.988278Z", "invocation_id": "a04370fc-9687-4970-acd0-8beeeb59359c", "env": {}, "project_name": "fasttrack_cost_reporting", "project_id": "6ceab65a3dd085ae28723cd9d40a2773", "user_id": "93ac735d-6889-433c-b07d-53ec4d3095b0", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.fasttrack_cost_reporting.stg_azure_daily_exports": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "stg_azure_daily_exports", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "staging/azure/stg_azure_daily_exports.sql", "original_file_path": "models/staging/azure/stg_azure_daily_exports.sql", "unique_id": "model.fasttrack_cost_reporting.stg_azure_daily_exports", "fqn": ["fasttrack_cost_reporting", "staging", "azure", "stg_azure_daily_exports"], "alias": "stg_azure_daily_exports", "checksum": {"name": "sha256", "checksum": "650ca8be46072cb067e644a59728472ae007b3093d9cd490c1c6c3fb05565f34"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "fail", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#663399"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Incremental model containing the **latest** cost data from the externally managed dailyexportmtd Azure export table, with additional control columns and rows unique by (billing_date, resource_id, meter_id) ref: [Azure Cost Management Export Data](https://learn.microsoft.com/en-us/azure/cost-management-billing/automate/understand-usage-details-fields)", "columns": {"billing_account_name": {"name": "billing_account_name", "description": "Name of the billing account", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "partner_name": {"name": "partner_name", "description": "Name of the partner Microsoft Entra tenant", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reseller_name": {"name": "reseller_name", "description": "The name of the reseller associated with the subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reseller_mpn_id": {"name": "reseller_mpn_id", "description": "ID for the reseller associated with the subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_tenant_id": {"name": "customer_tenant_id", "description": "Identifier of the Microsoft Entra tenant of the customer's subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_name": {"name": "customer_name", "description": "Name of the Microsoft Entra tenant for the customer's subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost_center": {"name": "cost_center", "description": "The cost center defined for the subscription for tracking costs (only available in open billing periods for MCA accounts)", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_period_end_date": {"name": "billing_period_end_date", "description": "The end date of the billing period.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_period_start_date": {"name": "billing_period_start_date", "description": "The start date of the billing period", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_period_end_date": {"name": "service_period_end_date", "description": "The end date of the rating period that defined and locked pricing for the consumed or purchased service", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_period_start_date": {"name": "service_period_start_date", "description": "The start date of the rating period that defined and locked pricing for the consumed or purchased service", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_date": {"name": "billing_date", "description": "The billing date for the specified charge", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "service_family": {"name": "service_family", "description": "Service family that the service belongs to", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_order_id": {"name": "product_order_id", "description": "Unique identifier for the product order", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_order_name": {"name": "product_order_name", "description": "Unique name for the product order", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumed_service": {"name": "consumed_service", "description": "Name of the service the charge is associated with", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "meter_id": {"name": "meter_id", "description": "The unique identifier for the meter", "meta": {}, "data_type": "text", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "meter_name": {"name": "meter_name", "description": "The name of the meter. Purchases and Marketplace usage might be shown as blank or unassigned.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "meter_category": {"name": "meter_category", "description": "Name of the classification category for the meter. For example, Cloud services and Networking. Purchases and Marketplace usage might be shown as blank or unassigned.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "meter_subcategory": {"name": "meter_subcategory", "description": "Name of the meter subclassification category. Purchases and Marketplace usage might be shown as blank or unassigned.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "meter_region": {"name": "meter_region", "description": "The name of the Azure region associated with the meter. It generally aligns with the resource location, except for certain global meters that are shared across regions. In such cases, the meter region indicates the primary region of the meter.\nNote: The meter is used to track the usage of specific services or resources, mainly for billing purposes. Each Azure service, resource, and region have its own billing meter ID that precisely reflects how its consumption and price are calculated.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "Unique identifier for the product", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_name": {"name": "product_name", "description": "Name of the product", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscription_id": {"name": "subscription_id", "description": "Unique identifier for the Azure subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscription_name": {"name": "subscription_name", "description": "Name of the Azure subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "publisher_type": {"name": "publisher_type", "description": "Supported values: Microsoft, Azure, AWS\u2074, Marketplace. For MCA accounts, the value can be Microsoft for first party charges and Marketplace for third party charges. For EA and pay-as-you-go accounts, the value is Azure.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "publisher_id": {"name": "publisher_id", "description": "The ID of the publisher. It's only available after the invoice is generated.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "publisher_name": {"name": "publisher_name", "description": "The name of the publisher. For first-party services, the value should be listed as Microsoft or Microsoft Corporation", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "resource_group_name": {"name": "resource_group_name", "description": "Name of the resource group the resource is in. Not all charges come from resources deployed to resource groups. Charges that don't have a resource group are shown as null or empty, Others, or Not applicable.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "resource_id": {"name": "resource_id", "description": "Unique identifier of the Azure Resource Manager resource", "meta": {}, "data_type": "text", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "resource_location": {"name": "resource_location", "description": "The Azure region where the resource is deployed, also referred to as the datacenter location where the resource is running.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "location": {"name": "location", "description": "The normalized location used to resolve inconsistencies in region names sent by different Azure Resource Providers (RPs). The normalized location is based strictly on the resource location sent by RPs in usage data and is programmatically normalized to mitigate inconsistencies. Purchases and Marketplace usage might be shown as blank or unassigned. For example, `US East`.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "effective_price": {"name": "effective_price", "description": "The price for a given product or service representing the actual rate paid per unit", "meta": {}, "data_type": "number(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The number of units used by the given product or service for a given day", "meta": {}, "data_type": "number(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unit_of_measure": {"name": "unit_of_measure", "description": "The unit of measure for billing for the service. For example, compute services are billed per hour.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "charge_type": {"name": "charge_type", "description": "Indicates whether the charge represents usage (Usage), a purchase (Purchase), or a refund (Refund).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_currency": {"name": "billing_currency", "description": "Currency associated with the billing account", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pricing_currency": {"name": "pricing_currency", "description": "Currency used when rating based on negotiated prices", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost_in_billing_currency": {"name": "cost_in_billing_currency", "description": "Cost of the charge in the billing currency before credits or taxes", "meta": {}, "data_type": "number(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cost_in_usd": {"name": "cost_in_usd", "description": "Cost of the charge in USD", "meta": {}, "data_type": "number(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "exchange_rate_pricing_to_billing": {"name": "exchange_rate_pricing_to_billing", "description": "Exchange rate used converting cost from the pricing currency to the billing currency", "meta": {}, "data_type": "number(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "Date the exchange rate was established", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_info_1": {"name": "service_info_1", "description": "Service-specific metadata", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_info_2": {"name": "service_info_2", "description": "Legacy field with optional service-specific metadata", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "additional_info": {"name": "additional_info", "description": "Service-specific metadata, e.g. an image type for a virtual machine", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tags": {"name": "tags", "description": "Tags assigned to the resource. Doesn't include resource group tags. Can be used to group or distribute costs for internal chargeback.", "meta": {}, "data_type": "variant", "constraints": [], "quote": null, "tags": [], "granularity": null}, "payg_price": {"name": "payg_price", "description": "The market price (retail or list price) for a given product or service", "meta": {}, "data_type": "number(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "frequency": {"name": "frequency", "description": "Indicates whether a charge is expected to repeat. Charges can either happen once (OneTime), repeat on a monthly or yearly basis (Recurring), or be based on usage (UsageBased).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "term": {"name": "term", "description": "Displays the term for the validity of the offer. For example: For reserved instances, it displays 12 months as the Term. For one-time purchases or recurring purchases, Term is one month (SaaS, Marketplace Support).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reservation_id": {"name": "reservation_id", "description": "Unique identifier for the purchased reservation instance.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reservation_name": {"name": "reservation_name", "description": "Name of the purchased reservation instance.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pricing_model": {"name": "pricing_model", "description": "Identifier that indicates how the meter is priced. (Values: OnDemand, Reservation, Spot, and SavingsPlan)", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unit_price": {"name": "unit_price", "description": "The price for a given product or service inclusive of any negotiated discount on top of the market price", "meta": {}, "data_type": "number(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "benefit_id": {"name": "benefit_id", "description": "Unique identifier for the purchased savings plan instance", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "benefit_name": {"name": "benefit_name", "description": "Unique identifier for the purchased savings plan instance", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "provider": {"name": "provider", "description": "Identifier for product category or Line of Business. For example, Azure, Microsoft 365, and AWS.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscription": {"name": "subscription", "description": "Unique identifier for the Azure subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "path": {"name": "path", "description": "snowpipe-sourced ingestion resource path", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_date": {"name": "ingested_date", "description": "snowpipe-sourced date indicating the UTC *start* of the data load", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "snowpipe-sourced timestamp indicating the UTC *start* of the data load", "meta": {}, "data_type": "timestamp_ntz", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "batch_timestamp": {"name": "batch_timestamp", "description": "snowpipe-sourced complimentary ingestion timestamp indicating start of batch loading, in UTC", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_key": {"name": "unique_key", "description": "unique unsigned hash over (billing_date, resource_id, meter_id)", "meta": {}, "data_type": "number(19,0)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "control timestamp indicating when a row was refreshed via dbt, in UTC", "meta": {}, "data_type": "timestamp_ntz", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#663399"}, "patch_path": "fasttrack_cost_reporting://models/staging/azure/stg_azure_daily_exports.yml", "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "incremental", "schema": "transform_cost_reporting", "docs": {"node_color": "#663399"}, "contract": {"enforced": true}, "incremental_strategy": "delete+insert", "unique_key": "unique_key", "on_schema_change": "fail"}, "created_at": 1742470392.604388, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports", "raw_code": "{#-/*\n  incremental model tracking latest cost info (according to `ingested_at` timestamp) from azure\n  dailyexportmtd exports, unique by (billing_date, resource_id, meter_id)\n*/-#}\n\n{{\n  config(\n    materialized='incremental',\n    incremental_strategy='delete+insert',\n    unique_key='unique_key',\n    on_schema_change='fail'\n  )\n}}\n\nselect\n  billingaccountname as billing_account_name,\n  partnername as partner_name,\n  resellername as reseller_name,\n  resellermpnid as reseller_mpn_id,\n  customertenantid as customer_tenant_id,\n  customername as customer_name,\n  costcenter as cost_center,\n  billingperiodenddate::date as billing_period_end_date,\n  billingperiodstartdate::date as billing_period_start_date,\n  serviceperiodenddate::date as service_period_end_date,\n  serviceperiodstartdate::date as service_period_start_date,\n  billingdate::date as billing_date,\n  servicefamily as service_family,\n  productorderid as product_order_id,\n  productordername as product_order_name,\n  consumedservice as consumed_service,\n  coalesce(meterid, '') as meter_id,\n  metername as meter_name,\n  metercategory as meter_category,\n  metersubcategory as meter_subcategory,\n  meterregion as meter_region,\n  productid as product_id,\n  productname as product_name,\n  subscriptionid as subscription_id,\n  subscriptionname as subscription_name,\n  publishertype as publisher_type,\n  publisherid as publisher_id,\n  publishername as publisher_name,\n  resourcegroupname as resource_group_name,\n  coalesce(resourceid, '') as resource_id,\n  resourcelocation as resource_location,\n  location,\n  effectiveprice::number(38,12) as effective_price,\n  quantity::number(38,12) as quantity,\n  unitofmeasure as unit_of_measure,\n  chargetype as charge_type,\n  billingcurrency as billing_currency,\n  pricingcurrency as pricing_currency,\n  costinbillingcurrency::number(38,12) as cost_in_billing_currency,\n  costinusd::number(38,12) as cost_in_usd,\n  exchangeratepricingtobilling::number(38,12) as exchange_rate_pricing_to_billing,\n  exchangeratedate::date as exchange_rate_date,\n  serviceinfo1 as service_info_1,\n  serviceinfo2 as service_info_2,\n  additionalinfo as additional_info,\n  try_parse_json(tags) as tags,\n  paygprice::number(38,12) as payg_price,\n  frequency,\n  term,\n  reservationid as reservation_id,\n  reservationname as reservation_name,\n  pricingmodel as pricing_model,\n  unitprice::number(38,12) as unit_price,\n  benefitid as benefit_id,\n  benefitname as benefit_name,\n  provider,\n  subscription,\n  path,\n  ingested_date,\n  ingested_at,\n  batch_timestamp,\n  abs(\n    hash(\n      billing_date || resource_id || meter_id\n    )\n  ) as unique_key,\n  sysdate() as dbt_loaded_at\nfrom {{ source('azure_exports', 'daily_mtd') }}\nwhere billingdate::date is not null\n  and ingested_at > (\n    select coalesce(max(ingested_at), '2001-01-01')\n    from {{\n      this if is_incremental() else '(select null::timestamp_ntz as ingested_at)'\n    }}\n  )\nqualify row_number() over (\n  partition by unique_key\n  order by ingested_at desc\n) = 1", "language": "sql", "refs": [], "sources": [["azure_exports", "daily_mtd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.fasttrack_cost_reporting.azure_exports.daily_mtd"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/azure/stg_azure_daily_exports.sql", "compiled": true, "compiled_code": "\n\nselect\n  billingaccountname as billing_account_name,\n  partnername as partner_name,\n  resellername as reseller_name,\n  resellermpnid as reseller_mpn_id,\n  customertenantid as customer_tenant_id,\n  customername as customer_name,\n  costcenter as cost_center,\n  billingperiodenddate::date as billing_period_end_date,\n  billingperiodstartdate::date as billing_period_start_date,\n  serviceperiodenddate::date as service_period_end_date,\n  serviceperiodstartdate::date as service_period_start_date,\n  billingdate::date as billing_date,\n  servicefamily as service_family,\n  productorderid as product_order_id,\n  productordername as product_order_name,\n  consumedservice as consumed_service,\n  coalesce(meterid, '') as meter_id,\n  metername as meter_name,\n  metercategory as meter_category,\n  metersubcategory as meter_subcategory,\n  meterregion as meter_region,\n  productid as product_id,\n  productname as product_name,\n  subscriptionid as subscription_id,\n  subscriptionname as subscription_name,\n  publishertype as publisher_type,\n  publisherid as publisher_id,\n  publishername as publisher_name,\n  resourcegroupname as resource_group_name,\n  coalesce(resourceid, '') as resource_id,\n  resourcelocation as resource_location,\n  location,\n  effectiveprice::number(38,12) as effective_price,\n  quantity::number(38,12) as quantity,\n  unitofmeasure as unit_of_measure,\n  chargetype as charge_type,\n  billingcurrency as billing_currency,\n  pricingcurrency as pricing_currency,\n  costinbillingcurrency::number(38,12) as cost_in_billing_currency,\n  costinusd::number(38,12) as cost_in_usd,\n  exchangeratepricingtobilling::number(38,12) as exchange_rate_pricing_to_billing,\n  exchangeratedate::date as exchange_rate_date,\n  serviceinfo1 as service_info_1,\n  serviceinfo2 as service_info_2,\n  additionalinfo as additional_info,\n  try_parse_json(tags) as tags,\n  paygprice::number(38,12) as payg_price,\n  frequency,\n  term,\n  reservationid as reservation_id,\n  reservationname as reservation_name,\n  pricingmodel as pricing_model,\n  unitprice::number(38,12) as unit_price,\n  benefitid as benefit_id,\n  benefitname as benefit_name,\n  provider,\n  subscription,\n  path,\n  ingested_date,\n  ingested_at,\n  batch_timestamp,\n  abs(\n    hash(\n      billing_date || resource_id || meter_id\n    )\n  ) as unique_key,\n  sysdate() as dbt_loaded_at\nfrom fasttrack_cost_reporting_dev.landing_azure_cost_data_export.dailyexportmtd\nwhere billingdate::date is not null\n  and ingested_at > (\n    select coalesce(max(ingested_at), '2001-01-01')\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\n  )\nqualify row_number() over (\n  partition by unique_key\n  order by ingested_at desc\n) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "521d9a7734cb0ace11870cfdf5b45a94854b9c90ea26b71006bb7e8a75621603"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.stg_platform_references_additional_costs": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "stg_platform_references_additional_costs", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "staging/platform/stg_platform_references_additional_costs.sql", "original_file_path": "models/staging/platform/stg_platform_references_additional_costs.sql", "unique_id": "model.fasttrack_cost_reporting.stg_platform_references_additional_costs", "fqn": ["fasttrack_cost_reporting", "staging", "platform", "stg_platform_references_additional_costs"], "alias": "stg_platform_references_additional_costs", "checksum": {"name": "sha256", "checksum": "a737ffd24204829e047bed8b390ca17af58ba1ad17210855f2b818e7f3436828"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#663399"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Extends Fast Track additional platform costs source table interpolating costs on a daily basis according to the specified granularity", "columns": {"platform": {"name": "platform", "description": "Platform name (service provider) associated to the additional cost", "meta": {}, "data_type": "text", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "billing_date": {"name": "billing_date", "description": "Date of the billing period for the additional cost", "meta": {}, "data_type": "date", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "account": {"name": "account", "description": "Account identifier associated to the additional cost, same as `plaform` from source reference", "meta": {}, "data_type": "text", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "service_category": {"name": "service_category", "description": "Classification of the service charge coming from the platform service provider", "meta": {}, "data_type": "text", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "service_subcategory": {"name": "service_subcategory", "description": "Sub-classification of the service subcharge coming from the platform service provider", "meta": {}, "data_type": "text", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "resource": {"name": "resource", "description": "Describes the additional cost inference down to a daily basis", "meta": {}, "data_type": "text", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "spend": {"name": "spend", "description": "Sum of daily spend for the additional cost", "meta": {}, "data_type": "number(38,12)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "unique_key": {"name": "unique_key", "description": "hashed value over (billing_date, platform, service_category, service_subcategory, granularity)", "meta": {}, "data_type": "number(19,0)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "control timestamp indicating when a row was refreshed via dbt, in UTC", "meta": {}, "data_type": "timestamp_ntz", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#663399"}, "patch_path": "fasttrack_cost_reporting://models/staging/platform/stg_platform_references_additional_costs.yml", "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "transform_cost_reporting", "docs": {"node_color": "#663399"}, "contract": {"enforced": true}}, "created_at": 1742470392.6335511, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs", "raw_code": "{#-/*\n  interpolates weekly/monthly/yearly additional costs for the Fast Track platform down to a daily\n  basis according to externally managed reference source data\n*/-#}\n\n{{ config(materialized='table') }}\n\nwith\n\n_src_costs as (\n  select distinct\n    granularity,\n    lower(trim(platform)) as platform,\n    date(billingdatefrom) as date_from,\n    date(billingdateto) as date_to,\n    coalesce(servicecharge, '') as category,\n    coalesce(servicesubcharge, '') as sub_category,\n    qty::decimal(38,12) as qty,\n    price::decimal(38,12) as price,\n    upper(left(trim(currency), 3)) as currency\n  from {{ source('platform_references', 'additional_costs') }}\n  where currency ilike '%USD%' {# /* TODO: only USD supported for now */ #}\n),\n\n_enhance_costs as (\n  select\n    * exclude (granularity),\n\n    case\n      when granularity ilike '%da%' then 'daily'\n      when granularity ilike '%we%' then 'weekly'\n      when granularity ilike '%mo%' then 'monthly'\n      when granularity ilike '%ye%' then 'yearly'\n    end as granularity\n  from _src_costs\n  where len(platform) > 0\n    and date_from <= date_to\n),\n\n_dedup_costs as (\n  select\n    *,\n\n    hash(s.*) as hash_key,\n    (qty * price)::decimal(38,12) as spend_sum\n  from _enhance_costs as s\n  where granularity is not null\n    and abs(spend_sum) > 0\n  qualify row_number() over (\n    partition by hash_key\n    order by 0\n  ) = 1\n),\n\n_expand_costs as (\n  select \n    d.*,\n    -1 + row_number() over(partition by hash_key order by 0) as i,\n    date_from + i as gen_date,\n    case granularity\n      when 'weekly' then date_trunc('week', date_from + i)\n      when 'monthly' then date_trunc('month', date_from + i)\n      when 'yearly' then date_trunc('year', date_from + i)\n      else date_from + i\n    end as trunc_date\n  from _dedup_costs as d, table(generator(rowcount => 10000))\n  qualify i < 1 + date_to - date_from\n),\n\n_window_costs as (\n  select  \n    count(1) over (partition by hash_key, trunc_date) as cnt,\n    (floor(spend_sum * 100 / cnt)::int / 100)::decimal(38,2) as frac_spend,\n\n    case\n      when cnt > 1 and gen_date = trunc_date then spend_sum - frac_spend*(cnt-1)\n      when cnt > 1 and gen_date > trunc_date then frac_spend\n      else spend_sum\n    end::decimal(38, 12) as spend,\n    \n    *\n  from _expand_costs\n)\n\nselect\n  platform,\n  gen_date as billing_date,\n  platform as account,\n  category as service_category,\n  sub_category as service_subcategory,\n\n  concat(\n    'Daily derived cost based on QTY: ',\n    round(qty, 2),\n     ' * PRICE: ',\n    round(price, 2),\n    ' / by ',\n    'N', --cnt,\n    ' days in each ',\n    granularity,\n    ' period'\n  ) as resource, \n  \n  spend,\n\n  abs(\n    hash(\n      concat(billing_date, platform, service_category, service_subcategory, granularity)\n    )\n  ) as unique_key,\n\n  sysdate() as dbt_loaded_at\nfrom _window_costs\nqualify row_number() over (\n  partition by unique_key\n  order by spend desc --> pick highest spend in case of overlapping dates for the same cost base\n) = 1\norder by billing_date, platform, service_category, service_subcategory, granularity", "language": "sql", "refs": [], "sources": [["platform_references", "additional_costs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.fasttrack_cost_reporting.platform_references.additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/platform/stg_platform_references_additional_costs.sql", "compiled": true, "compiled_code": "\n\nwith\n\n_src_costs as (\n  select distinct\n    granularity,\n    lower(trim(platform)) as platform,\n    date(billingdatefrom) as date_from,\n    date(billingdateto) as date_to,\n    coalesce(servicecharge, '') as category,\n    coalesce(servicesubcharge, '') as sub_category,\n    qty::decimal(38,12) as qty,\n    price::decimal(38,12) as price,\n    upper(left(trim(currency), 3)) as currency\n  from fasttrack_cost_reporting_dev.reference_cost_reporting.fasttrack_additional_platform_costs\n  where currency ilike '%USD%' \n),\n\n_enhance_costs as (\n  select\n    * exclude (granularity),\n\n    case\n      when granularity ilike '%da%' then 'daily'\n      when granularity ilike '%we%' then 'weekly'\n      when granularity ilike '%mo%' then 'monthly'\n      when granularity ilike '%ye%' then 'yearly'\n    end as granularity\n  from _src_costs\n  where len(platform) > 0\n    and date_from <= date_to\n),\n\n_dedup_costs as (\n  select\n    *,\n\n    hash(s.*) as hash_key,\n    (qty * price)::decimal(38,12) as spend_sum\n  from _enhance_costs as s\n  where granularity is not null\n    and abs(spend_sum) > 0\n  qualify row_number() over (\n    partition by hash_key\n    order by 0\n  ) = 1\n),\n\n_expand_costs as (\n  select \n    d.*,\n    -1 + row_number() over(partition by hash_key order by 0) as i,\n    date_from + i as gen_date,\n    case granularity\n      when 'weekly' then date_trunc('week', date_from + i)\n      when 'monthly' then date_trunc('month', date_from + i)\n      when 'yearly' then date_trunc('year', date_from + i)\n      else date_from + i\n    end as trunc_date\n  from _dedup_costs as d, table(generator(rowcount => 10000))\n  qualify i < 1 + date_to - date_from\n),\n\n_window_costs as (\n  select  \n    count(1) over (partition by hash_key, trunc_date) as cnt,\n    (floor(spend_sum * 100 / cnt)::int / 100)::decimal(38,2) as frac_spend,\n\n    case\n      when cnt > 1 and gen_date = trunc_date then spend_sum - frac_spend*(cnt-1)\n      when cnt > 1 and gen_date > trunc_date then frac_spend\n      else spend_sum\n    end::decimal(38, 12) as spend,\n    \n    *\n  from _expand_costs\n)\n\nselect\n  platform,\n  gen_date as billing_date,\n  platform as account,\n  category as service_category,\n  sub_category as service_subcategory,\n\n  concat(\n    'Daily derived cost based on QTY: ',\n    round(qty, 2),\n     ' * PRICE: ',\n    round(price, 2),\n    ' / by ',\n    'N', --cnt,\n    ' days in each ',\n    granularity,\n    ' period'\n  ) as resource, \n  \n  spend,\n\n  abs(\n    hash(\n      concat(billing_date, platform, service_category, service_subcategory, granularity)\n    )\n  ) as unique_key,\n\n  sysdate() as dbt_loaded_at\nfrom _window_costs\nqualify row_number() over (\n  partition by unique_key\n  order by spend desc --> pick highest spend in case of overlapping dates for the same cost base\n) = 1\norder by billing_date, platform, service_category, service_subcategory, granularity", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "e4fbbc0cec5e226ed1bd94842e02f4baa117ae62c0d95a935488ebb71487b795"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "stg_snowflake_account_pipe_usage_history", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.sql", "original_file_path": "models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.sql", "unique_id": "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "account_usage", "stg_snowflake_account_pipe_usage_history"], "alias": "stg_snowflake_account_pipe_usage_history", "checksum": {"name": "sha256", "checksum": "96e5d141410bd072c05d8eccb1ff81930348d64c9d9c1b062e3bfd8390ff8eb1"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "fail", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#663399"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Incremental wrapper historizing the view [`snowflake.account_usage.pipe_usage_history`](https://docs.snowflake.com/en/sql-reference/account-usage/pipe_usage_history)", "columns": {"pipe_id": {"name": "pipe_id", "description": "Internal/system-generated identifier for the pipe used for the data load. NULL if no pipe name was specified in the query. Each row includes the totals for all pipes in use within the time range.", "meta": {}, "data_type": "number(38,0)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "pipe_name": {"name": "pipe_name", "description": "Name of the pipe. Displays NULL for the internal (hidden) pipe object used to refresh the metadata for an external table.", "meta": {}, "data_type": "text", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "start_time": {"name": "start_time", "description": "Start of the time (in the local time zone) range in which data loading took place.", "meta": {}, "data_type": "timestamp_ltz", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "end_time": {"name": "end_time", "description": "End of the time (in the local time zone) range in which data loading took place.", "meta": {}, "data_type": "timestamp_ltz", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "credits_used": {"name": "credits_used", "description": "Number of credits billed for Snowpipe data loads during the USAGE_DATE", "meta": {}, "data_type": "number(38,9)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "bytes_inserted": {"name": "bytes_inserted", "description": "Number of bytes loaded during the USAGE_DATE", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": [], "granularity": null}, "files_inserted": {"name": "files_inserted", "description": "Number of files loaded during the USAGE_DATE", "meta": {}, "data_type": "variant", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_key": {"name": "unique_key", "description": "unique hashed value over (extract('epoch_second', start_time), pipe_id)", "meta": {}, "data_type": "number(19,0)", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "control timestamp indicating when a row was refreshed via dbt, in UTC", "meta": {}, "data_type": "timestamp_ntz", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true, "to": null, "to_columns": []}], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#663399"}, "patch_path": "fasttrack_cost_reporting://models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml", "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "incremental", "schema": "transform_cost_reporting", "docs": {"node_color": "#663399"}, "contract": {"enforced": true}, "incremental_strategy": "delete+insert", "unique_key": "unique_key", "on_schema_change": "fail"}, "created_at": 1742470392.670228, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history", "raw_code": "{#-/*\n  simple historization model over the snowflake.account_usage.pipe_usage_history view in\n  order to retain data for longer than 1 year\n*/-#}\n\n{{ \n  config(\n    materialized='incremental',\n    incremental_strategy='delete+insert',\n    unique_key='unique_key',\n    on_schema_change='fail'\n  )\n}}\n\nselect\n  pipe_id,\n  pipe_name,\n  start_time,\n  end_time,\n  coalesce(credits_used, 0) as credits_used,\n  bytes_inserted,\n  files_inserted,\n\n  abs(hash(extract('epoch_second', start_time) || pipe_id)) as unique_key,\n  sysdate() as dbt_loaded_at\nfrom {{ source('snowflake_account_usage', 'pipe_usage_history') }}\nwhere pipe_id is not null\n  and start_time > (\n    select coalesce(max(start_time), '2001-01-01')\n    from {{\n      this if is_incremental() else '(select null::timestamp_ltz as start_time)'\n    }}\n  )\nqualify row_number() over (\n  partition by unique_key\n  order by start_time, end_time\n) = 1", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "pipe_usage_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.fasttrack_cost_reporting.snowflake_account_usage.pipe_usage_history"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.sql", "compiled": true, "compiled_code": "\n\nselect\n  pipe_id,\n  pipe_name,\n  start_time,\n  end_time,\n  coalesce(credits_used, 0) as credits_used,\n  bytes_inserted,\n  files_inserted,\n\n  abs(hash(extract('epoch_second', start_time) || pipe_id)) as unique_key,\n  sysdate() as dbt_loaded_at\nfrom snowflake.account_usage.pipe_usage_history\nwhere pipe_id is not null\n  and start_time > (\n    select coalesce(max(start_time), '2001-01-01')\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\n  )\nqualify row_number() over (\n  partition by unique_key\n  order by start_time, end_time\n) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "26398dd48b0464e102b0e9c0162f9b71cd36b056d0ca76259f32d93ff8b81a12"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.stg_snowflake_account_tag_references": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "stg_snowflake_account_tag_references", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "staging/snowflake/account_usage/stg_snowflake_account_tag_references.sql", "original_file_path": "models/staging/snowflake/account_usage/stg_snowflake_account_tag_references.sql", "unique_id": "model.fasttrack_cost_reporting.stg_snowflake_account_tag_references", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "account_usage", "stg_snowflake_account_tag_references"], "alias": "stg_snowflake_account_tag_references", "checksum": {"name": "sha256", "checksum": "e88801d32e7ccd918d77861b683ac30cdd34010639ebe384229b8a187288fca6"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#663399"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Wrapper model joining tag-related Snowflake account usage views:\n- [`snowflake.account_usage.tags`](https://docs.snowflake.com/en/sql-reference/account-usage/tags)  \n- [`snowflake.account_usage.tag_references`](https://docs.snowflake.com/en/sql-reference/account-usage/tag_references)", "columns": {"tag_database": {"name": "tag_database", "description": "The database in which the tag is set", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_schema": {"name": "tag_schema", "description": "The schema in which the tag is set", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_id": {"name": "tag_id", "description": "Internal/system-generated identifier for the tag, NULL for system tags", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_name": {"name": "tag_name", "description": "The name of the tag, this is the key in the key = 'value' pair of the tag", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_value": {"name": "tag_value", "description": "The value of tag, this is the 'value' in the key = 'value' pair of the tag", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_database": {"name": "object_database", "description": "Database name of the referenced object for database and schema objects. If the object is not a database or schema object, the value is empty.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_schema": {"name": "object_schema", "description": "Schema name of the referenced object (for schema objects). If the referenced object is not a schema object (e.g. warehouse), this value is empty.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_id": {"name": "object_id", "description": "Internal identifier of the referenced object.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_name": {"name": "object_name", "description": "Name of the referenced object if the tag association is on the object. If the tag association is on a column, Snowflake returns the parent table name.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_deleted": {"name": "object_deleted", "description": "Date and time when the associated object was dropped, or if the parentobject is dropped.", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "domain": {"name": "domain", "description": "Domain of the reference object (e.g. table, view) if the tag association is on the object. For columns, the domain is COLUMN if the tag association is on a column.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "column_id": {"name": "column_id", "description": "The local identifier of the reference column; not applicable if the tag association is not a column.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "column_name": {"name": "column_name", "description": "Name of the referenced column; not applicable if the tag association is not a column.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_schema_id": {"name": "tag_schema_id", "description": "The local identifier of the tag schema", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_database_id": {"name": "tag_database_id", "description": "The local identifier of the database in which the tag exists", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_owner": {"name": "tag_owner", "description": "The name of the role that owns the tag", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_comment": {"name": "tag_comment", "description": "Comments for the tag, if any", "meta": {}, "data_type": "variant", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Date and time when the tag was created", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_altered": {"name": "last_altered", "description": "Date and time the object was last altered by a DML, DDL, or background metadata operation", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deleted": {"name": "deleted", "description": "Date and time when the tag was dropped, or the date and time when its parents were dropped", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "allowed_values": {"name": "allowed_values", "description": "Specifies the possible string values that can be assigned to the tag when the tag is set on an object or NULL if the tag does not have any specified allowed values.", "meta": {}, "data_type": "variant", "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_role_type": {"name": "owner_role_type", "description": "The type of role that owns the object, for example ROLE. If a Snowflake Native App owns the object, the value is APPLICATION. Snowflake returns NULL if you delete the object because a deleted object does not have an owner role.", "meta": {}, "data_type": "varchar(13)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "control timestamp indicating when a row was refreshed via dbt, in UTC", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#663399"}, "patch_path": "fasttrack_cost_reporting://models/staging/snowflake/account_usage/stg_snowflake_account_tag_references.yml", "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "transform_cost_reporting", "docs": {"node_color": "#663399"}, "contract": {"enforced": true}}, "created_at": 1742470392.675951, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_tag_references", "raw_code": "{#-/*\n  staging model joining Snowflake account usage metadata for tags and tag_references\n*/-#}\n\nselect\n  tr.tag_database,\n  tr.tag_schema,\n  tr.tag_id,\n  tr.tag_name,\n  tr.tag_value,\n  tr.object_database,\n  tr.object_schema,\n  tr.object_id,\n  tr.object_name,\n  tr.object_deleted,\n  tr.domain,\n  tr.column_id,\n  tr.column_name,\n  ta.tag_schema_id,\n  ta.tag_database_id,\n  ta.tag_owner,\n  ta.tag_comment,\n  ta.created,\n  ta.last_altered,\n  ta.deleted,\n  ta.allowed_values,\n  ta.owner_role_type,\n  sysdate() as dbt_loaded_at\nfrom {{ source('snowflake_account_usage', 'tags') }} as ta\njoin {{ source('snowflake_account_usage', 'tag_references') }} as tr on (\n  ta.tag_id = tr.tag_id\n)", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "tags"], ["snowflake_account_usage", "tag_references"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.fasttrack_cost_reporting.snowflake_account_usage.tags", "source.fasttrack_cost_reporting.snowflake_account_usage.tag_references"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/account_usage/stg_snowflake_account_tag_references.sql", "compiled": true, "compiled_code": "select\n  tr.tag_database,\n  tr.tag_schema,\n  tr.tag_id,\n  tr.tag_name,\n  tr.tag_value,\n  tr.object_database,\n  tr.object_schema,\n  tr.object_id,\n  tr.object_name,\n  tr.object_deleted,\n  tr.domain,\n  tr.column_id,\n  tr.column_name,\n  ta.tag_schema_id,\n  ta.tag_database_id,\n  ta.tag_owner,\n  ta.tag_comment,\n  ta.created,\n  ta.last_altered,\n  ta.deleted,\n  ta.allowed_values,\n  ta.owner_role_type,\n  sysdate() as dbt_loaded_at\nfrom snowflake.account_usage.tags as ta\njoin snowflake.account_usage.tag_references as tr on (\n  ta.tag_id = tr.tag_id\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "52c247a1e06c1d28c3d5491b2ac39bed8a134969f000bc55ee4dcd6915100708"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "stg_snowflake_monitoring_daily_spend", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.sql", "original_file_path": "models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.sql", "unique_id": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "monitoring_package", "stg_snowflake_monitoring_daily_spend"], "alias": "stg_snowflake_monitoring_daily_spend", "checksum": {"name": "sha256", "checksum": "64505e6f60b54d265eebc1ca6b6619b0fa460bfb5dd1e1cb7ab06580a9aad61d"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#663399"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "wrapper model around the view `daily_spend` from the dbt_snowflake_monitoring package; includes daily spend broken down by services as per invoice, w/ additional granularity ref: [daily_spend](https://github.com/get-select/dbt-snowflake-monitoring/blob/5.3.1/models/daily_spend.sql)", "columns": {"ref_date": {"name": "ref_date", "description": "Date of spend in UTC timezone to match with Snowflake's billing timezone", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "service": {"name": "service", "description": "Top level spend category per Snowflake invoice. One of Storage, Compute, Cloud Services, Adj For Incl Cloud Services, Automatic Clustering, Materialized Views, Snowpipe, Query Acceleration, Replication, or Search Optimization.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "storage_type": {"name": "storage_type", "description": "Subcategories where service = \"Storage\"          ", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_name": {"name": "warehouse_name", "description": "Subcategories where service = \"Compute\" or \"Cloud Services\"", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_name": {"name": "database_name", "description": "Subcategories where service = \"Serverless Tasks\" or service = \"Storage\" and storage_type = \"Table and Time Travel\" or \"Failsafe\".", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "spend": {"name": "spend", "description": "Spend in the currency described by the 'currency' column", "meta": {}, "data_type": "decimal(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "spend_net_cloud_services": {"name": "spend_net_cloud_services", "description": "Spend with cloud service adjustments taken into account. The service 'Adj For Incl Cloud Services' has a value of 0 for this column.", "meta": {}, "data_type": "decimal(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "Spend currency, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_key": {"name": "unique_key", "description": "unique hashed value over (ref_date, service, storage_type, warehouse_name, database_name)", "meta": {}, "data_type": "number(19,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "control timestamp indicating when a row was refreshed via dbt, in UTC", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#663399"}, "patch_path": "fasttrack_cost_reporting://models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.yml", "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "transform_cost_reporting", "docs": {"node_color": "#663399"}, "contract": {"enforced": true}}, "created_at": 1742470392.679273, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend", "raw_code": "{#-/*\n  wrapper model around the view `daily_spend` from the dbt_snowflake_monitoring pkg\n*/-#}\n\nwith\n\n_src as (\n  select \n    date(src.date) as ref_date,\n    coalesce(src.service, '') as service,\n    coalesce(src.storage_type, '') as storage_type,\n    coalesce(src.warehouse_name, '') as warehouse_name,\n    coalesce(src.database_name, '') as database_name,\n    src.spend::number(38,12) as spend,\n    src.spend_net_cloud_services::number(38,12) as spend_net_cloud_services,\n    upper(left(trim(src.currency), 3)) as currency\n  from {{ ref('dbt_snowflake_monitoring', 'daily_spend') }} as src\n)\n\nselect \n  *,\n\n  abs(\n    hash(\n      concat(ref_date, service, storage_type, warehouse_name, database_name)\n    )\n  ) as unique_key,\n\n  sysdate() as dbt_loaded_at\nfrom _src\nwhere currency = 'USD' {# /* TODO: only USD supported for now */ #}\nqualify row_number() over (\n  partition by unique_key\n  order by 0\n) = 1", "language": "sql", "refs": [{"name": "daily_spend", "package": "dbt_snowflake_monitoring", "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.daily_spend"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.sql", "compiled": true, "compiled_code": "with\n\n_src as (\n  select \n    date(src.date) as ref_date,\n    coalesce(src.service, '') as service,\n    coalesce(src.storage_type, '') as storage_type,\n    coalesce(src.warehouse_name, '') as warehouse_name,\n    coalesce(src.database_name, '') as database_name,\n    src.spend::number(38,12) as spend,\n    src.spend_net_cloud_services::number(38,12) as spend_net_cloud_services,\n    upper(left(trim(src.currency), 3)) as currency\n  from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_spend as src\n)\n\nselect \n  *,\n\n  abs(\n    hash(\n      concat(ref_date, service, storage_type, warehouse_name, database_name)\n    )\n  ) as unique_key,\n\n  sysdate() as dbt_loaded_at\nfrom _src\nwhere currency = 'USD' \nqualify row_number() over (\n  partition by unique_key\n  order by 0\n) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "28529daba78e62a61885c11ddcec4fe9b8b4e29df1049e642b9d93a9f31c44d4"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "stg_snowflake_monitoring_daily_rates", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_rates.sql", "original_file_path": "models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_rates.sql", "unique_id": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "monitoring_package", "stg_snowflake_monitoring_daily_rates"], "alias": "stg_snowflake_monitoring_daily_rates", "checksum": {"name": "sha256", "checksum": "8ee3343f9001213a2d37ee99d06f6c2f3d6c2f3ea1ca1d7260ba5876e23e3278"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#663399"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "wrapper model around the view `daily_rates` from the dbt_snowflake_monitoring pkg;\n\nA copy of snowflake.organization_usage.rate_sheet_daily for the current Snowflake account, w/\nmissing dates inputed. This model accounts for the fact that multiple rates will appear on a\ngiven day when the account is in overage. This happens for on-demand accounts, or fixed\ncontract accounts who have exceeded their remaining balance.\n\nWhen the account is in overage, the usage_type will appear as 'compute' (instead of\n'overage-compute'), but the effective_rate will be the one associated with `overage-compute`.\nThese instances can be identified using `is_overage_rate` to help understand why a rate may\nhave suddenly changed.\n\nref: [daily_rates](https://github.com/get-select/dbt-snowflake-monitoring/blob/5.3.1/models/daily_rates.sql)", "columns": {"ref_date": {"name": "ref_date", "description": "Date (in the UTC time zone) for the effective price", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_type": {"name": "usage_type", "description": "The type of usage, which can be one of compute, storage, etc.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_type": {"name": "service_type", "description": "The type of service, which can be one of compute or storage", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "effective_rate": {"name": "effective_rate", "description": "The rate after applying any applicable discounts per the contract for the organization", "meta": {}, "data_type": "number(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "Currency of effect rate, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_overage_rate": {"name": "is_overage_rate", "description": "Indicator for whether the effective_rate is an overage rate", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_latest_rate": {"name": "is_latest_rate", "description": "Indicator for whether the effective_rate is the most recent", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_loaded_at": {"name": "dbt_loaded_at", "description": "control timestamp indicating when a row was refreshed via dbt, in UTC", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#663399"}, "patch_path": "fasttrack_cost_reporting://models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_rates.yml", "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "transform_cost_reporting", "docs": {"node_color": "#663399"}, "contract": {"enforced": true}}, "created_at": 1742470392.677283, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_rates", "raw_code": "{#-/*\n  wrapper model around the table `daily_rates` from the dbt_snowflake_monitoring pkg\n*/-#}\n\nselect\n  date(src.date) as ref_date,\n  src.usage_type,\n  src.service_type,\n  src.effective_rate::number(38,12) as effective_rate,\n  src.currency,\n  src.is_overage_rate,\n  src.is_latest_rate,\n  sysdate() as dbt_loaded_at\nfrom {{ ref('dbt_snowflake_monitoring', 'daily_rates') }} as src\nwhere src.currency ilike '%USD%' {# /* TODO: only USD supported for now */ #}", "language": "sql", "refs": [{"name": "daily_rates", "package": "dbt_snowflake_monitoring", "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.daily_rates"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_rates.sql", "compiled": true, "compiled_code": "select\n  date(src.date) as ref_date,\n  src.usage_type,\n  src.service_type,\n  src.effective_rate::number(38,12) as effective_rate,\n  src.currency,\n  src.is_overage_rate,\n  src.is_latest_rate,\n  sysdate() as dbt_loaded_at\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as src\nwhere src.currency ilike '%USD%' ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "a66afce72b40b0e2d88d0189db4bae677c3c0d3ce86fdba05cc4e1d3b49cae12"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.d_cost_reporting_tags": {"database": "fasttrack_cost_reporting_dev", "schema": "publish_cost_reporting", "name": "d_cost_reporting_tags", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "publish/dimensions/d_cost_reporting_tags.sql", "original_file_path": "models/publish/dimensions/d_cost_reporting_tags.sql", "unique_id": "model.fasttrack_cost_reporting.d_cost_reporting_tags", "fqn": ["fasttrack_cost_reporting", "publish", "dimensions", "d_cost_reporting_tags"], "alias": "d_cost_reporting_tags", "checksum": {"name": "sha256", "checksum": "d3738d4764cb5b8fbb19e151dda13dc3991c9026edd8a611275c340b6c0f7d43"}, "config": {"enabled": true, "alias": null, "schema": "publish_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#DC143C"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#DC143C"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "publish_cost_reporting", "docs": {"node_color": "#DC143C"}}, "created_at": 1742470392.437024, "relation_name": "fasttrack_cost_reporting_dev.publish_cost_reporting.d_cost_reporting_tags", "raw_code": "select\n  resource,\n  object_id,\n  tag_values,\n  managed_by\nfrom {{ ref('t_cost_reporting_tags') }}", "language": "sql", "refs": [{"name": "t_cost_reporting_tags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.t_cost_reporting_tags"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/publish/dimensions/d_cost_reporting_tags.sql", "compiled": true, "compiled_code": "select\n  resource,\n  object_id,\n  tag_values,\n  managed_by\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.t_cost_reporting_tags", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.f_cost_reporting": {"database": "fasttrack_cost_reporting_dev", "schema": "publish_cost_reporting", "name": "f_cost_reporting", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "publish/facts/f_cost_reporting.sql", "original_file_path": "models/publish/facts/f_cost_reporting.sql", "unique_id": "model.fasttrack_cost_reporting.f_cost_reporting", "fqn": ["fasttrack_cost_reporting", "publish", "facts", "f_cost_reporting"], "alias": "f_cost_reporting", "checksum": {"name": "sha256", "checksum": "e28905f446890bcc626244903de93d7e32194612be5f74045cce71533eceb2b7"}, "config": {"enabled": true, "alias": null, "schema": "publish_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#DC143C"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Fact table aggregating costs from all platform sources in multiple granularities", "columns": {"unique_key": {"name": "unique_key", "description": "Unique key to identifying the cost record for the specified granularity", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "platform": {"name": "platform", "description": "Platform name (service provider) associated to the additional cost, e.g. Azure, Snowflake", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billingdate": {"name": "billingdate", "description": "Date of the billing period for the cost record, according to the specified granularity", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "account": {"name": "account", "description": "Account identifier associated to the additional cost", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_category": {"name": "service_category", "description": "Classification of the service charge coming from the platform service provider", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_subcategory": {"name": "service_subcategory", "description": "Sub-classification of the service subcharge coming from the platform service provider", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "resource": {"name": "resource", "description": "Describes the source-aligned cost source identifier, varies according to platform", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "environment": {"name": "environment", "description": "Environment in which the cost was incurred, e.g. dev/test/prod/other", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_values": {"name": "tag_values", "description": "Tag values associated to the cost record, according to the source syntax", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "managed_by": {"name": "managed_by", "description": "Entity maintaining the cost record, for most cases it should be only FAST_TRACK", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "granularity": {"name": "granularity", "description": "Granularity of the cost record, e.g. daily, monthly, yearly", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "spend": {"name": "spend", "description": "Amount spent from the cost record, in USD", "meta": {}, "data_type": "number(38,12)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#DC143C"}, "patch_path": "fasttrack_cost_reporting://models/publish/facts/f_cost_reporting.yaml", "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "publish_cost_reporting", "docs": {"node_color": "#DC143C"}, "contract": {"enforced": true}}, "created_at": 1742470392.7398882, "relation_name": "fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting", "raw_code": "select\n  unique_key,\n  platform,\n  billing_date as billingdate,\n  account,\n  service_category,\n  service_subcategory,\n  resource,\n  environment,\n  tag_values,\n  managed_by,\n  granularity,\n  spend\nfrom {{ ref('t_cost_reporting') }}", "language": "sql", "refs": [{"name": "t_cost_reporting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.t_cost_reporting"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/publish/facts/f_cost_reporting.sql", "compiled": true, "compiled_code": "select\n  unique_key,\n  platform,\n  billing_date as billingdate,\n  account,\n  service_category,\n  service_subcategory,\n  resource,\n  environment,\n  tag_values,\n  managed_by,\n  granularity,\n  spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.t_cost_reporting", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "7bcdf98cc9650b8ef86d0ec8a6c36037fae7b1fe747f386cce6d2a3ba72485b7"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_snowflake_serverless_costs": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_snowflake_serverless_costs", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/costs/t_snowflake_serverless_costs.sql", "original_file_path": "models/transform/costs/t_snowflake_serverless_costs.sql", "unique_id": "model.fasttrack_cost_reporting.t_snowflake_serverless_costs", "fqn": ["fasttrack_cost_reporting", "transform", "costs", "t_snowflake_serverless_costs"], "alias": "t_snowflake_serverless_costs", "checksum": {"name": "sha256", "checksum": "84c2386398fd92fe65a58939a301701dc33bf8451841b52bb96e26d7a07a72c4"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.438292, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_snowflake_serverless_costs", "raw_code": "with\n\n_pipe_usage as (\n  select \n    pu.unique_key as unique_key,\n    convert_timezone('UTC', pu.start_time)::date as billing_date,\n    pu.pipe_name || ',' || pu.pipe_id as resource,\n    'Snowpipe' as usage_type,\n    sum(pu.credits_used) as credits_used\n  from {{ ref('stg_snowflake_account_pipe_usage_history') }} as pu\n  group by all\n),\n\n_pipe_spend as (\n  select \n    p.unique_key,\n    p.billing_date,\n    p.resource,\n    p.usage_type,\n    max(p.credits_used * dr.effective_rate) as spend\n  from {{ ref('stg_snowflake_monitoring_daily_rates') }} as dr\n  join _pipe_usage as p on p.billing_date = dr.ref_date\n  where dr.usage_type ilike 'snowpipe' --> attention: snowpipe streaming rates may be different\n  group by all\n),\n\n_fix_spend as (\n  select\n    * replace (\n      abs(\n        hash(\n          unique_key || billing_date\n        )\n      ) as unique_key\n    )\n  from _pipe_spend\n  where abs(spend) > 0\n)\n\nselect\n  unique_key,\n  billing_date,\n  usage_type as service_category,\n  usage_type as service_subcategory,\n  resource,\n  spend,\n  sysdate() as dbt_loaded_at\nfrom _fix_spend\nqualify row_number() over (\n  partition by unique_key\n  order by 0 desc\n) = 1", "language": "sql", "refs": [{"name": "stg_snowflake_account_pipe_usage_history", "package": null, "version": null}, {"name": "stg_snowflake_monitoring_daily_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history", "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/costs/t_snowflake_serverless_costs.sql", "compiled": true, "compiled_code": "with\n\n_pipe_usage as (\n  select \n    pu.unique_key as unique_key,\n    convert_timezone('UTC', pu.start_time)::date as billing_date,\n    pu.pipe_name || ',' || pu.pipe_id as resource,\n    'Snowpipe' as usage_type,\n    sum(pu.credits_used) as credits_used\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history as pu\n  group by all\n),\n\n_pipe_spend as (\n  select \n    p.unique_key,\n    p.billing_date,\n    p.resource,\n    p.usage_type,\n    max(p.credits_used * dr.effective_rate) as spend\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_rates as dr\n  join _pipe_usage as p on p.billing_date = dr.ref_date\n  where dr.usage_type ilike 'snowpipe' --> attention: snowpipe streaming rates may be different\n  group by all\n),\n\n_fix_spend as (\n  select\n    * replace (\n      abs(\n        hash(\n          unique_key || billing_date\n        )\n      ) as unique_key\n    )\n  from _pipe_spend\n  where abs(spend) > 0\n)\n\nselect\n  unique_key,\n  billing_date,\n  usage_type as service_category,\n  usage_type as service_subcategory,\n  resource,\n  spend,\n  sysdate() as dbt_loaded_at\nfrom _fix_spend\nqualify row_number() over (\n  partition by unique_key\n  order by 0 desc\n) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_consolidated_costs": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_consolidated_costs", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/costs/t_consolidated_costs.sql", "original_file_path": "models/transform/costs/t_consolidated_costs.sql", "unique_id": "model.fasttrack_cost_reporting.t_consolidated_costs", "fqn": ["fasttrack_cost_reporting", "transform", "costs", "t_consolidated_costs"], "alias": "t_consolidated_costs", "checksum": {"name": "sha256", "checksum": "28608d04bf67e6058186dca52ed4e7d04f1fa6d63023a2ee98987980f08a8921"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.4389482, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_costs", "raw_code": "{% set consolidated_cols -%}\n    unique_key,\n    platform,\n    billing_date,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n{%- endset %}\n\nwith\n\n_consolidated_costs as (\n  select\n    {{ consolidated_cols}}\n  from {{ ref('t_azure_costs') }}\n\n    union all\n\n  select\n    {{ consolidated_cols}}\n  from {{ ref('t_platform_additional_costs') }}\n\n    union all\n\n  select\n    {{ consolidated_cols}}\n  from {{ ref('t_snowflake_costs') }}\n)\n\nselect\n  {{ consolidated_cols}},\n  sysdate() as dbt_loaded_at\nfrom _consolidated_costs\nqualify row_number() over (\n  partition by unique_key\n  order by 0\n) = 1", "language": "sql", "refs": [{"name": "t_azure_costs", "package": null, "version": null}, {"name": "t_platform_additional_costs", "package": null, "version": null}, {"name": "t_snowflake_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.t_azure_costs", "model.fasttrack_cost_reporting.t_platform_additional_costs", "model.fasttrack_cost_reporting.t_snowflake_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/costs/t_consolidated_costs.sql", "compiled": true, "compiled_code": "\n\nwith\n\n __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n),  __dbt__cte__t_azure_costs as (\n\n\nselect\n  unique_key,\n  'Azure' as platform,\n  billing_date,\n  subscription as account,\n  service_family as service_category,\n  meter_subcategory as service_subcategory,\n  resource_id as resource,\n  cost_in_usd as spend \nfrom __dbt__cte__t_valid_azure_daily_exports\n),  __dbt__cte__t_platform_additional_costs as (\n\n\nselect\n  unique_key,\n  platform,\n  billing_date,\n  account,\n  service_category,\n  service_subcategory,\n  resource,\n  spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\n), _consolidated_costs as (\n  select\n    unique_key,\n    platform,\n    billing_date,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n  from __dbt__cte__t_azure_costs\n\n    union all\n\n  select\n    unique_key,\n    platform,\n    billing_date,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n  from __dbt__cte__t_platform_additional_costs\n\n    union all\n\n  select\n    unique_key,\n    platform,\n    billing_date,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.t_snowflake_costs\n)\n\nselect\n  unique_key,\n    platform,\n    billing_date,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    spend,\n  sysdate() as dbt_loaded_at\nfrom _consolidated_costs\nqualify row_number() over (\n  partition by unique_key\n  order by 0\n) = 1", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fasttrack_cost_reporting.t_valid_azure_daily_exports", "sql": " __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n)"}, {"id": "model.fasttrack_cost_reporting.t_azure_costs", "sql": " __dbt__cte__t_azure_costs as (\n\n\nselect\n  unique_key,\n  'Azure' as platform,\n  billing_date,\n  subscription as account,\n  service_family as service_category,\n  meter_subcategory as service_subcategory,\n  resource_id as resource,\n  cost_in_usd as spend \nfrom __dbt__cte__t_valid_azure_daily_exports\n)"}, {"id": "model.fasttrack_cost_reporting.t_platform_additional_costs", "sql": " __dbt__cte__t_platform_additional_costs as (\n\n\nselect\n  unique_key,\n  platform,\n  billing_date,\n  account,\n  service_category,\n  service_subcategory,\n  resource,\n  spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_azure_costs": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_azure_costs", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/costs/t_azure_costs.sql", "original_file_path": "models/transform/costs/t_azure_costs.sql", "unique_id": "model.fasttrack_cost_reporting.t_azure_costs", "fqn": ["fasttrack_cost_reporting", "transform", "costs", "t_azure_costs"], "alias": "t_azure_costs", "checksum": {"name": "sha256", "checksum": "526be4568b1d2ac4852c05004290989932e95aabaaec1e3646ea3f6863b6107b"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "ephemeral", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.440662, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\n\nselect\n  unique_key,\n  'Azure' as platform,\n  billing_date,\n  subscription as account,\n  service_family as service_category,\n  meter_subcategory as service_subcategory,\n  resource_id as resource,\n  cost_in_usd as spend {# /* TODO: only USD supported for now */ #}\nfrom {{ ref('t_valid_azure_daily_exports') }}", "language": "sql", "refs": [{"name": "t_valid_azure_daily_exports", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.t_valid_azure_daily_exports"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/costs/t_azure_costs.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n) select\n  unique_key,\n  'Azure' as platform,\n  billing_date,\n  subscription as account,\n  service_family as service_category,\n  meter_subcategory as service_subcategory,\n  resource_id as resource,\n  cost_in_usd as spend \nfrom __dbt__cte__t_valid_azure_daily_exports", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fasttrack_cost_reporting.t_valid_azure_daily_exports", "sql": " __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_snowflake_costs": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_snowflake_costs", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/costs/t_snowflake_costs.sql", "original_file_path": "models/transform/costs/t_snowflake_costs.sql", "unique_id": "model.fasttrack_cost_reporting.t_snowflake_costs", "fqn": ["fasttrack_cost_reporting", "transform", "costs", "t_snowflake_costs"], "alias": "t_snowflake_costs", "checksum": {"name": "sha256", "checksum": "63258883487cdac8234442cd3343519a86e6fa7ae4909f1f50a8a6642d82e6a9"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.4416041, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_snowflake_costs", "raw_code": "with\n\n_snowflake_costs as (\n  select\n    unique_key,\n    billing_date,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n  from {{ ref('t_snowflake_serverless_costs') }} as src\n\n    union all\n\n  select\n    unique_key as unique_key,\n    ref_date as billing_date,\n    service as service_category,\n    iff(service ilike 'storage', storage_type, null) as service_subcategory,\n    iff(service ilike 'storage', database_name, warehouse_name) as resource,\n    sum(spend) as spend\n  from {{ ref('stg_snowflake_monitoring_daily_spend') }} as src\n  where service ilike any ('%cloud service%', '%compute%', '%storage%')\n    and abs(spend) > 0\n  group by all\n)\n\nselect\n  unique_key,\n  'Snowflake' as platform,\n  billing_date,\n  current_account() as account,\n  service_category,\n  service_subcategory,\n  resource,\n  spend,\n  sysdate() as dbt_loaded_at\nfrom _snowflake_costs", "language": "sql", "refs": [{"name": "t_snowflake_serverless_costs", "package": null, "version": null}, {"name": "stg_snowflake_monitoring_daily_spend", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.t_snowflake_serverless_costs", "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/costs/t_snowflake_costs.sql", "compiled": true, "compiled_code": "with\n\n_snowflake_costs as (\n  select\n    unique_key,\n    billing_date,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.t_snowflake_serverless_costs as src\n\n    union all\n\n  select\n    unique_key as unique_key,\n    ref_date as billing_date,\n    service as service_category,\n    iff(service ilike 'storage', storage_type, null) as service_subcategory,\n    iff(service ilike 'storage', database_name, warehouse_name) as resource,\n    sum(spend) as spend\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend as src\n  where service ilike any ('%cloud service%', '%compute%', '%storage%')\n    and abs(spend) > 0\n  group by all\n)\n\nselect\n  unique_key,\n  'Snowflake' as platform,\n  billing_date,\n  current_account() as account,\n  service_category,\n  service_subcategory,\n  resource,\n  spend,\n  sysdate() as dbt_loaded_at\nfrom _snowflake_costs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_platform_additional_costs": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_platform_additional_costs", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/costs/t_platform_additional_costs.sql", "original_file_path": "models/transform/costs/t_platform_additional_costs.sql", "unique_id": "model.fasttrack_cost_reporting.t_platform_additional_costs", "fqn": ["fasttrack_cost_reporting", "transform", "costs", "t_platform_additional_costs"], "alias": "t_platform_additional_costs", "checksum": {"name": "sha256", "checksum": "d3e50f59ef09ea9a214a04f2a559196a3a87d925c7b3d2dc63d0ed0bb767d7c9"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "ephemeral", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.4424472, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\n\nselect\n  unique_key,\n  platform,\n  billing_date,\n  account,\n  service_category,\n  service_subcategory,\n  resource,\n  spend\nfrom {{ ref('stg_platform_references_additional_costs') }}", "language": "sql", "refs": [{"name": "stg_platform_references_additional_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/costs/t_platform_additional_costs.sql", "compiled": true, "compiled_code": "\n\nselect\n  unique_key,\n  platform,\n  billing_date,\n  account,\n  service_category,\n  service_subcategory,\n  resource,\n  spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_valid_azure_daily_exports": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_valid_azure_daily_exports", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/azure/t_valid_azure_daily_exports.sql", "original_file_path": "models/transform/azure/t_valid_azure_daily_exports.sql", "unique_id": "model.fasttrack_cost_reporting.t_valid_azure_daily_exports", "fqn": ["fasttrack_cost_reporting", "transform", "azure", "t_valid_azure_daily_exports"], "alias": "t_valid_azure_daily_exports", "checksum": {"name": "sha256", "checksum": "942cdb70363e705f48350cd0dc66d92392db5161cf2363b2d2911fb10899ac2b"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "ephemeral", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.443098, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\n\nselect * exclude(dbt_loaded_at)\nfrom {{ ref('stg_azure_daily_exports') }}\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and {{\n    'tags:\"{}\" ilike \\'{}\\''.format(\n      var('fasttrack_cost_reporting:azure_tags_key', 'ProjectName'),\n      var('fasttrack_cost_reporting:azure_tags_value', 'Fast Track Development')\n    )\n  }}", "language": "sql", "refs": [{"name": "stg_azure_daily_exports", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.stg_azure_daily_exports"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/azure/t_valid_azure_daily_exports.sql", "compiled": true, "compiled_code": "\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_azure_tags": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_azure_tags", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/tags/t_azure_tags.sql", "original_file_path": "models/transform/tags/t_azure_tags.sql", "unique_id": "model.fasttrack_cost_reporting.t_azure_tags", "fqn": ["fasttrack_cost_reporting", "transform", "tags", "t_azure_tags"], "alias": "t_azure_tags", "checksum": {"name": "sha256", "checksum": "91aa929dc9b19d9ef4b51ad6dcf77eb51132a03432b69e936c2b38f7cc2aa596"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "ephemeral", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.444693, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\n\nselect \n  resource_id as resource, \n  resource_id as object_id,\n  to_json(max(tags)) as tag_values\nfrom {{ ref('t_valid_azure_daily_exports') }}\ngroup by resource_id", "language": "sql", "refs": [{"name": "t_valid_azure_daily_exports", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.t_valid_azure_daily_exports"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/tags/t_azure_tags.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n) select \n  resource_id as resource, \n  resource_id as object_id,\n  to_json(max(tags)) as tag_values\nfrom __dbt__cte__t_valid_azure_daily_exports\ngroup by resource_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fasttrack_cost_reporting.t_valid_azure_daily_exports", "sql": " __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_snowflake_tags": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_snowflake_tags", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/tags/t_snowflake_tags.sql", "original_file_path": "models/transform/tags/t_snowflake_tags.sql", "unique_id": "model.fasttrack_cost_reporting.t_snowflake_tags", "fqn": ["fasttrack_cost_reporting", "transform", "tags", "t_snowflake_tags"], "alias": "t_snowflake_tags", "checksum": {"name": "sha256", "checksum": "dfbee42984d39962853c2eb2f475d549c4f8bc4060b6706ea91fcfc6917d143d"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "ephemeral", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.4458828, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\n\nselect\n  object_name as resource,\n  iff(\n    domain ilike any ('%database%', '%warehouse%'),\n    object_name,\n    object_id::text\n  ) as object_id,\n  max(replace(allowed_values[0], '\"', '')) as tag_values\nfrom {{ ref('stg_snowflake_account_tag_references') }}\nwhere deleted is null\ngroup by all", "language": "sql", "refs": [{"name": "stg_snowflake_account_tag_references", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_account_tag_references"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/tags/t_snowflake_tags.sql", "compiled": true, "compiled_code": "\n\nselect\n  object_name as resource,\n  iff(\n    domain ilike any ('%database%', '%warehouse%'),\n    object_name,\n    object_id::text\n  ) as object_id,\n  max(replace(allowed_values[0], '\"', '')) as tag_values\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_tag_references\nwhere deleted is null\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_consolidated_tags": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_consolidated_tags", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/tags/t_consolidated_tags.sql", "original_file_path": "models/transform/tags/t_consolidated_tags.sql", "unique_id": "model.fasttrack_cost_reporting.t_consolidated_tags", "fqn": ["fasttrack_cost_reporting", "transform", "tags", "t_consolidated_tags"], "alias": "t_consolidated_tags", "checksum": {"name": "sha256", "checksum": "b3c9cc1f4c210155944b6be4142e8a4eababc772af5ff7bb039257d4dc8a7a95"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.446679, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_tags", "raw_code": "{% set consolidated_cols -%}\n    resource,\n    object_id,\n    tag_values\n{%- endset %}\n\nwith\n\n_fast_track_tags as (\n  select\n    {{ consolidated_cols }}\n  from {{ ref('t_azure_tags') }}\n    union all\n  select\n    {{ consolidated_cols }}\n  from {{ ref('t_platform_additional_tags') }}\n    union all\n  select\n    {{ consolidated_cols }}\n  from {{ ref('t_snowflake_tags') }}\n)\n\nselect \n  'FAST_TRACK' as managed_by, \n  {{ consolidated_cols }},\n  sysdate() as dbt_loaded_at\nfrom _fast_track_tags\norder by tag_values", "language": "sql", "refs": [{"name": "t_azure_tags", "package": null, "version": null}, {"name": "t_platform_additional_tags", "package": null, "version": null}, {"name": "t_snowflake_tags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.t_azure_tags", "model.fasttrack_cost_reporting.t_platform_additional_tags", "model.fasttrack_cost_reporting.t_snowflake_tags"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/tags/t_consolidated_tags.sql", "compiled": true, "compiled_code": "\n\nwith\n\n __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n),  __dbt__cte__t_azure_tags as (\n\n\nselect \n  resource_id as resource, \n  resource_id as object_id,\n  to_json(max(tags)) as tag_values\nfrom __dbt__cte__t_valid_azure_daily_exports\ngroup by resource_id\n),  __dbt__cte__t_platform_additional_tags as (\n\n\nselect\n  resource,\n  resource as object_id, \n  platform as tag_values\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\ngroup by all\n),  __dbt__cte__t_snowflake_tags as (\n\n\nselect\n  object_name as resource,\n  iff(\n    domain ilike any ('%database%', '%warehouse%'),\n    object_name,\n    object_id::text\n  ) as object_id,\n  max(replace(allowed_values[0], '\"', '')) as tag_values\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_tag_references\nwhere deleted is null\ngroup by all\n), _fast_track_tags as (\n  select\n    resource,\n    object_id,\n    tag_values\n  from __dbt__cte__t_azure_tags\n    union all\n  select\n    resource,\n    object_id,\n    tag_values\n  from __dbt__cte__t_platform_additional_tags\n    union all\n  select\n    resource,\n    object_id,\n    tag_values\n  from __dbt__cte__t_snowflake_tags\n)\n\nselect \n  'FAST_TRACK' as managed_by, \n  resource,\n    object_id,\n    tag_values,\n  sysdate() as dbt_loaded_at\nfrom _fast_track_tags\norder by tag_values", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.fasttrack_cost_reporting.t_valid_azure_daily_exports", "sql": " __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n)"}, {"id": "model.fasttrack_cost_reporting.t_azure_tags", "sql": " __dbt__cte__t_azure_tags as (\n\n\nselect \n  resource_id as resource, \n  resource_id as object_id,\n  to_json(max(tags)) as tag_values\nfrom __dbt__cte__t_valid_azure_daily_exports\ngroup by resource_id\n)"}, {"id": "model.fasttrack_cost_reporting.t_platform_additional_tags", "sql": " __dbt__cte__t_platform_additional_tags as (\n\n\nselect\n  resource,\n  resource as object_id, \n  platform as tag_values\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\ngroup by all\n)"}, {"id": "model.fasttrack_cost_reporting.t_snowflake_tags", "sql": " __dbt__cte__t_snowflake_tags as (\n\n\nselect\n  object_name as resource,\n  iff(\n    domain ilike any ('%database%', '%warehouse%'),\n    object_name,\n    object_id::text\n  ) as object_id,\n  max(replace(allowed_values[0], '\"', '')) as tag_values\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_tag_references\nwhere deleted is null\ngroup by all\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_platform_additional_tags": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_platform_additional_tags", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/tags/t_platform_additional_tags.sql", "original_file_path": "models/transform/tags/t_platform_additional_tags.sql", "unique_id": "model.fasttrack_cost_reporting.t_platform_additional_tags", "fqn": ["fasttrack_cost_reporting", "transform", "tags", "t_platform_additional_tags"], "alias": "t_platform_additional_tags", "checksum": {"name": "sha256", "checksum": "4bbca2d2edba69f7e0e2acce2b10a31600a24e33b8bc327084be84a934d97983"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "ephemeral", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.448422, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\n\nselect\n  resource,\n  resource as object_id, \n  platform as tag_values\nfrom {{ ref('stg_platform_references_additional_costs') }}\ngroup by all", "language": "sql", "refs": [{"name": "stg_platform_references_additional_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/tags/t_platform_additional_tags.sql", "compiled": true, "compiled_code": "\n\nselect\n  resource,\n  resource as object_id, \n  platform as tag_values\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_cost_reporting": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_cost_reporting", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/final/t_cost_reporting.sql", "original_file_path": "models/transform/final/t_cost_reporting.sql", "unique_id": "model.fasttrack_cost_reporting.t_cost_reporting", "fqn": ["fasttrack_cost_reporting", "transform", "final", "t_cost_reporting"], "alias": "t_cost_reporting", "checksum": {"name": "sha256", "checksum": "baaabb378c2a2f85143bf19af793e4797c9ac5f511a0d4e971cea29fd39e243c"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.449195, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_cost_reporting", "raw_code": "{% set consolidated_cols -%}\n    platform,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    environment,\n    tag_values,\n    managed_by\n{%- endset %}\n\nwith\n\n_expanded_costs_daily as (\n  select\n    f.unique_key,\n    f.platform,\n    f.billing_date,\n    f.account,\n    f.service_category,\n    f.service_subcategory,\n    f.spend,\n    split_part(f.resource, ',',  1) as resource,\n    coalesce(t.tag_values, 'n/a') as tag_values,\n    coalesce(t.managed_by, 'OTHER') as managed_by,\n    case\n      when f.resource ilike '%dev%' or t.tag_values ilike '%dev%' then 'DEV'\n      when f.resource ilike '%test%' or t.tag_values ilike '%test%' then 'TEST'\n      when f.resource ilike '%prod%' or t.tag_values ilike '%prod%' then 'PROD'\n      else 'OTHER'\n    end as environment\n  from {{ ref('t_consolidated_costs') }} as f\n  join {{ ref('t_consolidated_tags') }} as t on ( {# /* TODO: review if left join */ #}\n    split_part(\n      f.resource,\n      ',', \n      iff(len(split_part(f.resource, ',',  2)) < 1, 1, 2)\n    ) = t.object_id\n  )\n  where f.billing_date <= sysdate()::date\n),\n\n_aggregated_costs as (\n  select\n    unique_key,\n    {{ consolidated_cols }},\n    'daily' as granularity,\n    billing_date,\n    spend\n  from _expanded_costs_daily\n    \n    union all\n\n  select\n    unique_key,\n    {{ consolidated_cols }},\n    'weekly' as granularity,\n    date_trunc('week', billing_date) as billing_date,\n    spend\n  from _expanded_costs_daily\n\n    union all\n\n  select\n    unique_key,\n    {{ consolidated_cols }},\n    'monthly' as granularity,\n    date_trunc('month', billing_date) as billing_date,\n    spend\n  from _expanded_costs_daily\n)\n\nselect\n  unique_key || left(granularity, 1) as unique_key,\n  {{ consolidated_cols }},\n  granularity,\n  billing_date,\n  spend,\n  sysdate() as dbt_loaded_at\nfrom _aggregated_costs", "language": "sql", "refs": [{"name": "t_consolidated_costs", "package": null, "version": null}, {"name": "t_consolidated_tags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.t_consolidated_costs", "model.fasttrack_cost_reporting.t_consolidated_tags"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/final/t_cost_reporting.sql", "compiled": true, "compiled_code": "\n\nwith\n\n_expanded_costs_daily as (\n  select\n    f.unique_key,\n    f.platform,\n    f.billing_date,\n    f.account,\n    f.service_category,\n    f.service_subcategory,\n    f.spend,\n    split_part(f.resource, ',',  1) as resource,\n    coalesce(t.tag_values, 'n/a') as tag_values,\n    coalesce(t.managed_by, 'OTHER') as managed_by,\n    case\n      when f.resource ilike '%dev%' or t.tag_values ilike '%dev%' then 'DEV'\n      when f.resource ilike '%test%' or t.tag_values ilike '%test%' then 'TEST'\n      when f.resource ilike '%prod%' or t.tag_values ilike '%prod%' then 'PROD'\n      else 'OTHER'\n    end as environment\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_costs as f\n  join fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_tags as t on ( \n    split_part(\n      f.resource,\n      ',', \n      iff(len(split_part(f.resource, ',',  2)) < 1, 1, 2)\n    ) = t.object_id\n  )\n  where f.billing_date <= sysdate()::date\n),\n\n_aggregated_costs as (\n  select\n    unique_key,\n    platform,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    environment,\n    tag_values,\n    managed_by,\n    'daily' as granularity,\n    billing_date,\n    spend\n  from _expanded_costs_daily\n    \n    union all\n\n  select\n    unique_key,\n    platform,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    environment,\n    tag_values,\n    managed_by,\n    'weekly' as granularity,\n    date_trunc('week', billing_date) as billing_date,\n    spend\n  from _expanded_costs_daily\n\n    union all\n\n  select\n    unique_key,\n    platform,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    environment,\n    tag_values,\n    managed_by,\n    'monthly' as granularity,\n    date_trunc('month', billing_date) as billing_date,\n    spend\n  from _expanded_costs_daily\n)\n\nselect\n  unique_key || left(granularity, 1) as unique_key,\n  platform,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    environment,\n    tag_values,\n    managed_by,\n  granularity,\n  billing_date,\n  spend,\n  sysdate() as dbt_loaded_at\nfrom _aggregated_costs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fasttrack_cost_reporting.t_cost_reporting_tags": {"database": "fasttrack_cost_reporting_dev", "schema": "transform_cost_reporting", "name": "t_cost_reporting_tags", "resource_type": "model", "package_name": "fasttrack_cost_reporting", "path": "transform/final/t_cost_reporting_tags.sql", "original_file_path": "models/transform/final/t_cost_reporting_tags.sql", "unique_id": "model.fasttrack_cost_reporting.t_cost_reporting_tags", "fqn": ["fasttrack_cost_reporting", "transform", "final", "t_cost_reporting_tags"], "alias": "t_cost_reporting_tags", "checksum": {"name": "sha256", "checksum": "212b21f62a0e8d7187022a3afccc084f8611feffcfd1c9ac064842978c735261"}, "config": {"enabled": true, "alias": null, "schema": "transform_cost_reporting", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#FF4500"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#FF4500"}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "transform_cost_reporting", "docs": {"node_color": "#FF4500"}}, "created_at": 1742470392.4512582, "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_cost_reporting_tags", "raw_code": "select \n  coalesce(split_part(f.resource, ',',  1), 'n/a') as resource,\n  t.object_id,\n  t.tag_values,\n  coalesce(max(t.managed_by), 'OTHER') as managed_by,\n  sysdate() as dbt_loaded_at\nfrom {{ ref('t_consolidated_tags') }} as t\njoin {{ ref('t_consolidated_costs') }} as f on ( {# /* TODO: review if left join */ #}\n  t.object_id = split_part(\n    f.resource,\n    ',', \n    iff(len(split_part(f.resource, ',',  2)) < 1, 1, 2)\n  )\n)\ngroup by all", "language": "sql", "refs": [{"name": "t_consolidated_tags", "package": null, "version": null}, {"name": "t_consolidated_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.t_consolidated_tags", "model.fasttrack_cost_reporting.t_consolidated_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/transform/final/t_cost_reporting_tags.sql", "compiled": true, "compiled_code": "select \n  coalesce(split_part(f.resource, ',',  1), 'n/a') as resource,\n  t.object_id,\n  t.tag_values,\n  coalesce(max(t.managed_by), 'OTHER') as managed_by,\n  sysdate() as dbt_loaded_at\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_tags as t\njoin fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_costs as f on ( \n  t.object_id = split_part(\n    f.resource,\n    ',', \n    iff(len(split_part(f.resource, ',',  2)) < 1, 1, 2)\n  )\n)\ngroup by all", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.fasttrack_cost_reporting.stg_azure_daily_exports__validate_key_cols": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "stg_azure_daily_exports__validate_key_cols", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "singular/staging/azure/stg_azure_daily_exports__validate_key_cols.sql", "original_file_path": "tests/singular/staging/azure/stg_azure_daily_exports__validate_key_cols.sql", "unique_id": "test.fasttrack_cost_reporting.stg_azure_daily_exports__validate_key_cols", "fqn": ["fasttrack_cost_reporting", "singular", "staging", "azure", "stg_azure_daily_exports__validate_key_cols"], "alias": "stg_azure_daily_exports__validate_key_cols", "checksum": {"name": "sha256", "checksum": "80d9a10a7a15ecd4881257acec3993e1a184305e103390e86efc30894060da82"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "Singular test validating main columns:\n- unique_key\n- billing_date\n- ingested_at\n- resource_id\n- meter_id", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": "fasttrack_cost_reporting://tests/singular/staging/azure/stg_azure_daily_exports__validate_key_cols.yml", "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.738505, "relation_name": null, "raw_code": "with\n\n_src as (\n  select * from {{ ref('stg_azure_daily_exports') }}\n)\n\nselect distinct\n  'unique_key should be a positive number' as error_reason,\n  unique_key::text as error_value\nfrom _src\nwhere coalesce(unique_key, -1) < 0\n\nunion all\n\nselect distinct\n  'billing_date must occur between 2001-01-01 and current date' as error_reason,\n  billing_date::text as error_value\nfrom _src\nwhere coalesce(billing_date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'ingested_at must occur between 2001-01-01 and current date' as error_reason,\n  ingested_at::text as error_value\nfrom _src\nwhere coalesce(ingested_at::date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'billing_date must not be more recent than ingestion_date' as error_reason,\n  concat(\n    'billing: ',\n    coalesce(billing_date::text, 'nil'),\n    ' ingestion: ',\n    coalesce(date(ingested_at)::text, 'nil')\n  ) as error_value\nfrom _src\nwhere coalesce(billing_date, '1990-01-01') > coalesce(date(ingested_at), '2001-01-01')", "language": "sql", "refs": [{"name": "stg_azure_daily_exports", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.stg_azure_daily_exports"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/tests/singular/staging/azure/stg_azure_daily_exports__validate_key_cols.sql", "compiled": true, "compiled_code": "with\n\n_src as (\n  select * from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\n)\n\nselect distinct\n  'unique_key should be a positive number' as error_reason,\n  unique_key::text as error_value\nfrom _src\nwhere coalesce(unique_key, -1) < 0\n\nunion all\n\nselect distinct\n  'billing_date must occur between 2001-01-01 and current date' as error_reason,\n  billing_date::text as error_value\nfrom _src\nwhere coalesce(billing_date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'ingested_at must occur between 2001-01-01 and current date' as error_reason,\n  ingested_at::text as error_value\nfrom _src\nwhere coalesce(ingested_at::date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'billing_date must not be more recent than ingestion_date' as error_reason,\n  concat(\n    'billing: ',\n    coalesce(billing_date::text, 'nil'),\n    ' ingestion: ',\n    coalesce(date(ingested_at)::text, 'nil')\n  ) as error_value\nfrom _src\nwhere coalesce(billing_date, '1990-01-01') > coalesce(date(ingested_at), '2001-01-01')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.fasttrack_cost_reporting.stg_platform_references_additional_costs__validate_key_cols": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "stg_platform_references_additional_costs__validate_key_cols", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "singular/staging/platform/stg_platform_references_additional_costs__validate_key_cols.sql", "original_file_path": "tests/singular/staging/platform/stg_platform_references_additional_costs__validate_key_cols.sql", "unique_id": "test.fasttrack_cost_reporting.stg_platform_references_additional_costs__validate_key_cols", "fqn": ["fasttrack_cost_reporting", "singular", "staging", "platform", "stg_platform_references_additional_costs__validate_key_cols"], "alias": "stg_platform_references_additional_costs__validate_key_cols", "checksum": {"name": "sha256", "checksum": "90752656a672a9182b253e8acfb67e27f28c26b1729d498bc289051e990e4c31"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "Singular test validating main columns:\n- unique_key\n- billing_date\n- platform\n- account\n- resource\n- spend", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": "fasttrack_cost_reporting://tests/singular/staging/platform/stg_platform_references_additional_costs__validate_key_cols.yml", "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.738679, "relation_name": null, "raw_code": "with\n\n_src as (\n  select * from {{ ref('stg_platform_references_additional_costs') }}\n)\n\nselect distinct\n  'unique_key should be a positive number' as error_reason,\n  unique_key::text as error_value\nfrom _src\nwhere coalesce(unique_key, -1) < 0\n\nunion all\n\nselect distinct\n  'billing_date must not be older than 2021-01-01' as error_reason,\n  billing_date::text as error_value\nfrom _src\nwhere not coalesce(billing_date, '1990-01-01') >= '2001-01-01'\n\nunion all\n\nselect distinct\n  'platform should not be empty' as error_reason,\n  platform::text as error_value\nfrom _src\nwhere len(coalesce(platform, '')) < 1\n\nunion all\n\nselect distinct\n  'account should match platform' as error_reason,\n  concat(\n    'account: ',\n    coalesce(account, 'nil'),\n    ' platform: ',\n    coalesce(platform, 'nil')\n  ) as error_value\nfrom _src\nwhere account != platform\n\nunion all\n\nselect distinct\n  'resource should not be empty' as error_reason,\n  resource::text as error_value\nfrom _src\nwhere len(coalesce(resource, '')) < 1\n\nunion all\n\nselect distinct\n  'spend should not be zero' as error_reason,\n  spend::text as error_value\nfrom _src\nwhere abs(coalesce(spend, 0)) < 0.000000000001", "language": "sql", "refs": [{"name": "stg_platform_references_additional_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/tests/singular/staging/platform/stg_platform_references_additional_costs__validate_key_cols.sql", "compiled": true, "compiled_code": "with\n\n_src as (\n  select * from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\n)\n\nselect distinct\n  'unique_key should be a positive number' as error_reason,\n  unique_key::text as error_value\nfrom _src\nwhere coalesce(unique_key, -1) < 0\n\nunion all\n\nselect distinct\n  'billing_date must not be older than 2021-01-01' as error_reason,\n  billing_date::text as error_value\nfrom _src\nwhere not coalesce(billing_date, '1990-01-01') >= '2001-01-01'\n\nunion all\n\nselect distinct\n  'platform should not be empty' as error_reason,\n  platform::text as error_value\nfrom _src\nwhere len(coalesce(platform, '')) < 1\n\nunion all\n\nselect distinct\n  'account should match platform' as error_reason,\n  concat(\n    'account: ',\n    coalesce(account, 'nil'),\n    ' platform: ',\n    coalesce(platform, 'nil')\n  ) as error_value\nfrom _src\nwhere account != platform\n\nunion all\n\nselect distinct\n  'resource should not be empty' as error_reason,\n  resource::text as error_value\nfrom _src\nwhere len(coalesce(resource, '')) < 1\n\nunion all\n\nselect distinct\n  'spend should not be zero' as error_reason,\n  spend::text as error_value\nfrom _src\nwhere abs(coalesce(spend, 0)) < 0.000000000001", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history__validate_key_cols": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "stg_snowflake_account_pipe_usage_history__validate_key_cols", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "singular/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history__validate_key_cols.sql", "original_file_path": "tests/singular/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history__validate_key_cols.sql", "unique_id": "test.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history__validate_key_cols", "fqn": ["fasttrack_cost_reporting", "singular", "staging", "snowflake", "account_usage", "stg_snowflake_account_pipe_usage_history__validate_key_cols"], "alias": "stg_snowflake_account_pipe_usage_history__validate_key_cols", "checksum": {"name": "sha256", "checksum": "70f8635ebef2af27c8490cf384dc53d7163e466b37f2662160bcd5357a488f87"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "Singular test validating main columns:\n- unique_key\n- start_time\n- end_time\n- pipe_id\n- pipe_name", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": "fasttrack_cost_reporting://tests/singular/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history__validate_key_cols.yml", "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.7388318, "relation_name": null, "raw_code": "with\n\n_src as (\n  select * from {{ ref('stg_snowflake_account_pipe_usage_history') }}\n)\n\nselect distinct\n  'unique_key should be a positive number' as error_reason,\n  unique_key::text as error_value\nfrom _src\nwhere coalesce(unique_key, -1) < 0\n\nunion all\n\nselect distinct\n  'start_time must occur between 2001-01-01 and current date' as error_reason,\n  start_time::text as error_value\nfrom _src\nwhere coalesce(start_time::date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'end_time must occur between 2001-01-01 and current date' as error_reason,\n  end_time::text as error_value\nfrom _src\nwhere coalesce(end_time::date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'start_time must not be more recent than end_time' as error_reason,\n  concat(\n    'billing: ',\n    coalesce(start_time::text, 'nil'),\n    ' ingestion: ',\n    coalesce(end_time::text, 'nil')\n  ) as error_value\nfrom _src\nwhere coalesce(start_time, '1990-01-01') > coalesce(end_time, '2001-01-01')\n\nunion all\n\nselect distinct\n  'pipe_id should not be empty' as error_reason,\n  pipe_id::text as error_value\nfrom _src\nwhere len(coalesce(pipe_id, '')) < 1\n\nunion all\n\nselect distinct\n  'pipe_name should not be empty' as error_reason,\n  pipe_name::text as error_value\nfrom _src\nwhere len(coalesce(pipe_name, '')) < 1", "language": "sql", "refs": [{"name": "stg_snowflake_account_pipe_usage_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/tests/singular/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history__validate_key_cols.sql", "compiled": true, "compiled_code": "with\n\n_src as (\n  select * from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\n)\n\nselect distinct\n  'unique_key should be a positive number' as error_reason,\n  unique_key::text as error_value\nfrom _src\nwhere coalesce(unique_key, -1) < 0\n\nunion all\n\nselect distinct\n  'start_time must occur between 2001-01-01 and current date' as error_reason,\n  start_time::text as error_value\nfrom _src\nwhere coalesce(start_time::date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'end_time must occur between 2001-01-01 and current date' as error_reason,\n  end_time::text as error_value\nfrom _src\nwhere coalesce(end_time::date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'start_time must not be more recent than end_time' as error_reason,\n  concat(\n    'billing: ',\n    coalesce(start_time::text, 'nil'),\n    ' ingestion: ',\n    coalesce(end_time::text, 'nil')\n  ) as error_value\nfrom _src\nwhere coalesce(start_time, '1990-01-01') > coalesce(end_time, '2001-01-01')\n\nunion all\n\nselect distinct\n  'pipe_id should not be empty' as error_reason,\n  pipe_id::text as error_value\nfrom _src\nwhere len(coalesce(pipe_id, '')) < 1\n\nunion all\n\nselect distinct\n  'pipe_name should not be empty' as error_reason,\n  pipe_name::text as error_value\nfrom _src\nwhere len(coalesce(pipe_name, '')) < 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "model.dbt_snowflake_monitoring.query_direct_object_access": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "query_direct_object_access", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_direct_object_access.sql", "original_file_path": "models/query_direct_object_access.sql", "unique_id": "model.dbt_snowflake_monitoring.query_direct_object_access", "fqn": ["dbt_snowflake_monitoring", "query_direct_object_access"], "alias": "query_direct_object_access", "checksum": {"name": "sha256", "checksum": "37b845504a1c198218aa44e781d637575ba76ada4d1f10559f1be0ccd4b333da"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["_unique_id", "query_start_time"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model tracks the direct objects accessed by a query. It contains 1 row per query per object. An object can be a regular table owned/created by your account, a table from a data share, a secured view, or an external table. See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html for more details. Access history is only available for Snowflake accounts on enterprise or higher, and therefore this model will be empty for standard accounts. See https://select.dev/posts/snowflake-unused-tables#direct-versus-base-objects-accessed for more details on the difference between base versus direct objects accessed.", "columns": {"_unique_id": {"name": "_unique_id", "description": "Unique identifier for each row in the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_name": {"name": "object_name", "description": "Fully qualified object name. For a table, this would be <database_name>.<schema_name>.<table_name>", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_domain": {"name": "object_domain", "description": "One of the following: Table, View, Materialized view, External table, Stream, or Stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "table_id": {"name": "table_id", "description": "Unique identifier for the table/view. Will be null for secured views and tables from a data share.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "columns_accessed": {"name": "columns_accessed", "description": "Array of column_names accessed in the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/query_direct_object_access.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["_unique_id", "query_start_time"], "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.76093, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_direct_object_access", "raw_code": "{{\n    config(\n        materialized=\"incremental\",\n        unique_key=[\"_unique_id\", \"query_start_time\"],\n    )\n}}\n\nwith\n    access_history as (\n        select *\n        from {{ ref(\"stg_access_history\") }}\n\n        {% if is_incremental() %}\n            where\n                query_start_time > (\n                    select\n                        coalesce(\n                            dateadd('day', -1, max(query_start_time)), '1970-01-01'\n                        )\n                    from {{ this }}\n                )\n        {% endif %}\n\n    ),\n\n    access_history_flattened as (\n        select\n            access_history.query_id,\n            access_history.query_start_time,\n            access_history.user_name,\n            objects_accessed.value:objectid::integer as table_id,  -- will be null for secured views or tables from a data share\n            objects_accessed.value:objectname::text as object_name,\n            objects_accessed.value:objectdomain::text as object_domain,\n            objects_accessed.value:columns as columns_array\n\n        from\n            access_history,\n            lateral flatten(access_history.direct_objects_accessed) as objects_accessed\n    ),\n\n    access_history_flattened_w_columns as (\n        select\n            access_history_flattened.query_id,\n            access_history_flattened.query_start_time,\n            access_history_flattened.user_name,\n            access_history_flattened.table_id,\n            access_history_flattened.object_name,\n            access_history_flattened.object_domain,\n            array_agg(distinct columns.value:columnname::text) as columns_accessed\n        from\n            access_history_flattened,\n            lateral flatten(access_history_flattened.columns_array) as columns\n        where access_history_flattened.object_name is not null\n        group by 1, 2, 3, 4, 5, 6\n    )\n\nselect\nmd5(concat(query_id, object_name)) as _unique_id,\n*\nfrom access_history_flattened_w_columns\nqualify -- added by affinaquest to ensure uniqueness\n    row_number() over (\n        partition by md5(concat(query_id, object_name)), query_start_time\n        order by query_start_time asc\n    )\n    = 1\norder by query_start_time asc", "language": "sql", "refs": [{"name": "stg_access_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_snowflake_monitoring.stg_access_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/query_direct_object_access.sql", "compiled": true, "compiled_code": "\n\nwith\n    access_history as (\n        select *\n        from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_access_history\n\n        \n            where\n                query_start_time > (\n                    select\n                        coalesce(\n                            dateadd('day', -1, max(query_start_time)), '1970-01-01'\n                        )\n                    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_direct_object_access\n                )\n        \n\n    ),\n\n    access_history_flattened as (\n        select\n            access_history.query_id,\n            access_history.query_start_time,\n            access_history.user_name,\n            objects_accessed.value:objectid::integer as table_id,  -- will be null for secured views or tables from a data share\n            objects_accessed.value:objectname::text as object_name,\n            objects_accessed.value:objectdomain::text as object_domain,\n            objects_accessed.value:columns as columns_array\n\n        from\n            access_history,\n            lateral flatten(access_history.direct_objects_accessed) as objects_accessed\n    ),\n\n    access_history_flattened_w_columns as (\n        select\n            access_history_flattened.query_id,\n            access_history_flattened.query_start_time,\n            access_history_flattened.user_name,\n            access_history_flattened.table_id,\n            access_history_flattened.object_name,\n            access_history_flattened.object_domain,\n            array_agg(distinct columns.value:columnname::text) as columns_accessed\n        from\n            access_history_flattened,\n            lateral flatten(access_history_flattened.columns_array) as columns\n        where access_history_flattened.object_name is not null\n        group by 1, 2, 3, 4, 5, 6\n    )\n\nselect\nmd5(concat(query_id, object_name)) as _unique_id,\n*\nfrom access_history_flattened_w_columns\nqualify -- added by affinaquest to ensure uniqueness\n    row_number() over (\n        partition by md5(concat(query_id, object_name)), query_start_time\n        order by query_start_time asc\n    )\n    = 1\norder by query_start_time asc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.query_base_table_access": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "query_base_table_access", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_base_table_access.sql", "original_file_path": "models/query_base_table_access.sql", "unique_id": "model.dbt_snowflake_monitoring.query_base_table_access", "fqn": ["dbt_snowflake_monitoring", "query_base_table_access"], "alias": "query_base_table_access", "checksum": {"name": "sha256", "checksum": "2f0ac4460e275ba3083fc9270f95227013c30ae539dc60107afbdd4ad5198a9c"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model tracks the base tables accessed by a query. It contains 1 row per query per table. It does not include tables from a data share. Access history is only available for Snowflake accounts on enterprise or higher, and therefore this model will be empty for standard accounts. See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html for more details. See https://select.dev/posts/snowflake-unused-tables#direct-versus-base-objects-accessed for more details on the difference between base versus direct tables accessed.", "columns": {"_unique_id": {"name": "_unique_id", "description": "Unique identifier for each row in the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "table_name": {"name": "table_name", "description": "Fully qualified table name, i.e. <database_name>.<schema_name>.<table_name>", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "table_id": {"name": "table_id", "description": "Unique identifier for the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "columns_accessed": {"name": "columns_accessed", "description": "Array of column_names accessed in the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/query_base_table_access.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.761235, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_base_table_access", "raw_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom {{ ref('query_base_object_access') }}\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "language": "sql", "refs": [{"name": "query_base_object_access", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.query_base_object_access"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/query_base_table_access.sql", "compiled": true, "compiled_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_base_object_access\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.daily_rates": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "daily_rates", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "daily_rates.sql", "original_file_path": "models/daily_rates.sql", "unique_id": "model.dbt_snowflake_monitoring.daily_rates", "fqn": ["dbt_snowflake_monitoring", "daily_rates"], "alias": "daily_rates", "checksum": {"name": "sha256", "checksum": "31a1d46f33e338cce785a7966bbfe6b643c44fdffdf80dc5ff695cac8d0c70eb"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A copy of snowflake.organization_usage.rate_sheet_daily for the current Snowflake account, with missing dates imputed. This model accounts for the fact that multiple rates will appear on a given day when the account is in overage. This happens for on-demand accounts, or fixed contract accounts who have exceeded their remaining balance. When the account is in overage, the usage_type will appear as 'compute' (instead of 'overage-compute'), but the effective_rate will be the one associated with `overage-compute`. You can identify these instances using `is_overage_rate` to help understand why a rate may have suddenly changed.\n", "columns": {"date": {"name": "date", "description": "Date (in the UTC time zone) for the effective price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_type": {"name": "service_type", "description": "The type of service, which can be one of compute or storage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_type": {"name": "usage_type", "description": "The type of usage, which can be one of compute, storage, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "effective_rate": {"name": "effective_rate", "description": "The rate after applying any applicable discounts per the contract for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "Currency of effect rate, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_overage_rate": {"name": "is_overage_rate", "description": "Indicator for whether the effective_rate is an overage rate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_latest_rate": {"name": "is_latest_rate", "description": "Indicator for whether the effective_rate is the most recent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/daily_rates.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.761465, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates", "raw_code": "{{ config(materialized='table') }}\n\n/*\nsnowflake.organization_usage.rate_sheet_daily isn't guaranteed to have 1 row per day per usage type.\n\nIf you don't consume any compute resources on a given day, there won't be a record.\n\nThis model guarantees 1 row per day per usage type, by filling in missing values with rates from the last\nknown day.\n*/\n\nwith\ndates_base as (\n    select date_day as date from (\n        {{ dbt_utils.date_spine(\n                datepart=\"day\",\n                start_date=\"'2018-01-01'\",\n                end_date=\"dateadd(day, 1, current_date)\"\n            )\n        }}\n    )\n),\n\nrate_sheet_daily_base as (\n    select\n        date,\n        usage_type,\n        currency,\n        effective_rate,\n        service_type\n    from {{ ref('stg_rate_sheet_daily') }}\n    where\n        account_locator = {{ account_locator() }}\n),\n\nstop_thresholds as (\n    select min(date) as start_date\n    from rate_sheet_daily_base\n\n    union all\n\n    select min(date) as start_date\n    from {{ ref('remaining_balance_daily_without_contract_view') }}\n),\n\ndate_range as (\n    select\n        max(start_date) as start_date,\n        current_date as end_date\n    from stop_thresholds\n),\n\nremaining_balance_daily as (\n    select\n        date,\n        free_usage_balance + capacity_balance + on_demand_consumption_balance + rollover_balance as remaining_balance,\n        remaining_balance < 0 as is_account_in_overage\n    from {{ ref('remaining_balance_daily_without_contract_view') }}\n),\n\nlatest_remaining_balance_daily as (\n    select\n        date,\n        remaining_balance,\n        is_account_in_overage\n    from remaining_balance_daily\n    qualify row_number() over (\norder by date desc) = 1\n),\n\nrate_sheet_daily as (\n    select rate_sheet_daily_base.*\n    from rate_sheet_daily_base\n    inner join date_range\n        on rate_sheet_daily_base.date between date_range.start_date and date_range.end_date\n),\n\nrates_date_range_w_usage_types as (\n    select\n        date_range.start_date,\n        date_range.end_date,\n        usage_types.usage_type\n    from date_range\n    cross join (select distinct rate_sheet_daily.usage_type from rate_sheet_daily) as usage_types\n),\n\nbase as (\n    select\n        db.date,\n        dr.usage_type\n    from dates_base as db\n    inner join rates_date_range_w_usage_types as dr\n        on db.date between dr.start_date and dr.end_date\n),\n\nrates_w_overage as (\n    select\n        base.date,\n        base.usage_type,\n        coalesce(\n            rate_sheet_daily.service_type,\n            lag(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type\norder by base.date),\n            lead(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type\norder by base.date)\n        ) as service_type,\n        coalesce(\n            rate_sheet_daily.effective_rate,\n            lag(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type\norder by base.date),\n            lead(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type\norder by base.date)\n        ) as effective_rate,\n        coalesce(\n            rate_sheet_daily.currency,\n            lag(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type\norder by base.date),\n            lead(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type\norder by base.date)\n        ) as currency,\n        base.usage_type like 'overage-%' as is_overage_rate,\n        replace(base.usage_type, 'overage-', '') as associated_usage_type,\n        coalesce(remaining_balance_daily.is_account_in_overage, latest_remaining_balance_daily.is_account_in_overage, false) as _is_account_in_overage,\n        case\n            when _is_account_in_overage and is_overage_rate then 1\n            when not _is_account_in_overage and not is_overage_rate then 1\n            else 0\n        end as rate_priority\n\n    from base\n    left join latest_remaining_balance_daily on latest_remaining_balance_daily.date is not null\n    left join remaining_balance_daily\n        on base.date = remaining_balance_daily.date\n    left join rate_sheet_daily\n        on base.date = rate_sheet_daily.date\n            and base.usage_type = rate_sheet_daily.usage_type\n),\n\nrates as (\n    select\n        date,\n        usage_type,\n        associated_usage_type,\n        service_type,\n        effective_rate,\n        currency,\n        is_overage_rate\n    from rates_w_overage\n    qualify row_number() over (partition by date, service_type, associated_usage_type\norder by rate_priority desc) = 1\n)\n\nselect\n    date,\n    associated_usage_type as usage_type,\n    service_type,\n    effective_rate,\n    currency,\n    is_overage_rate,\n    row_number() over (partition by service_type, associated_usage_type\norder by date desc) = 1 as is_latest_rate\nfrom rates\norder by date", "language": "sql", "refs": [{"name": "stg_rate_sheet_daily", "package": null, "version": null}, {"name": "remaining_balance_daily_without_contract_view", "package": null, "version": null}, {"name": "remaining_balance_daily_without_contract_view", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_snowflake_monitoring.account_locator"], "nodes": ["model.dbt_snowflake_monitoring.stg_rate_sheet_daily", "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/daily_rates.sql", "compiled": true, "compiled_code": "\n\n/*\nsnowflake.organization_usage.rate_sheet_daily isn't guaranteed to have 1 row per day per usage type.\n\nIf you don't consume any compute resources on a given day, there won't be a record.\n\nThis model guarantees 1 row per day per usage type, by filling in missing values with rates from the last\nknown day.\n*/\n\nwith\ndates_base as (\n    select date_day as date from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2636\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        '2018-01-01'\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(day, 1, current_date)\n\n)\n\nselect * from filtered\n\n\n    )\n),\n\nrate_sheet_daily_base as (\n    select\n        date,\n        usage_type,\n        currency,\n        effective_rate,\n        service_type\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_rate_sheet_daily\n    where\n        account_locator = current_account()\n),\n\nstop_thresholds as (\n    select min(date) as start_date\n    from rate_sheet_daily_base\n\n    union all\n\n    select min(date) as start_date\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.remaining_balance_daily_without_contract_view\n),\n\ndate_range as (\n    select\n        max(start_date) as start_date,\n        current_date as end_date\n    from stop_thresholds\n),\n\nremaining_balance_daily as (\n    select\n        date,\n        free_usage_balance + capacity_balance + on_demand_consumption_balance + rollover_balance as remaining_balance,\n        remaining_balance < 0 as is_account_in_overage\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.remaining_balance_daily_without_contract_view\n),\n\nlatest_remaining_balance_daily as (\n    select\n        date,\n        remaining_balance,\n        is_account_in_overage\n    from remaining_balance_daily\n    qualify row_number() over (\norder by date desc) = 1\n),\n\nrate_sheet_daily as (\n    select rate_sheet_daily_base.*\n    from rate_sheet_daily_base\n    inner join date_range\n        on rate_sheet_daily_base.date between date_range.start_date and date_range.end_date\n),\n\nrates_date_range_w_usage_types as (\n    select\n        date_range.start_date,\n        date_range.end_date,\n        usage_types.usage_type\n    from date_range\n    cross join (select distinct rate_sheet_daily.usage_type from rate_sheet_daily) as usage_types\n),\n\nbase as (\n    select\n        db.date,\n        dr.usage_type\n    from dates_base as db\n    inner join rates_date_range_w_usage_types as dr\n        on db.date between dr.start_date and dr.end_date\n),\n\nrates_w_overage as (\n    select\n        base.date,\n        base.usage_type,\n        coalesce(\n            rate_sheet_daily.service_type,\n            lag(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type\norder by base.date),\n            lead(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type\norder by base.date)\n        ) as service_type,\n        coalesce(\n            rate_sheet_daily.effective_rate,\n            lag(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type\norder by base.date),\n            lead(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type\norder by base.date)\n        ) as effective_rate,\n        coalesce(\n            rate_sheet_daily.currency,\n            lag(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type\norder by base.date),\n            lead(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type\norder by base.date)\n        ) as currency,\n        base.usage_type like 'overage-%' as is_overage_rate,\n        replace(base.usage_type, 'overage-', '') as associated_usage_type,\n        coalesce(remaining_balance_daily.is_account_in_overage, latest_remaining_balance_daily.is_account_in_overage, false) as _is_account_in_overage,\n        case\n            when _is_account_in_overage and is_overage_rate then 1\n            when not _is_account_in_overage and not is_overage_rate then 1\n            else 0\n        end as rate_priority\n\n    from base\n    left join latest_remaining_balance_daily on latest_remaining_balance_daily.date is not null\n    left join remaining_balance_daily\n        on base.date = remaining_balance_daily.date\n    left join rate_sheet_daily\n        on base.date = rate_sheet_daily.date\n            and base.usage_type = rate_sheet_daily.usage_type\n),\n\nrates as (\n    select\n        date,\n        usage_type,\n        associated_usage_type,\n        service_type,\n        effective_rate,\n        currency,\n        is_overage_rate\n    from rates_w_overage\n    qualify row_number() over (partition by date, service_type, associated_usage_type\norder by rate_priority desc) = 1\n)\n\nselect\n    date,\n    associated_usage_type as usage_type,\n    service_type,\n    effective_rate,\n    currency,\n    is_overage_rate,\n    row_number() over (partition by service_type, associated_usage_type\norder by date desc) = 1 as is_latest_rate\nfrom rates\norder by date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "remaining_balance_daily_without_contract_view", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "remaining_balance_daily_without_contract_view.sql", "original_file_path": "models/remaining_balance_daily_without_contract_view.sql", "unique_id": "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view", "fqn": ["dbt_snowflake_monitoring", "remaining_balance_daily_without_contract_view"], "alias": "remaining_balance_daily_without_contract_view", "checksum": {"name": "sha256", "checksum": "ab4f33140e2a90474de66916dd2554d67f4986e2257ef7fce2d30c948f5057b5"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.504912, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.remaining_balance_daily_without_contract_view", "raw_code": "select\n    date,\n    organization_name,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom {{ ref('stg_remaining_balance_daily') }}\n{#\n    From what I can tell, there will only ever be 1 organization_name in remaining_balance_daily.\n    During a contract switchover, there may be two records with the same date, but different contract_numbers.\n    Assume the higher contract_number is more recent. Chose not to group by date and aggregate balances in\n    case the currency changes..\n#}\nqualify row_number() over (partition by date\norder by contract_number desc nulls last) = 1", "language": "sql", "refs": [{"name": "stg_remaining_balance_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.stg_remaining_balance_daily"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/remaining_balance_daily_without_contract_view.sql", "compiled": true, "compiled_code": "select\n    date,\n    organization_name,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_remaining_balance_daily\n\nqualify row_number() over (partition by date\norder by contract_number desc nulls last) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.daily_spend": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "daily_spend", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "daily_spend.sql", "original_file_path": "models/daily_spend.sql", "unique_id": "model.dbt_snowflake_monitoring.daily_spend", "fqn": ["dbt_snowflake_monitoring", "daily_spend"], "alias": "daily_spend", "checksum": {"name": "sha256", "checksum": "c61d986f542623d576e25dd8b6aebed0f3a6096721727ac9f5956566071af578"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table of daily spend broken down by services as listed on the invoice, with additional granularity.", "columns": {"date": {"name": "date", "description": "Date of spend in UTC timezone to match with Snowflake's billing timezone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "service": {"name": "service", "description": "Top level spend category per Snowflake invoice. One of Storage, Compute, Cloud Services, Adj For Incl Cloud Services, Automatic Clustering, Materialized Views, Snowpipe, Query Acceleration, Replication, or Search Optimization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "storage_type": {"name": "storage_type", "description": "Subcategories where service = \"Storage\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_name": {"name": "warehouse_name", "description": "Subcategories where service = \"Compute\" or \"Cloud Services\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_name": {"name": "database_name", "description": "Subcategories where service = \"Serverless Tasks\" or service = \"Storage\" and storage_type = \"Table and Time Travel\" or \"Failsafe\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "spend": {"name": "spend", "description": "Spend in the currency described by the 'currency' column", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "spend_net_cloud_services": {"name": "spend_net_cloud_services", "description": "Spend with cloud service adjustments taken into account. The service 'Adj For Incl Cloud Services' has a value of 0 for this column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "Spend currency, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/daily_spend.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.757285, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_spend", "raw_code": "select\n    convert_timezone('UTC', hour)::date as date, -- get UTC date to align with Snowflake billing\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    sum(spend) as spend,\n    sum(spend_net_cloud_services) as spend_net_cloud_services,\n    any_value(currency) as currency\nfrom {{ ref('hourly_spend') }}\ngroup by 1, 2, 3, 4, 5", "language": "sql", "refs": [{"name": "hourly_spend", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.hourly_spend"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/daily_spend.sql", "compiled": true, "compiled_code": "select\n    convert_timezone('UTC', hour)::date as date, -- get UTC date to align with Snowflake billing\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    sum(spend) as spend,\n    sum(spend_net_cloud_services) as spend_net_cloud_services,\n    any_value(currency) as currency\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.hourly_spend\ngroup by 1, 2, 3, 4, 5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.hourly_spend": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "hourly_spend", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "hourly_spend.sql", "original_file_path": "models/hourly_spend.sql", "unique_id": "model.dbt_snowflake_monitoring.hourly_spend", "fqn": ["dbt_snowflake_monitoring", "hourly_spend"], "alias": "hourly_spend", "checksum": {"name": "sha256", "checksum": "8469347b9b18c1d4f89450dd3e5a12c78e62b591d38911fbac7269debad999ae"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table of hourly spend broken down by services as listed on the invoice, with additional granularity.", "columns": {"hour": {"name": "hour", "description": "Hour of spend.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "service": {"name": "service", "description": "Top level spend category per Snowflake invoice. One of Storage, Compute, Cloud Services, Adj For Incl Cloud Services, Automatic Clustering, Materialized Views, Snowpipe, Query Acceleration, Replication, or Search Optimization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "storage_type": {"name": "storage_type", "description": "Subcategories where service = \"Storage\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_name": {"name": "warehouse_name", "description": "Subcategories where service = \"Compute\" or \"Cloud Services\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_name": {"name": "database_name", "description": "Subcategories where service = \"Serverless Tasks\" or service = \"Storage\" and storage_type = \"Table and Time Travel\" or \"Failsafe\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "spend": {"name": "spend", "description": "Spend in the currency described by the 'currency' column", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "spend_net_cloud_services": {"name": "spend_net_cloud_services", "description": "Spend with cloud service adjustments taken into account. The service 'Adj For Incl Cloud Services' has a value of 0 for this column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "Spend currency, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/hourly_spend.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.757057, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.hourly_spend", "raw_code": "-- depends_on: {{ ref('stg_metering_history') }}\n{{ config(materialized='table') }}\n\nwith hour_spine as (\n    {% if execute %}\n{% set stg_metering_history_relation = load_relation(ref('stg_metering_history')) %}\n        {% if stg_metering_history_relation %}\n            {% set results = run_query(\"select coalesce(min(convert_timezone('UTC', start_time)), '2023-01-01 00:00:00') from \" ~ ref('stg_metering_history')) %}\n            {% set start_date = \"'\" ~ results.columns[0][0] ~ \"'\" %}\n            {% set results = run_query(\"select coalesce(dateadd(hour, 1, max(convert_timezone('UTC', start_time))), '2023-01-01 01:00:00') from \" ~ ref('stg_metering_history')) %}\n            {% set end_date = \"'\" ~ results.columns[0][0] ~ \"'\" %}\n        {% else %}\n            {% set start_date = \"'2023-01-01 00:00:00'\" %} {# this is just a dummy date for initial compilations before stg_metering_history exists #}\n            {% set end_date = \"'2023-01-01 01:00:00'\" %} {# this is just a dummy date for initial compilations before stg_metering_history exists #}\n        {% endif %}\n    {% endif %}\n{{ dbt_utils.date_spine(\n            datepart=\"hour\",\n            start_date=start_date,\n            end_date=end_date\n        )\n    }}\n),\n\nhours as (\n    select\n        date_hour as hour,\n        hour::date as date,\n        count(hour) over (partition by date) as hours_thus_far,\n        day(last_day(date)) as days_in_month\n    from hour_spine\n),\n\n-- GROUP BY to collapse possible overage and non-overage cost from the same service in the\n-- same day into a single row so this model does not emit multiple rows for the same service\n-- and hour\nusage_in_currency_daily as (\n    select\n        usage_date,\n        account_locator,\n        replace(usage_type, 'overage-', '') as usage_type,\n        currency,\n        sum(usage_in_currency) as usage_in_currency,\n    from {{ ref('stg_usage_in_currency_daily') }}\n    group by all\n),\n\nstorage_terabytes_daily as (\n    select\n        date,\n        'Table and Time Travel' as storage_type,\n        database_name,\n        sum(average_database_bytes) / power(1024, 4) as storage_terabytes\n    from {{ ref('stg_database_storage_usage_history') }}\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Failsafe' as storage_type,\n        database_name,\n        sum(average_failsafe_bytes) / power(1024, 4) as storage_terabytes\n    from {{ ref('stg_database_storage_usage_history') }}\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Stage' as storage_type,\n        null as database_name,\n        sum(average_stage_bytes) / power(1024, 4) as storage_terabytes\n    from {{ ref('stg_stage_storage_usage_history') }}\n    group by 1, 2, 3\n),\n\nstorage_spend_hourly as (\n    select\n        hours.hour,\n        'Storage' as service,\n        storage_terabytes_daily.storage_type,\n        null as warehouse_name,\n        storage_terabytes_daily.database_name,\n        coalesce(\n            sum(\n                div0(\n                    storage_terabytes_daily.storage_terabytes,\n                    hours.days_in_month * 24\n                ) * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join storage_terabytes_daily on hours.date = convert_timezone('UTC', storage_terabytes_daily.date)\n    left join {{ ref('daily_rates') }} as daily_rates\n        on storage_terabytes_daily.date = daily_rates.date\n            and daily_rates.service_type = 'STORAGE'\n            and daily_rates.usage_type = 'storage'\n    group by 1, 2, 3, 4, 5\n),\n\n-- Hybrid Table Storage has its own service type in `usage_in_currency_daily`,\n-- so we also handle it separately, and not with \"Storage\".\n_hybrid_table_terabytes_daily as (\n    select\n        date,\n        null as storage_type,\n        database_name,\n        sum(average_hybrid_table_storage_bytes) / power(1024, 4) as storage_terabytes\n    from {{ ref('stg_database_storage_usage_history') }}\n    group by 1, 2, 3\n),\n\nhybrid_table_storage_spend_hourly as (\n    select\n        hours.hour,\n        'Hybrid Table Storage' as service,\n        null as storage_type,\n        null as warehouse_name,\n        _hybrid_table_terabytes_daily.database_name,\n        coalesce(\n            sum(\n                div0(\n                    _hybrid_table_terabytes_daily.storage_terabytes,\n                    hours.days_in_month * 24\n                ) * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join _hybrid_table_terabytes_daily on hours.date = convert_timezone('UTC', _hybrid_table_terabytes_daily.date)\n    left join {{ ref('daily_rates') }} as daily_rates\n        on _hybrid_table_terabytes_daily.date = daily_rates.date\n            and daily_rates.service_type = 'HYBRID_TABLE_STORAGE'\n            and daily_rates.usage_type = 'hybrid table storage'\n    group by 1, 2, 3, 4, 5\n),\n\ndata_transfer_spend_hourly as (\n    -- Right now we don't have a way of getting this at an hourly grain\n    -- We can get source cloud + region, target cloud + region, and bytes transferred at an hourly grain from DATA_TRANSFER_HISTORY\n    -- But Snowflake doesn't provide data transfer rates programmatically, so we can't get the cost\n    -- We could make a LUT from https://www.snowflake.com/legal-files/CreditConsumptionTable.pdf but it would be a lot of work to maintain and would frequently become out of date\n    -- So for now we just use the daily reported usage and evenly distribute it across the day\n    select\n        hours.hour,\n        'Data Transfer' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = {{ account_locator() }}\n        and usage_in_currency_daily.usage_type = 'data transfer'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\nlogging_spend_hourly as (\n    -- More granular cost information is available in the EVENT_USAGE_HISTORY view.\n    -- https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-tracing-billing\n    -- For now we just use the daily reported usage and evenly distribute it across the day\n    select\n        hours.hour,\n        'Logging' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = {{ account_locator() }}\n        and usage_in_currency_daily.usage_type = 'logging'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\n-- For now we just use the daily reported usage and evenly distribute it across the day\n-- More detailed information can be found on READER_ACCOUNT_USAGE.*\n{% set reader_usage_types = [\n    'reader compute', 'reader storage', 'reader data transfer'\n] %}\n\n{%- for reader_usage_type in reader_usage_types %}\n\"{{ reader_usage_type }}_spend_hourly\" as (\n    select\n        hours.hour,\n        INITCAP('{{ reader_usage_type }}') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = {{ account_locator() }}\n        and usage_in_currency_daily.usage_type = '{{ reader_usage_type }}'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n{% endfor %}\n\nreader_adj_for_incl_cloud_services_hourly as (\n    select\n        hours.hour,\n        INITCAP('reader adj for incl cloud services') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        0 as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = {{ account_locator() }}\n        and usage_in_currency_daily.usage_type = 'reader adj for incl cloud services'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\nreader_cloud_services_hourly as (\n        select\n        hours.hour,\n        INITCAP('reader cloud services') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) + reader_adj_for_incl_cloud_services_hourly.spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = {{ account_locator() }}\n        and usage_in_currency_daily.usage_type = 'reader cloud services'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n    left join reader_adj_for_incl_cloud_services_hourly on\n        hours.hour = reader_adj_for_incl_cloud_services_hourly.hour\n),\n\ncompute_spend_hourly as (\n    select\n        hours.hour,\n        'Compute' as service,\n        null as storage_type,\n        stg_metering_history.name as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used_compute * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_history') }} as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n    left join {{ ref('daily_rates') }} as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'WAREHOUSE_METERING'\n            and daily_rates.usage_type = 'compute'\n    where\n        stg_metering_history.service_type = 'WAREHOUSE_METERING' and stg_metering_history.name != 'CLOUD_SERVICES_ONLY'\n    group by 1, 2, 3, 4\n),\n\nserverless_task_spend_hourly as (\n    select\n        hours.hour,\n        'Serverless Tasks' as service,\n        null as storage_type,\n        null as warehouse_name,\n        stg_serverless_task_history.database_name,\n        coalesce(\n            sum(\n                stg_serverless_task_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_serverless_task_history') }} as stg_serverless_task_history on\n        hours.hour = date_trunc('hour', stg_serverless_task_history.start_time)\n    left join {{ ref('daily_rates') }} as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'SERVERLESS_TASK'\n            and daily_rates.usage_type = 'serverless tasks'\n    group by 1, 2, 3, 4, 5\n),\n\nadj_for_incl_cloud_services_hourly as (\n    select\n        hours.hour,\n        'Adj For Incl Cloud Services' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_daily_history.credits_adjustment_cloud_services * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        0 as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_daily_history') }} as stg_metering_daily_history on\n        hours.hour = stg_metering_daily_history.date\n    left join {{ ref('daily_rates') }} as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'CLOUD_SERVICES'\n            and daily_rates.usage_type = 'cloud services'\n    group by 1, 2, 3, 4\n),\n\n_cloud_services_usage_hourly as (\n    select\n        hours.hour,\n        hours.date,\n        'Cloud Services' as service,\n        null as storage_type,\n        case\n            when\n                stg_metering_history.name = 'CLOUD_SERVICES_ONLY' then 'Cloud Services Only'\n            else stg_metering_history.name\n        end as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(stg_metering_history.credits_used_cloud_services), 0\n        ) as credits_used_cloud_services\n    from hours\n    left join {{ ref('stg_metering_history') }} as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'WAREHOUSE_METERING'\n    group by 1, 2, 3, 4, 5\n),\n\n_cloud_services_billed_daily as (\n    select\n        date,\n        sum(credits_used_cloud_services) as credits_used_cloud_services,\n        sum(\n            credits_used_cloud_services + credits_adjustment_cloud_services\n        ) as credits_used_cloud_services_billable\n    from {{ ref('stg_metering_daily_history') }}\n    where\n        service_type = 'WAREHOUSE_METERING'\n    group by 1\n),\n\ncloud_services_spend_hourly as (\n    select\n        _cloud_services_usage_hourly.hour,\n        _cloud_services_usage_hourly.service,\n        _cloud_services_usage_hourly.storage_type,\n        _cloud_services_usage_hourly.warehouse_name,\n        _cloud_services_usage_hourly.database_name,\n        _cloud_services_usage_hourly.credits_used_cloud_services * daily_rates.effective_rate as spend,\n\n        (\n            div0(\n                _cloud_services_usage_hourly.credits_used_cloud_services,\n                _cloud_services_billed_daily.credits_used_cloud_services\n            ) * _cloud_services_billed_daily.credits_used_cloud_services_billable\n        ) * daily_rates.effective_rate as spend_net_cloud_services,\n        daily_rates.currency\n    from _cloud_services_usage_hourly\n    inner join _cloud_services_billed_daily on\n        _cloud_services_usage_hourly.date = _cloud_services_billed_daily.date\n    left join {{ ref('daily_rates') }} as daily_rates\n        on _cloud_services_usage_hourly.date = daily_rates.date\n            and daily_rates.service_type = 'CLOUD_SERVICES'\n            and daily_rates.usage_type = 'cloud services'\n\n),\n\nother_costs as (\n    select\n        hours.hour,\n\n        /* Sometimes Snowflake is inconsistent and the service names in metering_history\n           do not match the service names in our daily_rates (coming from rate_sheet_daily),\n           so we rename them to make it match  */\n        case stg_metering_history.service_type\n            when 'AUTO_CLUSTERING' then 'AUTOMATIC_CLUSTERING'\n            when 'PIPE' then 'SNOWPIPE'\n            else stg_metering_history.service_type\n        end as _service_renamed,\n\n        /* Convert it to a more human-readable format\n           AUTOMATIC_CLUSTERING -> Automatic Clustering\n        */\n        case _service_renamed\n            when 'MATERIALIZED_VIEW' then 'Materialized Views'\n            when 'AI_SERVICES' then 'AI Services'\n            else initcap(replace(_service_renamed, '_', ' '))\n        end as service,\n\n        /* Extract useful information from the row depending on the service type */\n        null as storage_type,\n        case\n            when stg_metering_history.service_type = 'QUERY_ACCELERATION'\n                then stg_metering_history.name\n            else null\n        end as warehouse_name,\n        null as database_name,\n\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n\n    from hours\n\n    left join {{ ref('stg_metering_history') }} as stg_metering_history\n        on hours.hour = convert_timezone('UTC', stg_metering_history.start_time)\n\n    left join {{ ref('daily_rates') }} as daily_rates\n        on hour::date = daily_rates.date\n            and _service_renamed = daily_rates.service_type\n            /* daily_rates can have multiple rows for the same service_type,\n               with different values in usage_type (eg: usage_type = \"automatic clustering\" or\n               \"adjustment-automatic clustering\"). We want to join only with the row where\n               usage_type is the same as the service_type */\n            and lower(service) = daily_rates.usage_type\n\n    -- Covered by their own CTEs due to more complex logic or better sources\n    where stg_metering_history.service_type not in (\n        'SERVERLESS_TASK', 'WAREHOUSE_METERING', 'WAREHOUSE_METERING_READER'\n    )\n\n    group by 1, 2, 3, 4, 5\n),\n\nunioned as (\n    select * from storage_spend_hourly\n    union all\n    select * from hybrid_table_storage_spend_hourly\n    union all\n    select * from data_transfer_spend_hourly\n    union all\n    select * from logging_spend_hourly\n    union all\n    {%- for reader_usage_type in reader_usage_types %}\n    select * from \"{{ reader_usage_type }}_spend_hourly\"\n    union all\n    {%- endfor %}\n    select * from reader_adj_for_incl_cloud_services_hourly\n    union all\n    select * from reader_cloud_services_hourly\n    union all\n    select * from compute_spend_hourly\n    union all\n    select * from adj_for_incl_cloud_services_hourly\n    union all\n    select * from cloud_services_spend_hourly\n    union all\n    select * from serverless_task_spend_hourly\n    union all\n    select * exclude (_service_renamed) from other_costs\n)\n\nselect\n    convert_timezone('UTC', hour)::timestamp_ltz as hour,\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    spend,\n    spend_net_cloud_services,\n    currency\nfrom unioned", "language": "sql", "refs": [{"name": "stg_metering_history", "package": null, "version": null}, {"name": "stg_usage_in_currency_daily", "package": null, "version": null}, {"name": "stg_database_storage_usage_history", "package": null, "version": null}, {"name": "stg_database_storage_usage_history", "package": null, "version": null}, {"name": "stg_stage_storage_usage_history", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}, {"name": "stg_database_storage_usage_history", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}, {"name": "stg_metering_history", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}, {"name": "stg_serverless_task_history", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}, {"name": "stg_metering_daily_history", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}, {"name": "stg_metering_history", "package": null, "version": null}, {"name": "stg_metering_daily_history", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}, {"name": "stg_metering_history", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_snowflake_monitoring.account_locator", "macro.dbt.load_relation", "macro.dbt.run_query"], "nodes": ["model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily", "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_serverless_task_history", "model.dbt_snowflake_monitoring.stg_metering_daily_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/hourly_spend.sql", "compiled": true, "compiled_code": "-- depends_on: fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history\n\n\nwith hour_spine as (\n    \n\n        \n            \n            \n            \n            \n        \n    \n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3532\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        hour,\n        row_number() over (order by 1) - 1,\n        '2024-10-24 08:00:00+00:00'\n        )\n\n\n    ) as date_hour\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_hour <= '2025-03-20 12:00:00+00:00'\n\n)\n\nselect * from filtered\n\n\n),\n\nhours as (\n    select\n        date_hour as hour,\n        hour::date as date,\n        count(hour) over (partition by date) as hours_thus_far,\n        day(last_day(date)) as days_in_month\n    from hour_spine\n),\n\n-- GROUP BY to collapse possible overage and non-overage cost from the same service in the\n-- same day into a single row so this model does not emit multiple rows for the same service\n-- and hour\nusage_in_currency_daily as (\n    select\n        usage_date,\n        account_locator,\n        replace(usage_type, 'overage-', '') as usage_type,\n        currency,\n        sum(usage_in_currency) as usage_in_currency,\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_usage_in_currency_daily\n    group by all\n),\n\nstorage_terabytes_daily as (\n    select\n        date,\n        'Table and Time Travel' as storage_type,\n        database_name,\n        sum(average_database_bytes) / power(1024, 4) as storage_terabytes\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_database_storage_usage_history\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Failsafe' as storage_type,\n        database_name,\n        sum(average_failsafe_bytes) / power(1024, 4) as storage_terabytes\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_database_storage_usage_history\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Stage' as storage_type,\n        null as database_name,\n        sum(average_stage_bytes) / power(1024, 4) as storage_terabytes\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_stage_storage_usage_history\n    group by 1, 2, 3\n),\n\nstorage_spend_hourly as (\n    select\n        hours.hour,\n        'Storage' as service,\n        storage_terabytes_daily.storage_type,\n        null as warehouse_name,\n        storage_terabytes_daily.database_name,\n        coalesce(\n            sum(\n                div0(\n                    storage_terabytes_daily.storage_terabytes,\n                    hours.days_in_month * 24\n                ) * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join storage_terabytes_daily on hours.date = convert_timezone('UTC', storage_terabytes_daily.date)\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on storage_terabytes_daily.date = daily_rates.date\n            and daily_rates.service_type = 'STORAGE'\n            and daily_rates.usage_type = 'storage'\n    group by 1, 2, 3, 4, 5\n),\n\n-- Hybrid Table Storage has its own service type in `usage_in_currency_daily`,\n-- so we also handle it separately, and not with \"Storage\".\n_hybrid_table_terabytes_daily as (\n    select\n        date,\n        null as storage_type,\n        database_name,\n        sum(average_hybrid_table_storage_bytes) / power(1024, 4) as storage_terabytes\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_database_storage_usage_history\n    group by 1, 2, 3\n),\n\nhybrid_table_storage_spend_hourly as (\n    select\n        hours.hour,\n        'Hybrid Table Storage' as service,\n        null as storage_type,\n        null as warehouse_name,\n        _hybrid_table_terabytes_daily.database_name,\n        coalesce(\n            sum(\n                div0(\n                    _hybrid_table_terabytes_daily.storage_terabytes,\n                    hours.days_in_month * 24\n                ) * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join _hybrid_table_terabytes_daily on hours.date = convert_timezone('UTC', _hybrid_table_terabytes_daily.date)\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on _hybrid_table_terabytes_daily.date = daily_rates.date\n            and daily_rates.service_type = 'HYBRID_TABLE_STORAGE'\n            and daily_rates.usage_type = 'hybrid table storage'\n    group by 1, 2, 3, 4, 5\n),\n\ndata_transfer_spend_hourly as (\n    -- Right now we don't have a way of getting this at an hourly grain\n    -- We can get source cloud + region, target cloud + region, and bytes transferred at an hourly grain from DATA_TRANSFER_HISTORY\n    -- But Snowflake doesn't provide data transfer rates programmatically, so we can't get the cost\n    -- We could make a LUT from https://www.snowflake.com/legal-files/CreditConsumptionTable.pdf but it would be a lot of work to maintain and would frequently become out of date\n    -- So for now we just use the daily reported usage and evenly distribute it across the day\n    select\n        hours.hour,\n        'Data Transfer' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'data transfer'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\nlogging_spend_hourly as (\n    -- More granular cost information is available in the EVENT_USAGE_HISTORY view.\n    -- https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-tracing-billing\n    -- For now we just use the daily reported usage and evenly distribute it across the day\n    select\n        hours.hour,\n        'Logging' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'logging'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\n-- For now we just use the daily reported usage and evenly distribute it across the day\n-- More detailed information can be found on READER_ACCOUNT_USAGE.*\n\n\"reader compute_spend_hourly\" as (\n    select\n        hours.hour,\n        INITCAP('reader compute') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader compute'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\n\"reader storage_spend_hourly\" as (\n    select\n        hours.hour,\n        INITCAP('reader storage') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader storage'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\n\"reader data transfer_spend_hourly\" as (\n    select\n        hours.hour,\n        INITCAP('reader data transfer') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader data transfer'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\n\nreader_adj_for_incl_cloud_services_hourly as (\n    select\n        hours.hour,\n        INITCAP('reader adj for incl cloud services') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        0 as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader adj for incl cloud services'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\nreader_cloud_services_hourly as (\n        select\n        hours.hour,\n        INITCAP('reader cloud services') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) + reader_adj_for_incl_cloud_services_hourly.spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader cloud services'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n    left join reader_adj_for_incl_cloud_services_hourly on\n        hours.hour = reader_adj_for_incl_cloud_services_hourly.hour\n),\n\ncompute_spend_hourly as (\n    select\n        hours.hour,\n        'Compute' as service,\n        null as storage_type,\n        stg_metering_history.name as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used_compute * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'WAREHOUSE_METERING'\n            and daily_rates.usage_type = 'compute'\n    where\n        stg_metering_history.service_type = 'WAREHOUSE_METERING' and stg_metering_history.name != 'CLOUD_SERVICES_ONLY'\n    group by 1, 2, 3, 4\n),\n\nserverless_task_spend_hourly as (\n    select\n        hours.hour,\n        'Serverless Tasks' as service,\n        null as storage_type,\n        null as warehouse_name,\n        stg_serverless_task_history.database_name,\n        coalesce(\n            sum(\n                stg_serverless_task_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_serverless_task_history as stg_serverless_task_history on\n        hours.hour = date_trunc('hour', stg_serverless_task_history.start_time)\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'SERVERLESS_TASK'\n            and daily_rates.usage_type = 'serverless tasks'\n    group by 1, 2, 3, 4, 5\n),\n\nadj_for_incl_cloud_services_hourly as (\n    select\n        hours.hour,\n        'Adj For Incl Cloud Services' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_daily_history.credits_adjustment_cloud_services * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        0 as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_daily_history as stg_metering_daily_history on\n        hours.hour = stg_metering_daily_history.date\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'CLOUD_SERVICES'\n            and daily_rates.usage_type = 'cloud services'\n    group by 1, 2, 3, 4\n),\n\n_cloud_services_usage_hourly as (\n    select\n        hours.hour,\n        hours.date,\n        'Cloud Services' as service,\n        null as storage_type,\n        case\n            when\n                stg_metering_history.name = 'CLOUD_SERVICES_ONLY' then 'Cloud Services Only'\n            else stg_metering_history.name\n        end as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(stg_metering_history.credits_used_cloud_services), 0\n        ) as credits_used_cloud_services\n    from hours\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'WAREHOUSE_METERING'\n    group by 1, 2, 3, 4, 5\n),\n\n_cloud_services_billed_daily as (\n    select\n        date,\n        sum(credits_used_cloud_services) as credits_used_cloud_services,\n        sum(\n            credits_used_cloud_services + credits_adjustment_cloud_services\n        ) as credits_used_cloud_services_billable\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_daily_history\n    where\n        service_type = 'WAREHOUSE_METERING'\n    group by 1\n),\n\ncloud_services_spend_hourly as (\n    select\n        _cloud_services_usage_hourly.hour,\n        _cloud_services_usage_hourly.service,\n        _cloud_services_usage_hourly.storage_type,\n        _cloud_services_usage_hourly.warehouse_name,\n        _cloud_services_usage_hourly.database_name,\n        _cloud_services_usage_hourly.credits_used_cloud_services * daily_rates.effective_rate as spend,\n\n        (\n            div0(\n                _cloud_services_usage_hourly.credits_used_cloud_services,\n                _cloud_services_billed_daily.credits_used_cloud_services\n            ) * _cloud_services_billed_daily.credits_used_cloud_services_billable\n        ) * daily_rates.effective_rate as spend_net_cloud_services,\n        daily_rates.currency\n    from _cloud_services_usage_hourly\n    inner join _cloud_services_billed_daily on\n        _cloud_services_usage_hourly.date = _cloud_services_billed_daily.date\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on _cloud_services_usage_hourly.date = daily_rates.date\n            and daily_rates.service_type = 'CLOUD_SERVICES'\n            and daily_rates.usage_type = 'cloud services'\n\n),\n\nother_costs as (\n    select\n        hours.hour,\n\n        /* Sometimes Snowflake is inconsistent and the service names in metering_history\n           do not match the service names in our daily_rates (coming from rate_sheet_daily),\n           so we rename them to make it match  */\n        case stg_metering_history.service_type\n            when 'AUTO_CLUSTERING' then 'AUTOMATIC_CLUSTERING'\n            when 'PIPE' then 'SNOWPIPE'\n            else stg_metering_history.service_type\n        end as _service_renamed,\n\n        /* Convert it to a more human-readable format\n           AUTOMATIC_CLUSTERING -> Automatic Clustering\n        */\n        case _service_renamed\n            when 'MATERIALIZED_VIEW' then 'Materialized Views'\n            when 'AI_SERVICES' then 'AI Services'\n            else initcap(replace(_service_renamed, '_', ' '))\n        end as service,\n\n        /* Extract useful information from the row depending on the service type */\n        null as storage_type,\n        case\n            when stg_metering_history.service_type = 'QUERY_ACCELERATION'\n                then stg_metering_history.name\n            else null\n        end as warehouse_name,\n        null as database_name,\n\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n\n    from hours\n\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history as stg_metering_history\n        on hours.hour = convert_timezone('UTC', stg_metering_history.start_time)\n\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on hour::date = daily_rates.date\n            and _service_renamed = daily_rates.service_type\n            /* daily_rates can have multiple rows for the same service_type,\n               with different values in usage_type (eg: usage_type = \"automatic clustering\" or\n               \"adjustment-automatic clustering\"). We want to join only with the row where\n               usage_type is the same as the service_type */\n            and lower(service) = daily_rates.usage_type\n\n    -- Covered by their own CTEs due to more complex logic or better sources\n    where stg_metering_history.service_type not in (\n        'SERVERLESS_TASK', 'WAREHOUSE_METERING', 'WAREHOUSE_METERING_READER'\n    )\n\n    group by 1, 2, 3, 4, 5\n),\n\nunioned as (\n    select * from storage_spend_hourly\n    union all\n    select * from hybrid_table_storage_spend_hourly\n    union all\n    select * from data_transfer_spend_hourly\n    union all\n    select * from logging_spend_hourly\n    union all\n    select * from \"reader compute_spend_hourly\"\n    union all\n    select * from \"reader storage_spend_hourly\"\n    union all\n    select * from \"reader data transfer_spend_hourly\"\n    union all\n    select * from reader_adj_for_incl_cloud_services_hourly\n    union all\n    select * from reader_cloud_services_hourly\n    union all\n    select * from compute_spend_hourly\n    union all\n    select * from adj_for_incl_cloud_services_hourly\n    union all\n    select * from cloud_services_spend_hourly\n    union all\n    select * from serverless_task_spend_hourly\n    union all\n    select * exclude (_service_renamed) from other_costs\n)\n\nselect\n    convert_timezone('UTC', hour)::timestamp_ltz as hour,\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    spend,\n    spend_net_cloud_services,\n    currency\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.query_history_enriched": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "query_history_enriched", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_history_enriched.sql", "original_file_path": "models/query_history_enriched.sql", "unique_id": "model.dbt_snowflake_monitoring.query_history_enriched", "fqn": ["dbt_snowflake_monitoring", "query_history_enriched"], "alias": "query_history_enriched", "checksum": {"name": "sha256", "checksum": "f8f64fd64f62d105f40527904e81affb28663239757b551a85a00c2220d98959"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [{"sql": "{{ create_merge_objects_udf(this) }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["query_id", "start_time"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "An enriched version of the query_history model. Contains 1 row per query (query_id).", "columns": {"query_id": {"name": "query_id", "description": "Primary key. Internal/system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_text": {"name": "query_text", "description": "Text of the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_id": {"name": "database_id", "description": "Internal/system-generated identifier for the database that was in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_name": {"name": "database_name", "description": "Database that was in use at the time of the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "schema_id": {"name": "schema_id", "description": "Internal/system-generated identifier for the schema that was in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "schema_name": {"name": "schema_name", "description": "Schema that was in use at the time of the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_type": {"name": "query_type", "description": "DML, query, etc. If the query failed, then the query type may be UNKNOWN.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "session_id": {"name": "session_id", "description": "Session that executed the statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_name": {"name": "user_name", "description": "User who issued the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "role_name": {"name": "role_name", "description": "Role that was active in the session at the time of the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_id": {"name": "warehouse_id", "description": "Internal/system-generated identifier for the warehouse that was used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_name": {"name": "warehouse_name", "description": "Warehouse that the query executed on, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_size": {"name": "warehouse_size", "description": "Size of the warehouse when this statement executed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_type": {"name": "warehouse_type", "description": "Type of the warehouse when this statement executed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cluster_number": {"name": "cluster_number", "description": "The cluster (in a multi-cluster warehouse) that this statement executed on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_tag": {"name": "query_tag", "description": "Query tag set for this statement through the QUERY_TAG session parameter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_status": {"name": "execution_status", "description": "Execution status for the query. Valid values: `success`, `fail`, `incident`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_code": {"name": "error_code", "description": "Error code, if the query returned an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_message": {"name": "error_message", "description": "Error message, if the query returned an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_time": {"name": "start_time", "description": "Statement start time (in the UTC time zone). The table is naturally clustered on this column, meaning your queries will run much faster if you filter records using this column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_time": {"name": "end_time", "description": "Statement end time (in the UTC time zone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_scanned": {"name": "bytes_scanned", "description": "Number of bytes scanned by this statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "percentage_scanned_from_cache": {"name": "percentage_scanned_from_cache", "description": "The percentage of data scanned from the local disk cache. The value ranges from 0.0 to 1.0. Multiply by 100 to get a true percentage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_written": {"name": "bytes_written", "description": "Number of bytes written (e.g. when loading into a table).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_written_to_result": {"name": "bytes_written_to_result", "description": "Number of bytes written to a result object. For example, `select * from . . .` would produce a set of results in tabular format representing each field in the selection. In general, the results object represents whatever is produced as a result of the query, and BYTES_WRITTEN_TO_RESULT represents the size of the returned result.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_read_from_result": {"name": "bytes_read_from_result", "description": "Number of bytes read from a result object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_produced": {"name": "rows_produced", "description": "Number of rows produced by this statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_inserted": {"name": "rows_inserted", "description": "Number of rows inserted by the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_updated": {"name": "rows_updated", "description": "Number of rows updated by the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_deleted": {"name": "rows_deleted", "description": "Number of rows deleted by the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_unloaded": {"name": "rows_unloaded", "description": "Number of rows unloaded during data export.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_deleted": {"name": "bytes_deleted", "description": "Number of bytes deleted by the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "partitions_scanned": {"name": "partitions_scanned", "description": "Number of micro-partitions scanned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "partitions_total": {"name": "partitions_total", "description": "Total micro-partitions of all tables included in this query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_spilled_to_local_storage": {"name": "bytes_spilled_to_local_storage", "description": "Volume of data spilled to local disk on the warehouse nodes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_spilled_to_remote_storage": {"name": "bytes_spilled_to_remote_storage", "description": "Volume of data spilled to remote disk (i.e. AWS S3, Google Cloud Storage, Azure Blob).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_sent_over_the_network": {"name": "bytes_sent_over_the_network", "description": "Volume of data sent over the network.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "outbound_data_transfer_cloud": {"name": "outbound_data_transfer_cloud", "description": "Target cloud provider for statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "outbound_data_transfer_region": {"name": "outbound_data_transfer_region", "description": "Target region for statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "outbound_data_transfer_bytes": {"name": "outbound_data_transfer_bytes", "description": "Number of bytes transferred in statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_data_transfer_cloud": {"name": "inbound_data_transfer_cloud", "description": "Source cloud provider for statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_data_transfer_region": {"name": "inbound_data_transfer_region", "description": "Source region for statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_data_transfer_bytes": {"name": "inbound_data_transfer_bytes", "description": "Number of bytes transferred in statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "Number of credits used for cloud services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_version": {"name": "release_version", "description": "Release version in the format of `<major_release>.<minor_release>.<patch_release>`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_invocations": {"name": "external_function_total_invocations", "description": "The aggregate number of times that this query called remote services. For important details, see the Usage Notes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_sent_rows": {"name": "external_function_total_sent_rows", "description": "The total number of rows that this query sent in all calls to all remote services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_received_rows": {"name": "external_function_total_received_rows", "description": "The total number of rows that this query received from all calls to all remote services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_sent_bytes": {"name": "external_function_total_sent_bytes", "description": "The total number of bytes that this query sent in all calls to all remote services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_received_bytes": {"name": "external_function_total_received_bytes", "description": "The total number of bytes that this query received from all calls to all remote services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_load_percent": {"name": "query_load_percent", "description": "The approximate percentage of active compute resources in the warehouse for this query execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_client_generated_statement": {"name": "is_client_generated_statement", "description": "Indicates whether the query was client-generated. These tend to be queries from the Snowflake UI (i.e. Snowsight or the Classic Console).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_acceleration_bytes_scanned": {"name": "query_acceleration_bytes_scanned", "description": "Number of bytes scanned by the query acceleration service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_acceleration_partitions_scanned": {"name": "query_acceleration_partitions_scanned", "description": "Number of partitions scanned by the query acceleration service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_acceleration_upper_limit_scale_factor": {"name": "query_acceleration_upper_limit_scale_factor", "description": "Upper limit scale factor that a query would have benefited from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_hash": {"name": "query_hash", "description": "The hash value computed based on the canonicalized SQL text.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_hash_version": {"name": "query_hash_version", "description": "The version of the logic used to compute QUERY_HASH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_parameterized_hash": {"name": "query_parameterized_hash", "description": "The hash value computed based on the parameterized query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_parameterized_hash_version": {"name": "query_parameterized_hash_version", "description": "The version of the logic used to compute QUERY_PARAMETERIZED_HASH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_elapsed_time_ms": {"name": "total_elapsed_time_ms", "description": "Elapsed time (in milliseconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "compilation_time_ms": {"name": "compilation_time_ms", "description": "Compilation time (in milliseconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_time_ms": {"name": "execution_time_ms", "description": "Execution time (in milliseconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "queued_provisioning_time_ms": {"name": "queued_provisioning_time_ms", "description": "Time (in milliseconds) spent in the warehouse queue, waiting for the warehouse compute resources to provision, due to warehouse creation, resume, or resize.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "queued_repair_time_ms": {"name": "queued_repair_time_ms", "description": "Time (in milliseconds) spent in the warehouse queue, waiting for compute resources in the warehouse to be repaired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "queued_overload_time_ms": {"name": "queued_overload_time_ms", "description": "Time (in milliseconds) spent in the warehouse queue, due to the warehouse being overloaded by the current query workload.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_blocked_time_ms": {"name": "transaction_blocked_time_ms", "description": "Time (in milliseconds) spent blocked by a concurrent DML.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "list_external_files_time_ms": {"name": "list_external_files_time_ms", "description": "Time (in milliseconds) spent listing external files.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_elapsed_time_s": {"name": "total_elapsed_time_s", "description": "Elapsed time (in seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "compilation_time_s": {"name": "compilation_time_s", "description": "Compilation time (in seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_time_s": {"name": "execution_time_s", "description": "Execution time (in seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "queued_provisioning_time_s": {"name": "queued_provisioning_time_s", "description": "Time (in seconds) spent in the warehouse queue, waiting for the warehouse compute resources to provision, due to warehouse creation, resume, or resize.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "queued_repair_time_s": {"name": "queued_repair_time_s", "description": "Time (in seconds) spent in the warehouse queue, waiting for compute resources in the warehouse to be repaired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "queued_overload_time_s": {"name": "queued_overload_time_s", "description": "Time (in seconds) spent in the warehouse queue, due to the warehouse being overloaded by the current query workload.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_blocked_time_s": {"name": "transaction_blocked_time_s", "description": "Time (in seconds) spent blocked by a concurrent DML.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "list_external_files_time_s": {"name": "list_external_files_time_s", "description": "Time (in seconds) spent listing external files.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_start_time": {"name": "execution_start_time", "description": "When the query began executing on the warehouse (in the UTC time zone). This will always be after the start_time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_cost": {"name": "compute_cost", "description": "Compute costs associated with the query, in the primary currency of your account. Can be 0 if the query did not run on a warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_credits": {"name": "compute_credits", "description": "Compute credits associated with the query. Can be 0 if the query did not run on a warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_services_cost": {"name": "cloud_services_cost", "description": "Cloud service costs associated with the query, in the primary currency of your account. Can be 0 if total cloud services credits consumption was less than 10% of total compute credits consumption on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_services_credits": {"name": "cloud_services_credits", "description": "Cloud service credits associated with the query. Can be 0 if total cloud services credits consumption was less than 10% of total compute credits consumption on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_cost": {"name": "query_cost", "description": "Total cost associated with the query, calculated as sum of compute_cost and cloud_services_cost, in the primary currency of your account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_credits": {"name": "query_credits", "description": "Total credits associated with the query, calculated as sum of compute_credits and cloud_services_credits.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "Spend currency, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ran_on_warehouse": {"name": "ran_on_warehouse", "description": "True if the query executed in a virtual warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "data_scanned_gb": {"name": "data_scanned_gb", "description": "Number of gb scanned by this statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "data_spilled_to_local_storage_gb": {"name": "data_spilled_to_local_storage_gb", "description": "Volume of data (in GB) spilled to local disk on the warehouse nodes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "data_spilled_to_remote_storage_gb": {"name": "data_spilled_to_remote_storage_gb", "description": "Volume of data (in GB) spilled to remote disk (i.e. AWS S3, Google Cloud Storage, Azure Blob).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "data_sent_over_the_network_gb": {"name": "data_sent_over_the_network_gb", "description": "Volume of data (in GB) sent over the network.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "data_scanned_from_cache_gb": {"name": "data_scanned_from_cache_gb", "description": "Volume of data (in GB) scanned from the local disk cache.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_text_no_comments": {"name": "query_text_no_comments", "description": "Contains the original query text stripped of any comments.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_metadata": {"name": "dbt_metadata", "description": "Metadata from the JSON string added to the query by dbt. Null if no metadata was added.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_retry_time_ms": {"name": "query_retry_time_ms", "description": "Total execution time (in milliseconds) for query retries caused by actionable errors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_retry_time_s": {"name": "query_retry_time_s", "description": "Total execution time (in seconds) for query retries caused by actionable errors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_retry_cause": {"name": "query_retry_cause", "description": "Error that caused the query to retry. If there is no query retry, the field is NULL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fault_handling_time_ms": {"name": "fault_handling_time_ms", "description": "Total execution time (in milliseconds) for query retries caused by errors that are not actionable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fault_handling_time_s": {"name": "fault_handling_time_s", "description": "Total execution time (in seconds) for query retries caused by errors that are not actionable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/query_history_enriched.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["query_id", "start_time"], "pre-hook": ["{{ create_merge_objects_udf(this) }}"], "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.7567139, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_history_enriched", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['query_id', 'start_time'],\n    pre_hook=[\"{{ create_merge_objects_udf(this) }}\"]\n) }}\n\nwith\nquery_history as (\n    select\n        *,\n\n        -- this removes comments enclosed by /* <comment text> */ and single line comments starting with -- and either ending with a new line or end of string\n        regexp_replace(query_text, $$(\\/\\*(.|\\n|\\r)*?\\*\\/)|(--.*$)|(--.*(\\n|\\r))|;$$, '') as query_text_no_comments,\n\n        try_parse_json(regexp_substr(query_text, $$\\/\\*\\s*({(.|\\n|\\r)*\"app\":\\s\"dbt\"(.|\\n|\\r)*})\\s*\\*\\/$$, 1, 1, 'ie')) as _dbt_json_comment_meta,\n        case\n            when try_parse_json(query_tag)['dbt_snowflake_query_tags_version'] is not null then try_parse_json(query_tag)\n        end as _dbt_json_query_tag_meta,\n        case\n            when _dbt_json_comment_meta is not null or _dbt_json_query_tag_meta is not null then\n                {{ adapter.quote_as_configured(this.database, 'database') }}.{{ adapter.quote_as_configured(this.schema, 'schema') }}.merge_objects(coalesce(_dbt_json_comment_meta, { }), coalesce(_dbt_json_query_tag_meta, { }))\n        end as dbt_metadata\n\n    from {{ ref('stg_query_history') }}\n\n    {% if is_incremental() %}\n        -- Conservatively re-process the last 3 days to account for late arriving rates data. Allow an override from project variable\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -{{ var('dbt_snowflake_monitoring_incremental_days', '3') }}, max(end_time)) from {{ this }})\n    {% endif %}\n),\n\ncost_per_query as (\n    select *\n    from {{ ref('cost_per_query') }}\n    {% if is_incremental() %}\n        -- Conservatively re-process the last 3 days to account for late arriving rates data. Allow an override from project variable\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -{{ var('dbt_snowflake_monitoring_incremental_days', '3') }}, max(end_time)) from {{ this }})\n    {% endif %}\n)\n\nselect\n    cost_per_query.query_id,\n    cost_per_query.compute_cost,\n    cost_per_query.compute_credits,\n    cost_per_query.query_acceleration_cost,\n    cost_per_query.query_acceleration_credits,\n    cost_per_query.cloud_services_cost,\n    cost_per_query.cloud_services_credits,\n    cost_per_query.query_cost,\n    cost_per_query.query_credits,\n    cost_per_query.execution_start_time,\n\n    -- Grab all columns from query_history (except the query time columns which we rename below)\n    query_history.query_text,\n    query_history.database_id,\n    query_history.database_name,\n    query_history.schema_id,\n    query_history.schema_name,\n    query_history.query_type,\n    query_history.session_id,\n    query_history.user_name,\n    query_history.role_name,\n    query_history.warehouse_id,\n    query_history.warehouse_name,\n    query_history.warehouse_size,\n    query_history.warehouse_type,\n    query_history.cluster_number,\n    query_history.query_tag,\n    query_history.execution_status,\n    query_history.error_code,\n    query_history.error_message,\n    query_history.start_time,\n    query_history.end_time,\n    query_history.total_elapsed_time,\n    query_history.bytes_scanned,\n    query_history.percentage_scanned_from_cache,\n    query_history.bytes_written,\n    query_history.bytes_written_to_result,\n    query_history.bytes_read_from_result,\n    query_history.rows_produced,\n    query_history.rows_inserted,\n    query_history.rows_updated,\n    query_history.rows_deleted,\n    query_history.rows_unloaded,\n    query_history.bytes_deleted,\n    query_history.partitions_scanned,\n    query_history.partitions_total,\n    query_history.bytes_spilled_to_local_storage,\n    query_history.bytes_spilled_to_remote_storage,\n    query_history.bytes_sent_over_the_network,\n    query_history.outbound_data_transfer_cloud,\n    query_history.outbound_data_transfer_region,\n    query_history.outbound_data_transfer_bytes,\n    query_history.inbound_data_transfer_cloud,\n    query_history.inbound_data_transfer_region,\n    query_history.inbound_data_transfer_bytes,\n    query_history.credits_used_cloud_services,\n    query_history.release_version,\n    query_history.external_function_total_invocations,\n    query_history.external_function_total_sent_rows,\n    query_history.external_function_total_received_rows,\n    query_history.external_function_total_sent_bytes,\n    query_history.external_function_total_received_bytes,\n    query_history.query_load_percent,\n    query_history.is_client_generated_statement,\n    query_history.query_acceleration_bytes_scanned,\n    query_history.query_acceleration_partitions_scanned,\n    query_history.query_acceleration_upper_limit_scale_factor,\n    query_history.query_hash,\n    query_history.query_hash_version,\n    query_history.query_parameterized_hash,\n    query_history.query_parameterized_hash_version,\n\n    -- Rename some existing columns for clarity\n    query_history.total_elapsed_time as total_elapsed_time_ms,\n    query_history.compilation_time as compilation_time_ms,\n    query_history.queued_provisioning_time as queued_provisioning_time_ms,\n    query_history.queued_repair_time as queued_repair_time_ms,\n    query_history.queued_overload_time as queued_overload_time_ms,\n    query_history.transaction_blocked_time as transaction_blocked_time_ms,\n    query_history.list_external_files_time as list_external_files_time_ms,\n    query_history.execution_time as execution_time_ms,\n\n    -- New columns\n    query_history.warehouse_size is not null as ran_on_warehouse,\n    query_history.bytes_scanned / power(1024, 3) as data_scanned_gb,\n    data_scanned_gb * query_history.percentage_scanned_from_cache as data_scanned_from_cache_gb,\n    query_history.bytes_spilled_to_local_storage / power(1024, 3) as data_spilled_to_local_storage_gb,\n    query_history.bytes_spilled_to_remote_storage / power(1024, 3) as data_spilled_to_remote_storage_gb,\n    query_history.bytes_sent_over_the_network / power(1024, 3) as data_sent_over_the_network_gb,\n    query_history.query_text_no_comments,\n    query_history.dbt_metadata,\n\n    query_history.total_elapsed_time / 1000 as total_elapsed_time_s,\n    query_history.compilation_time / 1000 as compilation_time_s,\n    query_history.queued_provisioning_time / 1000 as queued_provisioning_time_s,\n    query_history.queued_repair_time / 1000 as queued_repair_time_s,\n    query_history.queued_overload_time / 1000 as queued_overload_time_s,\n    query_history.transaction_blocked_time / 1000 as transaction_blocked_time_s,\n    query_history.list_external_files_time / 1000 as list_external_files_time_s,\n    query_history.execution_time / 1000 as execution_time_s,\n    cost_per_query.currency,\n    query_history.query_retry_time as query_retry_time_ms,\n    query_history.query_retry_time / 1000 as query_retry_time_s,\n    query_history.query_retry_cause,\n    query_history.fault_handling_time as fault_handling_time_ms,\n    query_history.fault_handling_time / 1000 as fault_handling_time_s\n\nfrom query_history\ninner join cost_per_query\n    on query_history.query_id = cost_per_query.query_id\norder by query_history.start_time", "language": "sql", "refs": [{"name": "stg_query_history", "package": null, "version": null}, {"name": "cost_per_query", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_snowflake_monitoring.create_merge_objects_udf"], "nodes": ["model.dbt_snowflake_monitoring.stg_query_history", "model.dbt_snowflake_monitoring.cost_per_query"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/query_history_enriched.sql", "compiled": true, "compiled_code": "\n\nwith\nquery_history as (\n    select\n        *,\n\n        -- this removes comments enclosed by /* <comment text> */ and single line comments starting with -- and either ending with a new line or end of string\n        regexp_replace(query_text, $$(\\/\\*(.|\\n|\\r)*?\\*\\/)|(--.*$)|(--.*(\\n|\\r))|;$$, '') as query_text_no_comments,\n\n        try_parse_json(regexp_substr(query_text, $$\\/\\*\\s*({(.|\\n|\\r)*\"app\":\\s\"dbt\"(.|\\n|\\r)*})\\s*\\*\\/$$, 1, 1, 'ie')) as _dbt_json_comment_meta,\n        case\n            when try_parse_json(query_tag)['dbt_snowflake_query_tags_version'] is not null then try_parse_json(query_tag)\n        end as _dbt_json_query_tag_meta,\n        case\n            when _dbt_json_comment_meta is not null or _dbt_json_query_tag_meta is not null then\n                fasttrack_cost_reporting_dev.landing_snowflake_monitoring.merge_objects(coalesce(_dbt_json_comment_meta, { }), coalesce(_dbt_json_query_tag_meta, { }))\n        end as dbt_metadata\n\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history\n\n    \n        -- Conservatively re-process the last 3 days to account for late arriving rates data. Allow an override from project variable\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -3, max(end_time)) from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_history_enriched)\n    \n),\n\ncost_per_query as (\n    select *\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query\n    \n        -- Conservatively re-process the last 3 days to account for late arriving rates data. Allow an override from project variable\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -3, max(end_time)) from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_history_enriched)\n    \n)\n\nselect\n    cost_per_query.query_id,\n    cost_per_query.compute_cost,\n    cost_per_query.compute_credits,\n    cost_per_query.query_acceleration_cost,\n    cost_per_query.query_acceleration_credits,\n    cost_per_query.cloud_services_cost,\n    cost_per_query.cloud_services_credits,\n    cost_per_query.query_cost,\n    cost_per_query.query_credits,\n    cost_per_query.execution_start_time,\n\n    -- Grab all columns from query_history (except the query time columns which we rename below)\n    query_history.query_text,\n    query_history.database_id,\n    query_history.database_name,\n    query_history.schema_id,\n    query_history.schema_name,\n    query_history.query_type,\n    query_history.session_id,\n    query_history.user_name,\n    query_history.role_name,\n    query_history.warehouse_id,\n    query_history.warehouse_name,\n    query_history.warehouse_size,\n    query_history.warehouse_type,\n    query_history.cluster_number,\n    query_history.query_tag,\n    query_history.execution_status,\n    query_history.error_code,\n    query_history.error_message,\n    query_history.start_time,\n    query_history.end_time,\n    query_history.total_elapsed_time,\n    query_history.bytes_scanned,\n    query_history.percentage_scanned_from_cache,\n    query_history.bytes_written,\n    query_history.bytes_written_to_result,\n    query_history.bytes_read_from_result,\n    query_history.rows_produced,\n    query_history.rows_inserted,\n    query_history.rows_updated,\n    query_history.rows_deleted,\n    query_history.rows_unloaded,\n    query_history.bytes_deleted,\n    query_history.partitions_scanned,\n    query_history.partitions_total,\n    query_history.bytes_spilled_to_local_storage,\n    query_history.bytes_spilled_to_remote_storage,\n    query_history.bytes_sent_over_the_network,\n    query_history.outbound_data_transfer_cloud,\n    query_history.outbound_data_transfer_region,\n    query_history.outbound_data_transfer_bytes,\n    query_history.inbound_data_transfer_cloud,\n    query_history.inbound_data_transfer_region,\n    query_history.inbound_data_transfer_bytes,\n    query_history.credits_used_cloud_services,\n    query_history.release_version,\n    query_history.external_function_total_invocations,\n    query_history.external_function_total_sent_rows,\n    query_history.external_function_total_received_rows,\n    query_history.external_function_total_sent_bytes,\n    query_history.external_function_total_received_bytes,\n    query_history.query_load_percent,\n    query_history.is_client_generated_statement,\n    query_history.query_acceleration_bytes_scanned,\n    query_history.query_acceleration_partitions_scanned,\n    query_history.query_acceleration_upper_limit_scale_factor,\n    query_history.query_hash,\n    query_history.query_hash_version,\n    query_history.query_parameterized_hash,\n    query_history.query_parameterized_hash_version,\n\n    -- Rename some existing columns for clarity\n    query_history.total_elapsed_time as total_elapsed_time_ms,\n    query_history.compilation_time as compilation_time_ms,\n    query_history.queued_provisioning_time as queued_provisioning_time_ms,\n    query_history.queued_repair_time as queued_repair_time_ms,\n    query_history.queued_overload_time as queued_overload_time_ms,\n    query_history.transaction_blocked_time as transaction_blocked_time_ms,\n    query_history.list_external_files_time as list_external_files_time_ms,\n    query_history.execution_time as execution_time_ms,\n\n    -- New columns\n    query_history.warehouse_size is not null as ran_on_warehouse,\n    query_history.bytes_scanned / power(1024, 3) as data_scanned_gb,\n    data_scanned_gb * query_history.percentage_scanned_from_cache as data_scanned_from_cache_gb,\n    query_history.bytes_spilled_to_local_storage / power(1024, 3) as data_spilled_to_local_storage_gb,\n    query_history.bytes_spilled_to_remote_storage / power(1024, 3) as data_spilled_to_remote_storage_gb,\n    query_history.bytes_sent_over_the_network / power(1024, 3) as data_sent_over_the_network_gb,\n    query_history.query_text_no_comments,\n    query_history.dbt_metadata,\n\n    query_history.total_elapsed_time / 1000 as total_elapsed_time_s,\n    query_history.compilation_time / 1000 as compilation_time_s,\n    query_history.queued_provisioning_time / 1000 as queued_provisioning_time_s,\n    query_history.queued_repair_time / 1000 as queued_repair_time_s,\n    query_history.queued_overload_time / 1000 as queued_overload_time_s,\n    query_history.transaction_blocked_time / 1000 as transaction_blocked_time_s,\n    query_history.list_external_files_time / 1000 as list_external_files_time_s,\n    query_history.execution_time / 1000 as execution_time_s,\n    cost_per_query.currency,\n    query_history.query_retry_time as query_retry_time_ms,\n    query_history.query_retry_time / 1000 as query_retry_time_s,\n    query_history.query_retry_cause,\n    query_history.fault_handling_time as fault_handling_time_ms,\n    query_history.fault_handling_time / 1000 as fault_handling_time_s\n\nfrom query_history\ninner join cost_per_query\n    on query_history.query_id = cost_per_query.query_id\norder by query_history.start_time", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.dbt_queries": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "dbt_queries", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "dbt_queries.sql", "original_file_path": "models/dbt_queries.sql", "unique_id": "model.dbt_snowflake_monitoring.dbt_queries", "fqn": ["dbt_snowflake_monitoring", "dbt_queries"], "alias": "dbt_queries", "checksum": {"name": "sha256", "checksum": "85418f8e8fd69ec9c717cfdad4e669f78febaf3b2b8a19b2f6001311f08ef51b"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["query_id", "start_time"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Filtered version of query_history_enriched just for queries issued by dbt. Adds additional dbt-specific columns. Incrementally pulls the last 3 days by default to account for late arriving rates data. This can be overriden by passing a value for dbt_snowflake_monitoring_incremental_days.", "columns": {"dbt_snowflake_query_tags_version": {"name": "dbt_snowflake_query_tags_version", "description": "Version of the dbt-snowflake-query-tags package that generated the metadata", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_invocation_id": {"name": "dbt_invocation_id", "description": "The id of the dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_id": {"name": "dbt_node_id", "description": "The identifier for the node that the query relates to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_resource_type": {"name": "dbt_node_resource_type", "description": "The resource type of the node that the query relates to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_name": {"name": "dbt_node_name", "description": "The name of the node that the query relates to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_materialized": {"name": "dbt_node_materialized", "description": "The materialization of the node that the query relates to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_is_incremental": {"name": "dbt_node_is_incremental", "description": "Boolean describing if the node run was incremental.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_alias": {"name": "dbt_node_alias", "description": "Alias set for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_meta": {"name": "dbt_node_meta", "description": "Dict of any meta set for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_tags": {"name": "dbt_node_tags", "description": "Array of all tags set for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_refs": {"name": "dbt_node_refs", "description": "Array of all refs used by the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_database": {"name": "dbt_node_database", "description": "The database configured for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_schema": {"name": "dbt_node_schema", "description": "The schema configured for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_version": {"name": "dbt_version", "description": "Version of dbt in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_project_name": {"name": "dbt_project_name", "description": "Name of the dbt project.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_target_name": {"name": "dbt_target_name", "description": "The target name for the dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_target_database": {"name": "dbt_target_database", "description": "The target database for the dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_target_schema": {"name": "dbt_target_schema", "description": "The target schema for the dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_package_name": {"name": "dbt_node_package_name", "description": "The package name of the dbt node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_node_original_file_path": {"name": "dbt_node_original_file_path", "description": "The file path of the dbt node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "If using dbt Cloud, the ID of the project.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "If using dbt Cloud, the ID of the issuing job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "If using dbt Cloud, the ID of the issuing run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "If using dbt Cloud, the run reason category for the issuing run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "If using dbt Cloud, the run reason for the issuing run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_cloud_job_url": {"name": "dbt_cloud_job_url", "description": "If using dbt Cloud, the URL of the issuing job. The dbt_cloud_account_id dbt variable must be set for this field to populate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_cloud_run_url": {"name": "dbt_cloud_run_url", "description": "If using dbt Cloud, the URL of the issuing run. The dbt_cloud_account_id dbt variable must be set for this field to populate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/dbt_queries.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["query_id", "start_time"], "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.7597408, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.dbt_queries", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['query_id', 'start_time']\n) }}\n\nselect\n    dbt_metadata['dbt_snowflake_query_tags_version']::string as dbt_snowflake_query_tags_version, -- this will be null where the metadata came from a query comment in dbt-snowflake-monitoring versions <2.0.0\n    dbt_metadata['invocation_id']::string as dbt_invocation_id,\n    dbt_metadata['node_id']::string as dbt_node_id,\n    dbt_metadata['node_resource_type']::string as dbt_node_resource_type,\n    coalesce(dbt_metadata['node_name']::string, replace(array_slice(split(dbt_node_id, '.'), -1, array_size(split(dbt_node_id, '.')))[0], '\"')) as dbt_node_name, -- we can just use node_name once enough time has been that users have migrated to v2.0.0\n    dbt_metadata['materialized']::string as dbt_node_materialized,\n    dbt_metadata['is_incremental']::boolean as dbt_node_is_incremental,\n    dbt_metadata['node_alias']::string as dbt_node_alias,\n    dbt_metadata['node_meta']::variant as dbt_node_meta,\n    dbt_metadata['node_tags']::array as node_tags,\n    iff(dbt_snowflake_query_tags_version >= '1.1.3', dbt_metadata['node_refs']::array, []) as dbt_node_refs, -- correct refs available from 1.1.3 onwards\n    dbt_metadata['node_database']::string as dbt_node_database,\n    dbt_metadata['node_schema']::string as dbt_node_schema,\n    dbt_metadata['dbt_version']::string as dbt_version,\n    dbt_metadata['project_name']::string as dbt_project_name,\n    dbt_metadata['target_name']::string as dbt_target_name,\n    dbt_metadata['target_database']::string as dbt_target_database,\n    dbt_metadata['target_schema']::string as dbt_target_schema,\n    dbt_metadata['node_package_name']::string as dbt_node_package_name,\n    dbt_metadata['node_original_file_path']::string as dbt_node_original_file_path,\n    dbt_metadata['dbt_cloud_project_id']::string as dbt_cloud_project_id,\n    dbt_metadata['dbt_cloud_job_id']::string as dbt_cloud_job_id,\n    dbt_metadata['dbt_cloud_run_id']::string as dbt_cloud_run_id,\n    dbt_metadata['dbt_cloud_run_reason_category']::string as dbt_cloud_run_reason_category,\n    dbt_metadata['dbt_cloud_run_reason']::string as dbt_cloud_run_reason,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            {% if var('dbt_cloud_account_id', none) -%}\n            '{{ var('dbt_cloud_url', 'https://cloud.getdbt.com/deploy/') }}' || '{{ var('dbt_cloud_account_id') }}' || '/projects/' || dbt_cloud_project_id || '/jobs/' || dbt_cloud_job_id\n            {%- else -%}\n            'Required dbt_cloud_account_id variable not set' -- noqa\n            {%- endif %}\n    end as dbt_cloud_job_url,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            {% if var('dbt_cloud_account_id', none) -%}\n            '{{ var('dbt_cloud_url', 'https://cloud.getdbt.com/deploy/') }}' || '{{ var('dbt_cloud_account_id') }}' || '/projects/' || dbt_cloud_project_id || '/runs/' || dbt_cloud_run_id\n            {%- else -%}\n            'Required dbt_cloud_account_id variable not set' -- noqa\n            {%- endif %}\n    end as dbt_cloud_run_url,\n    * exclude dbt_metadata\nfrom {{ ref('query_history_enriched') }}\nwhere dbt_metadata is not null\n    {% if is_incremental() %}\n        -- Conservatively re-process the last 3 days to account for late arriving rates data which changes the cost per query. \n        -- Allow an override from project variable\n        and end_time > (select coalesce(dateadd(day, -{{ var('dbt_snowflake_monitoring_incremental_days', '3') }}, max(end_time)), '1970-01-01') from {{ this }})\n    {% endif %}", "language": "sql", "refs": [{"name": "query_history_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_snowflake_monitoring.query_history_enriched"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/dbt_queries.sql", "compiled": true, "compiled_code": "\n\nselect\n    dbt_metadata['dbt_snowflake_query_tags_version']::string as dbt_snowflake_query_tags_version, -- this will be null where the metadata came from a query comment in dbt-snowflake-monitoring versions <2.0.0\n    dbt_metadata['invocation_id']::string as dbt_invocation_id,\n    dbt_metadata['node_id']::string as dbt_node_id,\n    dbt_metadata['node_resource_type']::string as dbt_node_resource_type,\n    coalesce(dbt_metadata['node_name']::string, replace(array_slice(split(dbt_node_id, '.'), -1, array_size(split(dbt_node_id, '.')))[0], '\"')) as dbt_node_name, -- we can just use node_name once enough time has been that users have migrated to v2.0.0\n    dbt_metadata['materialized']::string as dbt_node_materialized,\n    dbt_metadata['is_incremental']::boolean as dbt_node_is_incremental,\n    dbt_metadata['node_alias']::string as dbt_node_alias,\n    dbt_metadata['node_meta']::variant as dbt_node_meta,\n    dbt_metadata['node_tags']::array as node_tags,\n    iff(dbt_snowflake_query_tags_version >= '1.1.3', dbt_metadata['node_refs']::array, []) as dbt_node_refs, -- correct refs available from 1.1.3 onwards\n    dbt_metadata['node_database']::string as dbt_node_database,\n    dbt_metadata['node_schema']::string as dbt_node_schema,\n    dbt_metadata['dbt_version']::string as dbt_version,\n    dbt_metadata['project_name']::string as dbt_project_name,\n    dbt_metadata['target_name']::string as dbt_target_name,\n    dbt_metadata['target_database']::string as dbt_target_database,\n    dbt_metadata['target_schema']::string as dbt_target_schema,\n    dbt_metadata['node_package_name']::string as dbt_node_package_name,\n    dbt_metadata['node_original_file_path']::string as dbt_node_original_file_path,\n    dbt_metadata['dbt_cloud_project_id']::string as dbt_cloud_project_id,\n    dbt_metadata['dbt_cloud_job_id']::string as dbt_cloud_job_id,\n    dbt_metadata['dbt_cloud_run_id']::string as dbt_cloud_run_id,\n    dbt_metadata['dbt_cloud_run_reason_category']::string as dbt_cloud_run_reason_category,\n    dbt_metadata['dbt_cloud_run_reason']::string as dbt_cloud_run_reason,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            'https://cloud.getdbt.com/deploy/' || '5235' || '/projects/' || dbt_cloud_project_id || '/jobs/' || dbt_cloud_job_id\n    end as dbt_cloud_job_url,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            'https://cloud.getdbt.com/deploy/' || '5235' || '/projects/' || dbt_cloud_project_id || '/runs/' || dbt_cloud_run_id\n    end as dbt_cloud_run_url,\n    * exclude dbt_metadata\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_history_enriched\nwhere dbt_metadata is not null\n    \n        -- Conservatively re-process the last 3 days to account for late arriving rates data which changes the cost per query. \n        -- Allow an override from project variable\n        and end_time > (select coalesce(dateadd(day, -3, max(end_time)), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.dbt_queries)\n    ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.query_direct_table_access": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "query_direct_table_access", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_direct_table_access.sql", "original_file_path": "models/query_direct_table_access.sql", "unique_id": "model.dbt_snowflake_monitoring.query_direct_table_access", "fqn": ["dbt_snowflake_monitoring", "query_direct_table_access"], "alias": "query_direct_table_access", "checksum": {"name": "sha256", "checksum": "8edea4b9e93c8377c35b780c127a851bcea074b7037e5d428df46a7145fabb0e"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model tracks the direct tables accessed by a query. It contains 1 row per query per table. It does not include tables from a data share. Access history is only available for Snowflake accounts on enterprise or higher, and therefore this model will be empty for standard accounts. See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html for more details. See https://select.dev/posts/snowflake-unused-tables#direct-versus-base-objects-accessed for more details on the difference between base versus direct tables accessed.", "columns": {"_unique_id": {"name": "_unique_id", "description": "Unique identifier for each row in the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "full_table_name": {"name": "full_table_name", "description": "Fully qualified table name, i.e. <database_name>.<schema_name>.<table_name>", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "table_id": {"name": "table_id", "description": "Unique identifier for the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "columns_accessed": {"name": "columns_accessed", "description": "Array of column_names accessed in the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/query_direct_table_access.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.760355, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_direct_table_access", "raw_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom {{ ref('query_direct_object_access') }}\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "language": "sql", "refs": [{"name": "query_direct_object_access", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.query_direct_object_access"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/query_direct_table_access.sql", "compiled": true, "compiled_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_direct_object_access\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.query_base_object_access": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "query_base_object_access", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_base_object_access.sql", "original_file_path": "models/query_base_object_access.sql", "unique_id": "model.dbt_snowflake_monitoring.query_base_object_access", "fqn": ["dbt_snowflake_monitoring", "query_base_object_access"], "alias": "query_base_object_access", "checksum": {"name": "sha256", "checksum": "fc727ac274c368143804322027cc200bf85b62feaefc2dbbead9a705378e4c1b"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["_unique_id", "query_start_time"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model tracks the base objects accessed by a query. It contains 1 row per query per object. An object can be a regular table owned/created by your account, a table from a data share, a secured view, or an external table. See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html for more details. Access history is only available for Snowflake accounts on enterprise or higher, and therefore this model will be empty for standard accounts. See https://select.dev/posts/snowflake-unused-tables#direct-versus-base-objects-accessed for more details on the difference between base versus direct objects accessed.", "columns": {"_unique_id": {"name": "_unique_id", "description": "Unique identifier for each row in the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_name": {"name": "object_name", "description": "Fully qualified object name. For a table, this would be <database_name>.<schema_name>.<table_name>", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_domain": {"name": "object_domain", "description": "One of the following: Table, View, Materialized view, External table, Stream, or Stage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "table_id": {"name": "table_id", "description": "Unique identifier for the table/view. Will be null for secured views and tables from a data share.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "columns_accessed": {"name": "columns_accessed", "description": "Array of column_names accessed in the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/query_base_object_access.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["_unique_id", "query_start_time"], "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.7607071, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_base_object_access", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['_unique_id', 'query_start_time'],\n) }}\n\nwith\naccess_history as (\n    select *\n    from {{ ref('stg_access_history') }}\n\n    {% if is_incremental() %}\n        where query_start_time > (select coalesce(dateadd('day', -1, max(query_start_time)), '1970-01-01') from {{ this }})\n    {% endif %}\n\n),\n\naccess_history_flattened as (\n    select\n        access_history.query_id,\n        access_history.query_start_time,\n        access_history.user_name,\n        objects_accessed.value:objectId::integer as table_id, -- will be null for secured views or tables from a data share\n        objects_accessed.value:objectName::text as object_name,\n        objects_accessed.value:objectDomain::text as object_domain,\n        objects_accessed.value:columns as columns_array\n\n    from access_history, lateral flatten(access_history.base_objects_accessed) as objects_accessed\n),\n\naccess_history_flattened_w_columns as (\n    select\n        access_history_flattened.query_id,\n        access_history_flattened.query_start_time,\n        access_history_flattened.user_name,\n        access_history_flattened.table_id,\n        access_history_flattened.object_name,\n        access_history_flattened.object_domain,\n        array_agg(distinct columns.value:columnName::text) as columns_accessed\n    from access_history_flattened, lateral flatten(access_history_flattened.columns_array) as columns\n    where\n        access_history_flattened.object_name is not null\n    group by 1, 2, 3, 4, 5, 6\n)\n\nselect\n    md5(concat(query_id, object_name)) as _unique_id,\n    *\nfrom access_history_flattened_w_columns\norder by query_start_time asc", "language": "sql", "refs": [{"name": "stg_access_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_snowflake_monitoring.stg_access_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/query_base_object_access.sql", "compiled": true, "compiled_code": "\n\nwith\naccess_history as (\n    select *\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_access_history\n\n    \n        where query_start_time > (select coalesce(dateadd('day', -1, max(query_start_time)), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_base_object_access)\n    \n\n),\n\naccess_history_flattened as (\n    select\n        access_history.query_id,\n        access_history.query_start_time,\n        access_history.user_name,\n        objects_accessed.value:objectId::integer as table_id, -- will be null for secured views or tables from a data share\n        objects_accessed.value:objectName::text as object_name,\n        objects_accessed.value:objectDomain::text as object_domain,\n        objects_accessed.value:columns as columns_array\n\n    from access_history, lateral flatten(access_history.base_objects_accessed) as objects_accessed\n),\n\naccess_history_flattened_w_columns as (\n    select\n        access_history_flattened.query_id,\n        access_history_flattened.query_start_time,\n        access_history_flattened.user_name,\n        access_history_flattened.table_id,\n        access_history_flattened.object_name,\n        access_history_flattened.object_domain,\n        array_agg(distinct columns.value:columnName::text) as columns_accessed\n    from access_history_flattened, lateral flatten(access_history_flattened.columns_array) as columns\n    where\n        access_history_flattened.object_name is not null\n    group by 1, 2, 3, 4, 5, 6\n)\n\nselect\n    md5(concat(query_id, object_name)) as _unique_id,\n    *\nfrom access_history_flattened_w_columns\norder by query_start_time asc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.warehouse_credits_map": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "warehouse_credits_map", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "warehouse_credits_map.sql", "original_file_path": "models/warehouse_credits_map.sql", "unique_id": "model.dbt_snowflake_monitoring.warehouse_credits_map", "fqn": ["dbt_snowflake_monitoring", "warehouse_credits_map"], "alias": "warehouse_credits_map", "checksum": {"name": "sha256", "checksum": "3727a5986ff5a881b12ecc2ab189a0e2198fee5eb3c7021829c25b54ef71a165"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model contains the credit consumption for each type and size of warehouse. It contains 1 row per hour per warehouse size and type.", "columns": {"warehouse_size": {"name": "warehouse_size", "description": "The size of the warehouse. These values will join directly to the warehouse_size column in the query_history models.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_type": {"name": "warehouse_type", "description": "The type of the warehouse. Will be STANDARD or SNOWPARK-OPTIMIZED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_per_hour": {"name": "credits_per_hour", "description": "The hourly rate at which credits are charged for this warehouse configuration", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_per_minute": {"name": "credits_per_minute", "description": "The minutely rate at which credits are charged for this warehouse configuration", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_per_second": {"name": "credits_per_second", "description": "The secondly rate at which credits are charged for this warehouse configuration", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/warehouse_credits_map.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.7635698, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.warehouse_credits_map", "raw_code": "{{ config(materialized='view') }}\n\nwith\nwarehouse_credits_map as (\n    select * from (\n        values\n        ('X-Small', 'STANDARD', 1),\n        ('Small', 'STANDARD', 2),\n        ('Medium', 'STANDARD', 4),\n        ('Large', 'STANDARD', 8),\n        ('X-Large', 'STANDARD', 16),\n        ('2X-Large', 'STANDARD', 32),\n        ('3X-Large', 'STANDARD', 64),\n        ('4X-Large', 'STANDARD', 128),\n        ('5X-Large', 'STANDARD', 256),\n        ('6X-Large', 'STANDARD', 512),\n        ('Medium', 'SNOWPARK-OPTIMIZED', 6),\n        ('Large', 'SNOWPARK-OPTIMIZED', 12),\n        ('X-Large', 'SNOWPARK-OPTIMIZED', 24),\n        ('2X-Large', 'SNOWPARK-OPTIMIZED', 48),\n        ('3X-Large', 'SNOWPARK-OPTIMIZED', 96),\n        ('4X-Large', 'SNOWPARK-OPTIMIZED', 192),\n        ('5X-Large', 'SNOWPARK-OPTIMIZED', 384),\n        ('6X-Large', 'SNOWPARK-OPTIMIZED', 768)\n    ) as t (warehouse_size, warehouse_type, credits_per_hour)\n)\n\nselect\n    warehouse_size,\n    warehouse_type,\n    credits_per_hour,\n    credits_per_hour / 60 as credits_per_minute,\n    credits_per_hour / 3600 as credits_per_second\nfrom warehouse_credits_map", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/warehouse_credits_map.sql", "compiled": true, "compiled_code": "\n\nwith\nwarehouse_credits_map as (\n    select * from (\n        values\n        ('X-Small', 'STANDARD', 1),\n        ('Small', 'STANDARD', 2),\n        ('Medium', 'STANDARD', 4),\n        ('Large', 'STANDARD', 8),\n        ('X-Large', 'STANDARD', 16),\n        ('2X-Large', 'STANDARD', 32),\n        ('3X-Large', 'STANDARD', 64),\n        ('4X-Large', 'STANDARD', 128),\n        ('5X-Large', 'STANDARD', 256),\n        ('6X-Large', 'STANDARD', 512),\n        ('Medium', 'SNOWPARK-OPTIMIZED', 6),\n        ('Large', 'SNOWPARK-OPTIMIZED', 12),\n        ('X-Large', 'SNOWPARK-OPTIMIZED', 24),\n        ('2X-Large', 'SNOWPARK-OPTIMIZED', 48),\n        ('3X-Large', 'SNOWPARK-OPTIMIZED', 96),\n        ('4X-Large', 'SNOWPARK-OPTIMIZED', 192),\n        ('5X-Large', 'SNOWPARK-OPTIMIZED', 384),\n        ('6X-Large', 'SNOWPARK-OPTIMIZED', 768)\n    ) as t (warehouse_size, warehouse_type, credits_per_hour)\n)\n\nselect\n    warehouse_size,\n    warehouse_type,\n    credits_per_hour,\n    credits_per_hour / 60 as credits_per_minute,\n    credits_per_hour / 3600 as credits_per_second\nfrom warehouse_credits_map", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.warehouses_type2_dimension": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "warehouses_type2_dimension", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "warehouses_type2_dimension.sql", "original_file_path": "models/warehouses_type2_dimension.sql", "unique_id": "model.dbt_snowflake_monitoring.warehouses_type2_dimension", "fqn": ["dbt_snowflake_monitoring", "warehouses_type2_dimension"], "alias": "warehouses_type2_dimension", "checksum": {"name": "sha256", "checksum": "fc1a4c8be824b2be62bbbfcfedd046e7a222ed9d50c2853328f3d925632fada2"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model tracks the warehouse size and name over time. It contains 1 row per period that the warehouse state applies. The following caveats apply:\n\n- if user changes the warehouse size/name, we won't register the new attributes until the next query runs against it\n- this could also mean that warehouse size changes are not registered if they were changed and then reverted\n", "columns": {"warehouse_id": {"name": "warehouse_id", "description": "The unique warehouse ID (assigned by Snowflake) that corresponds to the warehouse name in your account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_name": {"name": "warehouse_name", "description": "The name of the warehouse during the given period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_size": {"name": "warehouse_size", "description": "The size of the warehouse during the given period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "valid_from": {"name": "valid_from", "description": "Timestamp for the beginning of the period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "valid_to": {"name": "valid_to", "description": "Timestamp for the end of the period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_current": {"name": "is_current", "description": "Boolean indicator to filter to the most recent state of the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/warehouses_type2_dimension.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.761913, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.warehouses_type2_dimension", "raw_code": "{{ config(materialized='table') }}\n\nwith\nstop_threshold as (\n    select max(start_time) as timestamp\n    from {{ ref('stg_query_history') }}\n),\n\nwarehouse_snapshots_base as (\n    select\n        warehouse_id,\n        warehouse_size,\n        warehouse_name,\n        start_time as timestamp,\n        lag(warehouse_size) over (partition by warehouse_id\norder by start_time) as prev_warehouse_size,\n        lag(warehouse_name) over (partition by warehouse_id\norder by start_time) as prev_warehouse_name\n    from {{ ref('stg_query_history') }}\n    where\n        warehouse_size is not null\n),\n\nwarehouse_snapshots as (\n    select\n        warehouse_id,\n        warehouse_name,\n        warehouse_size,\n        timestamp as valid_from,\n        lead(timestamp) over (partition by warehouse_id\norder by timestamp) as _valid_to\n    from warehouse_snapshots_base\n    where\n        warehouse_size != coalesce(prev_warehouse_size, '')\n        or warehouse_name != coalesce(prev_warehouse_name, '')\n)\n\nselect\n    warehouse_snapshots.warehouse_id,\n    warehouse_snapshots.warehouse_name,\n    warehouse_snapshots.warehouse_size,\n    warehouse_snapshots.valid_from,\n    coalesce(warehouse_snapshots._valid_to, stop_threshold.timestamp) as valid_to,\n    warehouse_snapshots._valid_to is null as is_current\nfrom warehouse_snapshots\ncross join stop_threshold", "language": "sql", "refs": [{"name": "stg_query_history", "package": null, "version": null}, {"name": "stg_query_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.stg_query_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/warehouses_type2_dimension.sql", "compiled": true, "compiled_code": "\n\nwith\nstop_threshold as (\n    select max(start_time) as timestamp\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history\n),\n\nwarehouse_snapshots_base as (\n    select\n        warehouse_id,\n        warehouse_size,\n        warehouse_name,\n        start_time as timestamp,\n        lag(warehouse_size) over (partition by warehouse_id\norder by start_time) as prev_warehouse_size,\n        lag(warehouse_name) over (partition by warehouse_id\norder by start_time) as prev_warehouse_name\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history\n    where\n        warehouse_size is not null\n),\n\nwarehouse_snapshots as (\n    select\n        warehouse_id,\n        warehouse_name,\n        warehouse_size,\n        timestamp as valid_from,\n        lead(timestamp) over (partition by warehouse_id\norder by timestamp) as _valid_to\n    from warehouse_snapshots_base\n    where\n        warehouse_size != coalesce(prev_warehouse_size, '')\n        or warehouse_name != coalesce(prev_warehouse_name, '')\n)\n\nselect\n    warehouse_snapshots.warehouse_id,\n    warehouse_snapshots.warehouse_name,\n    warehouse_snapshots.warehouse_size,\n    warehouse_snapshots.valid_from,\n    coalesce(warehouse_snapshots._valid_to, stop_threshold.timestamp) as valid_to,\n    warehouse_snapshots._valid_to is null as is_current\nfrom warehouse_snapshots\ncross join stop_threshold", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.cost_per_query": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "cost_per_query", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "cost_per_query.sql", "original_file_path": "models/cost_per_query.sql", "unique_id": "model.dbt_snowflake_monitoring.cost_per_query", "fqn": ["dbt_snowflake_monitoring", "cost_per_query"], "alias": "cost_per_query", "checksum": {"name": "sha256", "checksum": "41a21038e87bce10640423b522195a78667baa9a6714d11ed52261c9e47cca66"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["query_id", "start_time"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A model to help you identify expensive Snowflake queries. It includes 1 row per query, along with the estimated query cost.", "columns": {"query_id": {"name": "query_id", "description": "Primary key. Internal/system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_time": {"name": "start_time", "description": "Query statement start time (in the UTC time zone). The table is naturally clustered on this column, meaning your queries will run much faster if you filter records using this column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_time": {"name": "end_time", "description": "Query statement end time (in the UTC time zone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_start_time": {"name": "execution_start_time", "description": "When the query began executing on the warehouse (in the UTC time zone). This will always be after the start_time.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_cost": {"name": "compute_cost", "description": "Compute costs associated with the query, in the primary currency of your account. Can be 0 if the query did not run on a warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "compute_credits": {"name": "compute_credits", "description": "Compute credits associated with the query. Can be 0 if the query did not run on a warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_services_cost": {"name": "cloud_services_cost", "description": "Cloud service costs associated with the query, in the primary currency of your account. Can be 0 if total cloud services credits consumption was less than 10% of total compute credits consumption on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_services_credits": {"name": "cloud_services_credits", "description": "Cloud service credits associated with the query. Can be 0 if total cloud services credits consumption was less than 10% of total compute credits consumption on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_cost": {"name": "query_cost", "description": "Total cost associated with the query, calculated as sum of compute_cost and cloud_services_cost, in the primary currency of your account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_credits": {"name": "query_credits", "description": "Total credits associated with the query, calculated as sum of compute_credits and cloud_services_credits.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ran_on_warehouse": {"name": "ran_on_warehouse", "description": "Indicator for whether the query ran on a warehouse. Certain queries, such as metadata queries, can be entirely processed in cloud services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "Spend currency, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/cost_per_query.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["query_id", "start_time"], "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.7622132, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['query_id', 'start_time'],\n) }}\n\nwith\nstop_threshold as (\n    select max(end_time) as latest_ts\n    from {{ ref('stg_warehouse_metering_history') }}\n),\n\nfiltered_queries as (\n    select\n        query_id,\n        query_text as original_query_text,\n        credits_used_cloud_services,\n        warehouse_id,\n        warehouse_size is not null as ran_on_warehouse,\n        timeadd(\n            'millisecond',\n            queued_overload_time + compilation_time\n            + queued_provisioning_time + queued_repair_time\n            + list_external_files_time,\n            start_time\n        ) as execution_start_time,\n        start_time,\n        end_time,\n        query_acceleration_bytes_scanned\n    from {{ ref('stg_query_history') }}\n    where true\n        and end_time <= (select stop_threshold.latest_ts from stop_threshold)\n        {% if is_incremental() %}\n        -- account for late arriving queries\n        and end_time > (select coalesce(dateadd(day, -3, max(end_time)), '1970-01-01') from {{ this }})\n        {% endif %}\n),\n\nhours_list as (\n    select\n        dateadd(\n            'hour',\n            '-' || row_number() over (\norder by seq4() asc),\n            dateadd('day', '+1', current_date::timestamp_tz)\n        ) as hour_start,\n        dateadd('hour', '+1', hour_start) as hour_end\n\n    {% if is_incremental() %}\n    from table(generator(rowcount => (24 * 7)))\n    {% else %}\n    from table(generator(rowcount => (24 * 1095)))\n    {% endif %}\n),\n\n-- 1 row per hour a query ran\nquery_hours as (\n    select\n        hours_list.hour_start,\n        hours_list.hour_end,\n        queries.*\n    from hours_list\n    inner join filtered_queries as queries\n        on hours_list.hour_start >= date_trunc('hour', queries.execution_start_time)\n            and hours_list.hour_start < queries.end_time\n            and queries.ran_on_warehouse\n),\n\nquery_seconds_per_hour as (\n    select\n        *,\n        datediff('millisecond', greatest(execution_start_time, hour_start), least(end_time, hour_end)) as num_milliseconds_query_ran,\n        sum(num_milliseconds_query_ran) over (partition by warehouse_id, hour_start) as total_query_milliseconds_in_hour,\n        div0(num_milliseconds_query_ran, total_query_milliseconds_in_hour) as fraction_of_total_query_time_in_hour,\n        sum(query_acceleration_bytes_scanned) over (partition by warehouse_id, hour_start) as total_query_acceleration_bytes_scanned_in_hour,\n        div0(query_acceleration_bytes_scanned, total_query_acceleration_bytes_scanned_in_hour) as fraction_of_total_query_acceleration_bytes_scanned_in_hour,\n        hour_start as hour\n    from query_hours\n),\n\ncredits_billed_hourly as (\n    select\n        start_time as hour,\n        entity_id as warehouse_id,\n        sum(iff(service_type = 'WAREHOUSE_METERING', credits_used_compute, 0)) as credits_used_compute,\n        sum(iff(service_type = 'WAREHOUSE_METERING', credits_used_cloud_services, 0)) as credits_used_cloud_services,\n        sum(iff(service_type = 'QUERY_ACCELERATION', credits_used_compute, 0)) as credits_used_query_acceleration\n    from {{ ref('stg_metering_history') }}\n    where true\n        and service_type in ('QUERY_ACCELERATION', 'WAREHOUSE_METERING')\n    group by 1, 2\n),\n\nquery_cost as (\n    select\n        query_seconds_per_hour.*,\n        credits_billed_hourly.credits_used_compute * query_seconds_per_hour.fraction_of_total_query_time_in_hour as allocated_compute_credits_in_hour,\n        allocated_compute_credits_in_hour * daily_rates.effective_rate as allocated_compute_cost_in_hour,\n        credits_billed_hourly.credits_used_query_acceleration * query_seconds_per_hour.fraction_of_total_query_acceleration_bytes_scanned_in_hour as allocated_query_acceleration_credits_in_hour,\n        allocated_query_acceleration_credits_in_hour * daily_rates.effective_rate as allocated_query_acceleration_cost_in_hour\n    from query_seconds_per_hour\n    inner join credits_billed_hourly\n        on query_seconds_per_hour.warehouse_id = credits_billed_hourly.warehouse_id\n            and query_seconds_per_hour.hour = credits_billed_hourly.hour\n    inner join {{ ref('daily_rates') }} as daily_rates\n        on date(query_seconds_per_hour.start_time) = daily_rates.date\n            and daily_rates.service_type = 'WAREHOUSE_METERING'\n            and daily_rates.usage_type = 'compute'\n),\n\ncost_per_query as (\n    select\n        query_id,\n        any_value(start_time) as start_time,\n        any_value(end_time) as end_time,\n        any_value(execution_start_time) as execution_start_time,\n        sum(allocated_compute_cost_in_hour) as compute_cost,\n        sum(allocated_compute_credits_in_hour) as compute_credits,\n        sum(allocated_query_acceleration_cost_in_hour) as query_acceleration_cost,\n        sum(allocated_query_acceleration_credits_in_hour) as query_acceleration_credits,\n        any_value(credits_used_cloud_services) as credits_used_cloud_services,\n        any_value(ran_on_warehouse) as ran_on_warehouse\n    from query_cost\n    group by 1\n),\n\ncredits_billed_daily as (\n    select\n        date(hour) as date,\n        sum(credits_used_compute) as daily_credits_used_compute,\n        sum(credits_used_cloud_services) as daily_credits_used_cloud_services,\n        greatest(daily_credits_used_cloud_services - daily_credits_used_compute * 0.1, 0) as daily_billable_cloud_services\n    from credits_billed_hourly\n    group by 1\n),\n\nall_queries as (\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        compute_cost,\n        compute_credits,\n        query_acceleration_cost,\n        query_acceleration_credits,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from cost_per_query\n\n    union all\n\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        0 as compute_cost,\n        0 as compute_credits,\n        0 as query_acceleration_cost,\n        0 as query_acceleration_credits,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from filtered_queries\n    where\n        not ran_on_warehouse\n)\n\nselect\n    all_queries.query_id,\n    all_queries.start_time,\n    all_queries.end_time,\n    all_queries.execution_start_time,\n    all_queries.compute_cost,\n    all_queries.compute_credits,\n    all_queries.query_acceleration_cost,\n    all_queries.query_acceleration_credits,\n    -- For the most recent day, which is not yet complete, this calculation won't be perfect.\n    -- For example, at 12PM on the latest day, it's possible that cloud credits make up <10% of compute cost, so the queries\n    -- from that day are not allocated any cloud_services_cost. The next time the model runs, after we have the full day of data,\n    -- this may change if cloud credits make up >10% of compute cost.\n    (div0(all_queries.credits_used_cloud_services, credits_billed_daily.daily_credits_used_cloud_services) * credits_billed_daily.daily_billable_cloud_services) * coalesce(daily_rates.effective_rate, current_rates.effective_rate) as cloud_services_cost,\n    div0(all_queries.credits_used_cloud_services, credits_billed_daily.daily_credits_used_cloud_services) * credits_billed_daily.daily_billable_cloud_services as cloud_services_credits,\n    all_queries.compute_cost + all_queries.query_acceleration_cost + cloud_services_cost as query_cost,\n    all_queries.compute_credits + all_queries.query_acceleration_credits + cloud_services_credits as query_credits,\n    all_queries.ran_on_warehouse,\n    coalesce(daily_rates.currency, current_rates.currency) as currency\nfrom all_queries\ninner join credits_billed_daily\n    on date(all_queries.start_time) = credits_billed_daily.date\nleft join {{ ref('daily_rates') }} as daily_rates\n    on date(all_queries.start_time) = daily_rates.date\n        and daily_rates.service_type = 'CLOUD_SERVICES'\n        and daily_rates.usage_type = 'cloud services'\ninner join {{ ref('daily_rates') }} as current_rates\n    on current_rates.is_latest_rate\n        and current_rates.service_type = 'CLOUD_SERVICES'\n        and current_rates.usage_type = 'cloud services'\norder by all_queries.start_time asc", "language": "sql", "refs": [{"name": "stg_warehouse_metering_history", "package": null, "version": null}, {"name": "stg_query_history", "package": null, "version": null}, {"name": "stg_metering_history", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}, {"name": "daily_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_snowflake_monitoring.stg_warehouse_metering_history", "model.dbt_snowflake_monitoring.stg_query_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.daily_rates"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/cost_per_query.sql", "compiled": true, "compiled_code": "\n\nwith\nstop_threshold as (\n    select max(end_time) as latest_ts\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_warehouse_metering_history\n),\n\nfiltered_queries as (\n    select\n        query_id,\n        query_text as original_query_text,\n        credits_used_cloud_services,\n        warehouse_id,\n        warehouse_size is not null as ran_on_warehouse,\n        timeadd(\n            'millisecond',\n            queued_overload_time + compilation_time\n            + queued_provisioning_time + queued_repair_time\n            + list_external_files_time,\n            start_time\n        ) as execution_start_time,\n        start_time,\n        end_time,\n        query_acceleration_bytes_scanned\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history\n    where true\n        and end_time <= (select stop_threshold.latest_ts from stop_threshold)\n        \n        -- account for late arriving queries\n        and end_time > (select coalesce(dateadd(day, -3, max(end_time)), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query)\n        \n),\n\nhours_list as (\n    select\n        dateadd(\n            'hour',\n            '-' || row_number() over (\norder by seq4() asc),\n            dateadd('day', '+1', current_date::timestamp_tz)\n        ) as hour_start,\n        dateadd('hour', '+1', hour_start) as hour_end\n\n    \n    from table(generator(rowcount => (24 * 7)))\n    \n),\n\n-- 1 row per hour a query ran\nquery_hours as (\n    select\n        hours_list.hour_start,\n        hours_list.hour_end,\n        queries.*\n    from hours_list\n    inner join filtered_queries as queries\n        on hours_list.hour_start >= date_trunc('hour', queries.execution_start_time)\n            and hours_list.hour_start < queries.end_time\n            and queries.ran_on_warehouse\n),\n\nquery_seconds_per_hour as (\n    select\n        *,\n        datediff('millisecond', greatest(execution_start_time, hour_start), least(end_time, hour_end)) as num_milliseconds_query_ran,\n        sum(num_milliseconds_query_ran) over (partition by warehouse_id, hour_start) as total_query_milliseconds_in_hour,\n        div0(num_milliseconds_query_ran, total_query_milliseconds_in_hour) as fraction_of_total_query_time_in_hour,\n        sum(query_acceleration_bytes_scanned) over (partition by warehouse_id, hour_start) as total_query_acceleration_bytes_scanned_in_hour,\n        div0(query_acceleration_bytes_scanned, total_query_acceleration_bytes_scanned_in_hour) as fraction_of_total_query_acceleration_bytes_scanned_in_hour,\n        hour_start as hour\n    from query_hours\n),\n\ncredits_billed_hourly as (\n    select\n        start_time as hour,\n        entity_id as warehouse_id,\n        sum(iff(service_type = 'WAREHOUSE_METERING', credits_used_compute, 0)) as credits_used_compute,\n        sum(iff(service_type = 'WAREHOUSE_METERING', credits_used_cloud_services, 0)) as credits_used_cloud_services,\n        sum(iff(service_type = 'QUERY_ACCELERATION', credits_used_compute, 0)) as credits_used_query_acceleration\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history\n    where true\n        and service_type in ('QUERY_ACCELERATION', 'WAREHOUSE_METERING')\n    group by 1, 2\n),\n\nquery_cost as (\n    select\n        query_seconds_per_hour.*,\n        credits_billed_hourly.credits_used_compute * query_seconds_per_hour.fraction_of_total_query_time_in_hour as allocated_compute_credits_in_hour,\n        allocated_compute_credits_in_hour * daily_rates.effective_rate as allocated_compute_cost_in_hour,\n        credits_billed_hourly.credits_used_query_acceleration * query_seconds_per_hour.fraction_of_total_query_acceleration_bytes_scanned_in_hour as allocated_query_acceleration_credits_in_hour,\n        allocated_query_acceleration_credits_in_hour * daily_rates.effective_rate as allocated_query_acceleration_cost_in_hour\n    from query_seconds_per_hour\n    inner join credits_billed_hourly\n        on query_seconds_per_hour.warehouse_id = credits_billed_hourly.warehouse_id\n            and query_seconds_per_hour.hour = credits_billed_hourly.hour\n    inner join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on date(query_seconds_per_hour.start_time) = daily_rates.date\n            and daily_rates.service_type = 'WAREHOUSE_METERING'\n            and daily_rates.usage_type = 'compute'\n),\n\ncost_per_query as (\n    select\n        query_id,\n        any_value(start_time) as start_time,\n        any_value(end_time) as end_time,\n        any_value(execution_start_time) as execution_start_time,\n        sum(allocated_compute_cost_in_hour) as compute_cost,\n        sum(allocated_compute_credits_in_hour) as compute_credits,\n        sum(allocated_query_acceleration_cost_in_hour) as query_acceleration_cost,\n        sum(allocated_query_acceleration_credits_in_hour) as query_acceleration_credits,\n        any_value(credits_used_cloud_services) as credits_used_cloud_services,\n        any_value(ran_on_warehouse) as ran_on_warehouse\n    from query_cost\n    group by 1\n),\n\ncredits_billed_daily as (\n    select\n        date(hour) as date,\n        sum(credits_used_compute) as daily_credits_used_compute,\n        sum(credits_used_cloud_services) as daily_credits_used_cloud_services,\n        greatest(daily_credits_used_cloud_services - daily_credits_used_compute * 0.1, 0) as daily_billable_cloud_services\n    from credits_billed_hourly\n    group by 1\n),\n\nall_queries as (\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        compute_cost,\n        compute_credits,\n        query_acceleration_cost,\n        query_acceleration_credits,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from cost_per_query\n\n    union all\n\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        0 as compute_cost,\n        0 as compute_credits,\n        0 as query_acceleration_cost,\n        0 as query_acceleration_credits,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from filtered_queries\n    where\n        not ran_on_warehouse\n)\n\nselect\n    all_queries.query_id,\n    all_queries.start_time,\n    all_queries.end_time,\n    all_queries.execution_start_time,\n    all_queries.compute_cost,\n    all_queries.compute_credits,\n    all_queries.query_acceleration_cost,\n    all_queries.query_acceleration_credits,\n    -- For the most recent day, which is not yet complete, this calculation won't be perfect.\n    -- For example, at 12PM on the latest day, it's possible that cloud credits make up <10% of compute cost, so the queries\n    -- from that day are not allocated any cloud_services_cost. The next time the model runs, after we have the full day of data,\n    -- this may change if cloud credits make up >10% of compute cost.\n    (div0(all_queries.credits_used_cloud_services, credits_billed_daily.daily_credits_used_cloud_services) * credits_billed_daily.daily_billable_cloud_services) * coalesce(daily_rates.effective_rate, current_rates.effective_rate) as cloud_services_cost,\n    div0(all_queries.credits_used_cloud_services, credits_billed_daily.daily_credits_used_cloud_services) * credits_billed_daily.daily_billable_cloud_services as cloud_services_credits,\n    all_queries.compute_cost + all_queries.query_acceleration_cost + cloud_services_cost as query_cost,\n    all_queries.compute_credits + all_queries.query_acceleration_credits + cloud_services_credits as query_credits,\n    all_queries.ran_on_warehouse,\n    coalesce(daily_rates.currency, current_rates.currency) as currency\nfrom all_queries\ninner join credits_billed_daily\n    on date(all_queries.start_time) = credits_billed_daily.date\nleft join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n    on date(all_queries.start_time) = daily_rates.date\n        and daily_rates.service_type = 'CLOUD_SERVICES'\n        and daily_rates.usage_type = 'cloud services'\ninner join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as current_rates\n    on current_rates.is_latest_rate\n        and current_rates.service_type = 'CLOUD_SERVICES'\n        and current_rates.usage_type = 'cloud services'\norder by all_queries.start_time asc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["query_id"], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_usage_in_currency_daily", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_usage_in_currency_daily.sql", "original_file_path": "models/staging/stg_usage_in_currency_daily.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_usage_in_currency_daily"], "alias": "stg_usage_in_currency_daily", "checksum": {"name": "sha256", "checksum": "7a4f7d8d888cffdd25acd335ae818c8d176e6f44b0262ebce15e9f7a1491fcd8"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.523881, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_usage_in_currency_daily", "raw_code": "select\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_date,\n    usage_type,\n    currency,\n    usage,\n    usage_in_currency,\n    balance_source\nfrom {{ source('snowflake_organization_usage', 'usage_in_currency_daily') }}", "language": "sql", "refs": [], "sources": [["snowflake_organization_usage", "usage_in_currency_daily"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_usage_in_currency_daily.sql", "compiled": true, "compiled_code": "select\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_date,\n    usage_type,\n    currency,\n    usage,\n    usage_in_currency,\n    balance_source\nfrom snowflake.organization_usage.usage_in_currency_daily", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_remaining_balance_daily": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_remaining_balance_daily", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_remaining_balance_daily.sql", "original_file_path": "models/staging/stg_remaining_balance_daily.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_remaining_balance_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_remaining_balance_daily"], "alias": "stg_remaining_balance_daily", "checksum": {"name": "sha256", "checksum": "7492efb9a85c0fb95749a676f4a55e1aa451dfaf20b4fdb41da9df82521378fa"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A materialized copy of the snowflake.organization.rate_sheet_daily view. It can be used to get the effective rates used for calculating usage in the organization currency based on credits used for all Snowflake accounts in your organization. It contains 1 row per day per rate in Snowflake account (some days can have more than 1 rate for a given usage_type, usually when the contract is updated).", "columns": {"date": {"name": "date", "description": "The date of the FREE_USAGE_BALANCE or CAPACITY_BALANCE in the UTC time zone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "organization_name": {"name": "organization_name", "description": "Name of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_number": {"name": "contract_number", "description": "Contract number for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The currency of the FREE_USAGE_BALANCE or CAPACITY_BALANCE or ON_DEMAND_CONSUMPTION_BALANCE.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "free_usage_balance": {"name": "free_usage_balance", "description": "The amount of free usage in currency that is available for use as of the date. This is the end of day balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "capacity_balance": {"name": "capacity_balance", "description": "The amount of capacity in currency that is available for use as of the date. This is the end of day balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "on_demand_consumption_balance": {"name": "on_demand_consumption_balance", "description": "The amount of consumption at on demand prices that will be invoiced given that all the free usage and capacity balances have been exhausted. This is a negative value (e.g. -250) until the invoice is paid. This is the end of day balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rollover_balance": {"name": "rollover_balance", "description": "The amount of rollover balance in currency that is available for use at the end of the date. At the end of a contract term, it is calculated as sum(AMOUNT) from the CONTRACT_ITEMS view - sum(USAGE_IN_CURRENCY) from the USAGE_IN_CURRENCY_DAILY view.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_remaining_balance_daily.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.765592, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_remaining_balance_daily", "raw_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n{{ config(materialized='table') }}\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom {{ source('snowflake_organization_usage', 'remaining_balance_daily') }}\norder by date", "language": "sql", "refs": [], "sources": [["snowflake_organization_usage", "remaining_balance_daily"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_remaining_balance_daily.sql", "compiled": true, "compiled_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom snowflake.organization_usage.remaining_balance_daily\norder by date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_serverless_task_history": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_serverless_task_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_serverless_task_history.sql", "original_file_path": "models/staging/stg_serverless_task_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_serverless_task_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_serverless_task_history"], "alias": "stg_serverless_task_history", "checksum": {"name": "sha256", "checksum": "10251d137d3d5cf6352739362e370d2e93edeb9801a665fc83a5f3d82f14c0da"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["start_time", "task_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "An incrementally materialized copy of the snowflake.account_usage.serverless_task_history view. See https://docs.snowflake.com/en/sql-reference/account-usage/serverless_task_history.html", "columns": {"start_time": {"name": "start_time", "description": "The date and beginning of the hour (in the UTC time zone) in which the serverless task took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_time": {"name": "end_time", "description": "The date and end of the hour (in the UTC time zone) in which the serverless task took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "task_id": {"name": "task_id", "description": "Internal/system-generated identifier for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "task_name": {"name": "task_name", "description": "Name of the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "schema_id": {"name": "schema_id", "description": "Internal/system-generated identifier for the schema that contains the serverless task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "schema_name": {"name": "schema_name", "description": "Name of the schema that contains the serverless task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_id": {"name": "database_id", "description": "Internal/system-generated identifier for the database that contains the serverless task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_name": {"name": "database_name", "description": "Name of the database in which the task is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used": {"name": "credits_used", "description": "Total number of credits used for the task.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_serverless_task_history.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["start_time", "task_id"], "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.76597, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_serverless_task_history", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['start_time', 'task_id'],\n) }}\n\nselect\n    start_time,\n    end_time,\n    task_id,\n    task_name,\n    schema_id,\n    schema_name,\n    database_id,\n    database_name,\n    credits_used\nfrom {{ source('snowflake_account_usage', 'serverless_task_history') }}\n\n{% if is_incremental() %}\n    where end_time > (select dateadd(day, -3, coalesce(max(end_time), '1970-01-01') ) from {{ this }})\n{% endif %}\n\norder by start_time", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "serverless_task_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_serverless_task_history.sql", "compiled": true, "compiled_code": "\n\nselect\n    start_time,\n    end_time,\n    task_id,\n    task_name,\n    schema_id,\n    schema_name,\n    database_id,\n    database_name,\n    credits_used\nfrom snowflake.account_usage.serverless_task_history\n\n\n    where end_time > (select dateadd(day, -3, coalesce(max(end_time), '1970-01-01') ) from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_serverless_task_history)\n\n\norder by start_time", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_access_history": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_access_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_access_history.sql", "original_file_path": "models/staging/stg_access_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_access_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_access_history"], "alias": "stg_access_history", "checksum": {"name": "sha256", "checksum": "867a63d9efdd151ef570a5a022340ebc668743e7cfe1ea698a8e83fe5dd735fc"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html", "columns": {"query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "direct_objects_accessed": {"name": "direct_objects_accessed", "description": "A JSON array of data objects such as tables, views, and columns directly named in the query explicitly or through shortcuts such as using an asterisk (i.e. *). Virtual columns can be returned in this field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "base_objects_accessed": {"name": "base_objects_accessed", "description": "A JSON array of all base data objects, specifically, columns of tables to execute the query. This field specifies view names or view columns, including virtual columns, if a shared view is accessed in a data sharing consumer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "objects_modified": {"name": "objects_modified", "description": "A JSON array that specifies the objects that were associated with a write operation in the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_access_history.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.763998, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_access_history", "raw_code": "{{ config(materialized='incremental') }}\n\nselect\n    query_id,\n    parent_query_id,\n    root_query_id,\n    query_start_time,\n    user_name,\n    direct_objects_accessed,\n    base_objects_accessed,\n    objects_modified\nfrom {{ source('snowflake_account_usage', 'access_history') }}\n\n{% if is_incremental() %}\n    where query_start_time > (select coalesce(max(query_start_time), '1970-01-01') from {{ this }})\n{% endif %}\n\norder by query_start_time asc", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "access_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.access_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_access_history.sql", "compiled": true, "compiled_code": "\n\nselect\n    query_id,\n    parent_query_id,\n    root_query_id,\n    query_start_time,\n    user_name,\n    direct_objects_accessed,\n    base_objects_accessed,\n    objects_modified\nfrom snowflake.account_usage.access_history\n\n\n    where query_start_time > (select coalesce(max(query_start_time), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_access_history)\n\n\norder by query_start_time asc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_rate_sheet_daily": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_rate_sheet_daily", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_rate_sheet_daily.sql", "original_file_path": "models/staging/stg_rate_sheet_daily.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_rate_sheet_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_rate_sheet_daily"], "alias": "stg_rate_sheet_daily", "checksum": {"name": "sha256", "checksum": "f2e961ae5cffdde933879fafa27c80131b7e7fa162d752ed9853e0ce8f6fa710"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A materialized copy of the snowflake.organization.rate_sheet_daily view. It can be used to get the effective rates used for calculating usage in the organization currency based on credits used for all Snowflake accounts in your organization. It contains 1 row per day per rate in Snowflake account (some days can have more than 1 rate for a given usage_type, usually when the contract is updated).", "columns": {"date": {"name": "date", "description": "Date (in the UTC time zone) for the effective price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "organization_name": {"name": "organization_name", "description": "Name of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "contract_number": {"name": "contract_number", "description": "Snowflake contract number for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_name": {"name": "account_name", "description": "Name of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_locator": {"name": "account_locator", "description": "Locator for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "region": {"name": "region", "description": "Name of the region where the account is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_level": {"name": "service_level", "description": "Service level of the Snowflake account (Standard, Enterprise, Business Critical, etc.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_type": {"name": "usage_type", "description": "The type of usage, which can be one of compute, storage, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The currency of the effective_rate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "effective_rate": {"name": "effective_rate", "description": "The rate after applying any applicable discounts per the contract for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_type": {"name": "service_type", "description": "The type of service, which can be one of compute or storage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_rate_sheet_daily.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.7646668, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_rate_sheet_daily", "raw_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n{{ config(materialized='table') }}\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_type,\n    currency,\n    effective_rate,\n    service_type\nfrom {{ source('snowflake_organization_usage', 'rate_sheet_daily') }}\norder by date", "language": "sql", "refs": [], "sources": [["snowflake_organization_usage", "rate_sheet_daily"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_rate_sheet_daily.sql", "compiled": true, "compiled_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_type,\n    currency,\n    effective_rate,\n    service_type\nfrom snowflake.organization_usage.rate_sheet_daily\norder by date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_metering_history": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_metering_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_metering_history.sql", "original_file_path": "models/staging/stg_metering_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_metering_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_metering_history"], "alias": "stg_metering_history", "checksum": {"name": "sha256", "checksum": "79f33b37161e31cb72ff65419a68166de7b44cece8321afb5757be1ec29e5397"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/metering_history.html", "columns": {"name": {"name": "name", "description": "Name of the service type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used_compute": {"name": "credits_used_compute", "description": "Number of credits used for virtual warehouses in the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_time": {"name": "start_time", "description": "The date and beginning of the hour (in the UTC time zone) in which the usage took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "service_type": {"name": "service_type", "description": "The type of service, which can be one of AUTO_CLUSTERING, MATERIALIZED_VIEW, PIPE, QUERY_ACCELERATION, REPLICATION, SEARCH_OPTIMIZATION, WAREHOUSE_METERING, or WAREHOUSE_METERING_READER.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "Number of credits used for cloud services in the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used": {"name": "credits_used", "description": "Total number of credits used for the account in the hour. This is a sum of CREDITS_USED_COMPUTE and CREDITS_USED_CLOUD_SERVICES. This value does not take into account the adjustment for cloud services, and may therefore be greater than your actual credit consumption.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_metering_history.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.7650728, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history", "raw_code": "{{ config(\n    materialized='table'\n) }}\n\nselect\n    service_type,\n    start_time,\n    end_time,\n    entity_id,\n    name,\n    credits_used_compute,\n    credits_used_cloud_services,\n    credits_used\nfrom {{ source('snowflake_account_usage', 'metering_history') }}\norder by start_time asc", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "metering_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_metering_history.sql", "compiled": true, "compiled_code": "\n\nselect\n    service_type,\n    start_time,\n    end_time,\n    entity_id,\n    name,\n    credits_used_compute,\n    credits_used_cloud_services,\n    credits_used\nfrom snowflake.account_usage.metering_history\norder by start_time asc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_metering_daily_history": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_metering_daily_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_metering_daily_history.sql", "original_file_path": "models/staging/stg_metering_daily_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_metering_daily_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_metering_daily_history"], "alias": "stg_metering_daily_history", "checksum": {"name": "sha256", "checksum": "62058467775d45b71274499ce37b064da559884b32f9bbe64a16cc5e57a5c345"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/metering_daily_history.html", "columns": {"date": {"name": "date", "description": "The date (in the UTC time zone) in which the usage took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_adjustment_cloud_services": {"name": "credits_adjustment_cloud_services", "description": "Number of credits adjusted for included cloud services. This is a negative value (e.g. -9).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_metering_daily_history.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.767688, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_daily_history", "raw_code": "{{ config(materialized='view') }}\n\nselect\n    usage_date as date,\n    service_type,\n    credits_used_cloud_services,\n    credits_adjustment_cloud_services\nfrom {{ source('snowflake_account_usage', 'metering_daily_history') }}", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "metering_daily_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_metering_daily_history.sql", "compiled": true, "compiled_code": "\n\nselect\n    usage_date as date,\n    service_type,\n    credits_used_cloud_services,\n    credits_adjustment_cloud_services\nfrom snowflake.account_usage.metering_daily_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_stage_storage_usage_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_stage_storage_usage_history.sql", "original_file_path": "models/staging/stg_stage_storage_usage_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_stage_storage_usage_history"], "alias": "stg_stage_storage_usage_history", "checksum": {"name": "sha256", "checksum": "6f88d0fb488242c440ce5b9b244b8a720811ef425ae86507551b9bf95c6cec95"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/stage_storage_usage_history.html", "columns": {"date": {"name": "date", "description": "Date of this storage usage record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_stage_bytes": {"name": "average_stage_bytes", "description": "Number of bytes of stage storage used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_stage_storage_usage_history.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.7679229, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_stage_storage_usage_history", "raw_code": "{{ config(materialized='view') }}\n\nselect\n    usage_date as date,\n    average_stage_bytes\nfrom {{ source('snowflake_account_usage', 'stage_storage_usage_history') }}", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "stage_storage_usage_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_stage_storage_usage_history.sql", "compiled": true, "compiled_code": "\n\nselect\n    usage_date as date,\n    average_stage_bytes\nfrom snowflake.account_usage.stage_storage_usage_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_database_storage_usage_history": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_database_storage_usage_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_database_storage_usage_history.sql", "original_file_path": "models/staging/stg_database_storage_usage_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_database_storage_usage_history"], "alias": "stg_database_storage_usage_history", "checksum": {"name": "sha256", "checksum": "41ad1dbe0e0083c84d9bd5280ff62e39a4c78da54aa21d6e7c264be0af45881b"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/database_storage_usage_history.html", "columns": {"date": {"name": "date", "description": "Date (in the UTC time zone) of this storage usage record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_name": {"name": "database_name", "description": "Name of the database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_database_bytes": {"name": "average_database_bytes", "description": "Number of bytes of database storage used, including data in Time Travel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_failsafe_bytes": {"name": "average_failsafe_bytes", "description": "Number of bytes of Fail-safe storage used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "average_hybrid_table_storage_bytes": {"name": "average_hybrid_table_storage_bytes", "description": "Number of bytes of hybrid storage used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_database_storage_usage_history.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.768634, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_database_storage_usage_history", "raw_code": "{{ config(materialized='view') }}\n\nselect\n    usage_date as date,\n    database_name,\n    average_database_bytes,\n    average_failsafe_bytes,\n    average_hybrid_table_storage_bytes\nfrom {{ source('snowflake_account_usage', 'database_storage_usage_history') }}", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "database_storage_usage_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_database_storage_usage_history.sql", "compiled": true, "compiled_code": "\n\nselect\n    usage_date as date,\n    database_name,\n    average_database_bytes,\n    average_failsafe_bytes,\n    average_hybrid_table_storage_bytes\nfrom snowflake.account_usage.database_storage_usage_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_warehouse_metering_history": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_warehouse_metering_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_warehouse_metering_history.sql", "original_file_path": "models/staging/stg_warehouse_metering_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_warehouse_metering_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_warehouse_metering_history"], "alias": "stg_warehouse_metering_history", "checksum": {"name": "sha256", "checksum": "67318a5999e934b76af74cee04c448af613dd4c0db0dfd866b9c8a7db34fc8c6"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["start_time", "warehouse_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "An incrementally materialized copy of the snowflake.account_usage.warehouse_metering_history view. It can be used to return the hourly credit usage for a single warehouse (or all the warehouses in your account) within the last 365 days (1 year). It contains 1 row per hour per warehouse.", "columns": {"start_time": {"name": "start_time", "description": "The date and beginning of the hour (in the UTC time zone) in which the warehouse usage took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_time": {"name": "end_time", "description": "The date and end of the hour (in the UTC time zone) in which the warehouse usage took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_id": {"name": "warehouse_id", "description": "Internal/system-generated identifier for the warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_name": {"name": "warehouse_name", "description": "Name of the warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used": {"name": "credits_used", "description": "Total number of credits used for the warehouse in the hour. This is a sum of CREDITS_USED_COMPUTE and CREDITS_USED_CLOUD_SERVICES. This value does not take into account the adjustment for cloud services, and may therefore be greater than your actual credit consumption.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used_compute": {"name": "credits_used_compute", "description": "Number of credits used for the warehouse in the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "Number of credits used for cloud services in the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_warehouse_metering_history.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["start_time", "warehouse_id"], "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.768893, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_warehouse_metering_history", "raw_code": "{{ config(\n    materialized='incremental', \n    unique_key=['start_time', 'warehouse_id'],\n) }}\n\nselect\n    start_time,\n    end_time,\n    warehouse_id,\n    warehouse_name,\n    credits_used,\n    credits_used_compute,\n    credits_used_cloud_services\nfrom {{ source('snowflake_account_usage', 'warehouse_metering_history') }}\n\n{% if is_incremental() %}\n    -- account for changing metering data\n    where end_time > (select coalesce(dateadd(day, -7, max(end_time)), '1970-01-01') from {{ this }})\n{% endif %}\n\norder by start_time", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "warehouse_metering_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_warehouse_metering_history.sql", "compiled": true, "compiled_code": "\n\nselect\n    start_time,\n    end_time,\n    warehouse_id,\n    warehouse_name,\n    credits_used,\n    credits_used_compute,\n    credits_used_cloud_services\nfrom snowflake.account_usage.warehouse_metering_history\n\n\n    -- account for changing metering data\n    where end_time > (select coalesce(dateadd(day, -7, max(end_time)), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_warehouse_metering_history)\n\n\norder by start_time", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_snowflake_monitoring.stg_query_history": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_snowflake_monitoring", "name": "stg_query_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_query_history.sql", "original_file_path": "models/staging/stg_query_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_query_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_query_history"], "alias": "stg_query_history", "checksum": {"name": "sha256", "checksum": "4b33edfda9b148bccdff5be34eeed7c7e316c447cc7d5f1a0c3e48453bc6e83f"}, "config": {"enabled": true, "alias": null, "schema": "landing_snowflake_monitoring", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["query_id", "start_time"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1E90FF"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "An incrementally materialized copy of the snowflake.account_usage.query_history view. It can be used to query Snowflake query history by various dimensions (time range, session, user, warehouse, etc.) within the last 365 days (1 year). It contains 1 row per query (query_id).", "columns": {"query_id": {"name": "query_id", "description": "Internal/system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_text": {"name": "query_text", "description": "Text of the SQL statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_id": {"name": "database_id", "description": "Internal/system-generated identifier for the database that was in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "database_name": {"name": "database_name", "description": "Database that was in use at the time of the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "schema_id": {"name": "schema_id", "description": "Internal/system-generated identifier for the schema that was in use.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "schema_name": {"name": "schema_name", "description": "Schema that was in use at the time of the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_type": {"name": "query_type", "description": "DML, query, etc. If the query failed, then the query type may be UNKNOWN.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "session_id": {"name": "session_id", "description": "Session that executed the statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_name": {"name": "user_name", "description": "User who issued the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "role_name": {"name": "role_name", "description": "Role that was active in the session at the time of the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_id": {"name": "warehouse_id", "description": "Internal/system-generated identifier for the warehouse that was used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_name": {"name": "warehouse_name", "description": "Warehouse that the query executed on, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_size": {"name": "warehouse_size", "description": "Size of the warehouse when this statement executed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "warehouse_type": {"name": "warehouse_type", "description": "Type of the warehouse when this statement executed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cluster_number": {"name": "cluster_number", "description": "The cluster (in a multi-cluster warehouse) that this statement executed on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_tag": {"name": "query_tag", "description": "Query tag set for this statement through the QUERY_TAG session parameter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_status": {"name": "execution_status", "description": "Execution status for the query. Valid values: `success`, `fail`, `incident`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_code": {"name": "error_code", "description": "Error code, if the query returned an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_message": {"name": "error_message", "description": "Error message, if the query returned an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_time": {"name": "start_time", "description": "Statement start time (in the UTC time zone). The table is naturally clustered on this column, meaning your queries will run much faster if you filter records using this column.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_time": {"name": "end_time", "description": "Statement end time (in the UTC time zone).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_elapsed_time": {"name": "total_elapsed_time", "description": "Elapsed time (in milliseconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_scanned": {"name": "bytes_scanned", "description": "Number of bytes scanned by this statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "percentage_scanned_from_cache": {"name": "percentage_scanned_from_cache", "description": "The percentage of data scanned from the local disk cache. The value ranges from 0.0 to 1.0. Multiply by 100 to get a true percentage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_written": {"name": "bytes_written", "description": "Number of bytes written (e.g. when loading into a table).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_written_to_result": {"name": "bytes_written_to_result", "description": "Number of bytes written to a result object. For example, `select * from . . .` would produce a set of results in tabular format representing each field in the selection. In general, the results object represents whatever is produced as a result of the query, and BYTES_WRITTEN_TO_RESULT represents the size of the returned result.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_read_from_result": {"name": "bytes_read_from_result", "description": "Number of bytes read from a result object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_produced": {"name": "rows_produced", "description": "Number of rows produced by this statement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_inserted": {"name": "rows_inserted", "description": "Number of rows inserted by the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_updated": {"name": "rows_updated", "description": "Number of rows updated by the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_deleted": {"name": "rows_deleted", "description": "Number of rows deleted by the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rows_unloaded": {"name": "rows_unloaded", "description": "Number of rows unloaded during data export.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_deleted": {"name": "bytes_deleted", "description": "Number of bytes deleted by the query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "partitions_scanned": {"name": "partitions_scanned", "description": "Number of micro-partitions scanned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "partitions_total": {"name": "partitions_total", "description": "Total micro-partitions of all tables included in this query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_spilled_to_local_storage": {"name": "bytes_spilled_to_local_storage", "description": "Volume of data spilled to local disk on the warehouse nodes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_spilled_to_remote_storage": {"name": "bytes_spilled_to_remote_storage", "description": "Volume of data spilled to remote disk (i.e. AWS S3, Google Cloud Storage, Azure Blob).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_sent_over_the_network": {"name": "bytes_sent_over_the_network", "description": "Volume of data sent over the network.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "compilation_time": {"name": "compilation_time", "description": "Compilation time (in milliseconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "execution_time": {"name": "execution_time", "description": "Execution time (in milliseconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "queued_provisioning_time": {"name": "queued_provisioning_time", "description": "Time (in milliseconds) spent in the warehouse queue, waiting for the warehouse compute resources to provision, due to warehouse creation, resume, or resize.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "queued_repair_time": {"name": "queued_repair_time", "description": "Time (in milliseconds) spent in the warehouse queue, waiting for compute resources in the warehouse to be repaired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "queued_overload_time": {"name": "queued_overload_time", "description": "Time (in milliseconds) spent in the warehouse queue, due to the warehouse being overloaded by the current query workload.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_blocked_time": {"name": "transaction_blocked_time", "description": "Time (in milliseconds) spent blocked by a concurrent DML.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "outbound_data_transfer_cloud": {"name": "outbound_data_transfer_cloud", "description": "Target cloud provider for statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "outbound_data_transfer_region": {"name": "outbound_data_transfer_region", "description": "Target region for statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "outbound_data_transfer_bytes": {"name": "outbound_data_transfer_bytes", "description": "Number of bytes transferred in statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_data_transfer_cloud": {"name": "inbound_data_transfer_cloud", "description": "Source cloud provider for statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_data_transfer_region": {"name": "inbound_data_transfer_region", "description": "Source region for statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inbound_data_transfer_bytes": {"name": "inbound_data_transfer_bytes", "description": "Number of bytes transferred in statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "list_external_files_time": {"name": "list_external_files_time", "description": "Time (in milliseconds) spent listing external files.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "Number of credits used for cloud services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "release_version": {"name": "release_version", "description": "Release version in the format of `<major_release>.<minor_release>.<patch_release>`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_invocations": {"name": "external_function_total_invocations", "description": "The aggregate number of times that this query called remote services. For important details, see the Usage Notes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_sent_rows": {"name": "external_function_total_sent_rows", "description": "The total number of rows that this query sent in all calls to all remote services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_received_rows": {"name": "external_function_total_received_rows", "description": "The total number of rows that this query received from all calls to all remote services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_sent_bytes": {"name": "external_function_total_sent_bytes", "description": "The total number of bytes that this query sent in all calls to all remote services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "external_function_total_received_bytes": {"name": "external_function_total_received_bytes", "description": "The total number of bytes that this query received from all calls to all remote services.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_load_percent": {"name": "query_load_percent", "description": "The approximate percentage of active compute resources in the warehouse for this query execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_client_generated_statement": {"name": "is_client_generated_statement", "description": "Indicates whether the query was client-generated. These tend to be queries from the Snowflake UI (i.e. Snowsight or the Classic Console).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_acceleration_bytes_scanned": {"name": "query_acceleration_bytes_scanned", "description": "Number of bytes scanned by the query acceleration service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_acceleration_partitions_scanned": {"name": "query_acceleration_partitions_scanned", "description": "Number of partitions scanned by the query acceleration service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_acceleration_upper_limit_scale_factor": {"name": "query_acceleration_upper_limit_scale_factor", "description": "Upper limit scale factor that a query would have benefited from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_hash": {"name": "query_hash", "description": "The hash value computed based on the canonicalized SQL text.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_hash_version": {"name": "query_hash_version", "description": "The version of the logic used to compute QUERY_HASH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_parameterized_hash": {"name": "query_parameterized_hash", "description": "The hash value computed based on the parameterized query.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "query_parameterized_hash_version": {"name": "query_parameterized_hash_version", "description": "The version of the logic used to compute QUERY_PARAMETERIZED_HASH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#1E90FF"}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_query_history.yml", "build_path": null, "unrendered_config": {"on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["query_id", "start_time"], "persist_docs": {"columns": true, "relation": true}, "schema": "landing_snowflake_monitoring", "docs": {"node_color": "#1E90FF"}}, "created_at": 1742470392.767427, "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['query_id', 'start_time'],\n) }}\n\nselect\n    query_id,\n    query_text,\n    database_id,\n    database_name,\n    schema_id,\n    schema_name,\n    query_type,\n    session_id,\n    user_name,\n    role_name,\n    warehouse_id,\n    warehouse_name,\n    warehouse_size,\n    warehouse_type,\n    cluster_number,\n    query_tag,\n    execution_status,\n    error_code,\n    error_message,\n    start_time,\n    end_time,\n    total_elapsed_time,\n    bytes_scanned,\n    percentage_scanned_from_cache,\n    bytes_written,\n    bytes_written_to_result,\n    bytes_read_from_result,\n    rows_produced,\n    rows_inserted,\n    rows_updated,\n    rows_deleted,\n    rows_unloaded,\n    bytes_deleted,\n    partitions_scanned,\n    partitions_total,\n    bytes_spilled_to_local_storage,\n    bytes_spilled_to_remote_storage,\n    bytes_sent_over_the_network,\n    compilation_time,\n    execution_time,\n    queued_provisioning_time,\n    queued_repair_time,\n    queued_overload_time,\n    transaction_blocked_time,\n    outbound_data_transfer_cloud,\n    outbound_data_transfer_region,\n    outbound_data_transfer_bytes,\n    inbound_data_transfer_cloud,\n    inbound_data_transfer_region,\n    inbound_data_transfer_bytes,\n    list_external_files_time,\n    credits_used_cloud_services,\n    release_version,\n    external_function_total_invocations,\n    external_function_total_sent_rows,\n    external_function_total_received_rows,\n    external_function_total_sent_bytes,\n    external_function_total_received_bytes,\n    query_load_percent,\n    is_client_generated_statement,\n    query_acceleration_bytes_scanned,\n    query_acceleration_partitions_scanned,\n    query_acceleration_upper_limit_scale_factor,\n    query_hash,\n    query_hash_version,\n    query_parameterized_hash,\n    query_parameterized_hash_version,\n    query_retry_time,\n    query_retry_cause,\n    fault_handling_time\nfrom {{ source('snowflake_account_usage', 'query_history') }}\n\n{% if is_incremental() %}\n    -- must use end time in case query hasn't completed\n    -- add lookback window of 2 days to account for late arriving queries\n    where end_time > (select dateadd(day, -{{ var('dbt_snowflake_monitoring_incremental_days', '2') }}, coalesce(max(end_time), '1970-01-01') ) from {{ this }})\n{% endif %}\n\norder by start_time", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "query_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.query_history"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/staging/stg_query_history.sql", "compiled": true, "compiled_code": "\n\nselect\n    query_id,\n    query_text,\n    database_id,\n    database_name,\n    schema_id,\n    schema_name,\n    query_type,\n    session_id,\n    user_name,\n    role_name,\n    warehouse_id,\n    warehouse_name,\n    warehouse_size,\n    warehouse_type,\n    cluster_number,\n    query_tag,\n    execution_status,\n    error_code,\n    error_message,\n    start_time,\n    end_time,\n    total_elapsed_time,\n    bytes_scanned,\n    percentage_scanned_from_cache,\n    bytes_written,\n    bytes_written_to_result,\n    bytes_read_from_result,\n    rows_produced,\n    rows_inserted,\n    rows_updated,\n    rows_deleted,\n    rows_unloaded,\n    bytes_deleted,\n    partitions_scanned,\n    partitions_total,\n    bytes_spilled_to_local_storage,\n    bytes_spilled_to_remote_storage,\n    bytes_sent_over_the_network,\n    compilation_time,\n    execution_time,\n    queued_provisioning_time,\n    queued_repair_time,\n    queued_overload_time,\n    transaction_blocked_time,\n    outbound_data_transfer_cloud,\n    outbound_data_transfer_region,\n    outbound_data_transfer_bytes,\n    inbound_data_transfer_cloud,\n    inbound_data_transfer_region,\n    inbound_data_transfer_bytes,\n    list_external_files_time,\n    credits_used_cloud_services,\n    release_version,\n    external_function_total_invocations,\n    external_function_total_sent_rows,\n    external_function_total_received_rows,\n    external_function_total_sent_bytes,\n    external_function_total_received_bytes,\n    query_load_percent,\n    is_client_generated_statement,\n    query_acceleration_bytes_scanned,\n    query_acceleration_partitions_scanned,\n    query_acceleration_upper_limit_scale_factor,\n    query_hash,\n    query_hash_version,\n    query_parameterized_hash,\n    query_parameterized_hash_version,\n    query_retry_time,\n    query_retry_cause,\n    fault_handling_time\nfrom snowflake.account_usage.query_history\n\n\n    -- must use end time in case query hasn't completed\n    -- add lookback window of 2 days to account for late arriving queries\n    where end_time > (select dateadd(day, -2, coalesce(max(end_time), '1970-01-01') ) from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history)\n\n\norder by start_time", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "operation.dbt_constraints.dbt_constraints-on-run-end-0": {"database": "fasttrack_cost_reporting_dev", "schema": "public", "name": "dbt_constraints-on-run-end-0", "resource_type": "operation", "package_name": "dbt_constraints", "path": "hooks/dbt_constraints-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "fqn": ["dbt_constraints", "hooks", "dbt_constraints-on-run-end-0"], "alias": "dbt_constraints-on-run-end-0", "checksum": {"name": "sha256", "checksum": "7f5fba13a435f75dfd9bf1b5c15d80141a4e0d60ea500ffee371ca679ea5b244"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1742470392.57109, "relation_name": null, "raw_code": "{{ dbt_constraints.create_constraints() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.create_constraints"], "nodes": []}, "compiled_path": null, "compiled": true, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.fasttrack_cost_reporting.not_null_stg_azure_daily_exports_ingested_at.b7fae96aec": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_azure_daily_exports_ingested_at", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_azure_daily_exports_ingested_at.sql", "original_file_path": "models/staging/azure/stg_azure_daily_exports.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_azure_daily_exports_ingested_at.b7fae96aec", "fqn": ["fasttrack_cost_reporting", "staging", "azure", "not_null_stg_azure_daily_exports_ingested_at"], "alias": "not_null_stg_azure_daily_exports_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.6248262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_azure_daily_exports", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_azure_daily_exports"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/azure/stg_azure_daily_exports.yml/not_null_stg_azure_daily_exports_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.stg_azure_daily_exports", "attached_node": "model.fasttrack_cost_reporting.stg_azure_daily_exports", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('stg_azure_daily_exports')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_azure_daily_exports_unique_key.327a7440f8": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_stg_azure_daily_exports_unique_key", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "dbt_constraints_primary_key_stg_azure_daily_exports_unique_key.sql", "original_file_path": "models/staging/azure/stg_azure_daily_exports.yml", "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_azure_daily_exports_unique_key.327a7440f8", "fqn": ["fasttrack_cost_reporting", "staging", "azure", "dbt_constraints_primary_key_stg_azure_daily_exports_unique_key"], "alias": "dbt_constraints_primary_key_stg_azure_daily_exports_unique_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.625366, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_azure_daily_exports", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_azure_daily_exports"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/azure/stg_azure_daily_exports.yml/dbt_constraints_primary_key_stg_azure_daily_exports_unique_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_key", "file_key_name": "models.stg_azure_daily_exports", "attached_node": "model.fasttrack_cost_reporting.stg_azure_daily_exports", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "unique_key", "model": "{{ get_where_subquery(ref('stg_azure_daily_exports')) }}"}, "namespace": "dbt_constraints"}}, "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_platform.9a315c9cfe": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_platform_references_additional_costs_platform", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_platform_references_additional_costs_platform.sql", "original_file_path": "models/staging/platform/stg_platform_references_additional_costs.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_platform.9a315c9cfe", "fqn": ["fasttrack_cost_reporting", "staging", "platform", "not_null_stg_platform_references_additional_costs_platform"], "alias": "not_null_stg_platform_references_additional_costs_platform", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.6338718, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_platform_references_additional_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/platform/stg_platform_references_additional_costs.yml/not_null_stg_platform_references_additional_costs_platform.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect platform\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\nwhere platform is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "platform", "file_key_name": "models.stg_platform_references_additional_costs", "attached_node": "model.fasttrack_cost_reporting.stg_platform_references_additional_costs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "platform", "model": "{{ get_where_subquery(ref('stg_platform_references_additional_costs')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_billing_date.aa8675ce9f": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_platform_references_additional_costs_billing_date", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_platform_references_additional_costs_billing_date.sql", "original_file_path": "models/staging/platform/stg_platform_references_additional_costs.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_billing_date.aa8675ce9f", "fqn": ["fasttrack_cost_reporting", "staging", "platform", "not_null_stg_platform_references_additional_costs_billing_date"], "alias": "not_null_stg_platform_references_additional_costs_billing_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.634312, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_platform_references_additional_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/platform/stg_platform_references_additional_costs.yml/not_null_stg_platform_references_additional_costs_billing_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billing_date\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\nwhere billing_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "billing_date", "file_key_name": "models.stg_platform_references_additional_costs", "attached_node": "model.fasttrack_cost_reporting.stg_platform_references_additional_costs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "billing_date", "model": "{{ get_where_subquery(ref('stg_platform_references_additional_costs')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_resource.9efadf8ebf": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_platform_references_additional_costs_resource", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_platform_references_additional_costs_resource.sql", "original_file_path": "models/staging/platform/stg_platform_references_additional_costs.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_resource.9efadf8ebf", "fqn": ["fasttrack_cost_reporting", "staging", "platform", "not_null_stg_platform_references_additional_costs_resource"], "alias": "not_null_stg_platform_references_additional_costs_resource", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.635201, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_platform_references_additional_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/platform/stg_platform_references_additional_costs.yml/not_null_stg_platform_references_additional_costs_resource.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect resource\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\nwhere resource is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "resource", "file_key_name": "models.stg_platform_references_additional_costs", "attached_node": "model.fasttrack_cost_reporting.stg_platform_references_additional_costs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "resource", "model": "{{ get_where_subquery(ref('stg_platform_references_additional_costs')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_spend.af4fa432a5": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_platform_references_additional_costs_spend", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_platform_references_additional_costs_spend.sql", "original_file_path": "models/staging/platform/stg_platform_references_additional_costs.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_spend.af4fa432a5", "fqn": ["fasttrack_cost_reporting", "staging", "platform", "not_null_stg_platform_references_additional_costs_spend"], "alias": "not_null_stg_platform_references_additional_costs_spend", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.635613, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_platform_references_additional_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/platform/stg_platform_references_additional_costs.yml/not_null_stg_platform_references_additional_costs_spend.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\nwhere spend is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "spend", "file_key_name": "models.stg_platform_references_additional_costs", "attached_node": "model.fasttrack_cost_reporting.stg_platform_references_additional_costs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "spend", "model": "{{ get_where_subquery(ref('stg_platform_references_additional_costs')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_platform_references_additional_costs_unique_key.fe1824bcd0": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_stg_platform_references_additional_costs_unique_key", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "dbt_constraints_primary_key_st_73d49a78281cf5bff738996740082897.sql", "original_file_path": "models/staging/platform/stg_platform_references_additional_costs.yml", "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_platform_references_additional_costs_unique_key.fe1824bcd0", "fqn": ["fasttrack_cost_reporting", "staging", "platform", "dbt_constraints_primary_key_stg_platform_references_additional_costs_unique_key"], "alias": "dbt_constraints_primary_key_st_73d49a78281cf5bff738996740082897", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_st_73d49a78281cf5bff738996740082897", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}, "alias": "dbt_constraints_primary_key_st_73d49a78281cf5bff738996740082897"}, "created_at": 1742470392.63604, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_st_73d49a78281cf5bff738996740082897\") }}", "language": "sql", "refs": [{"name": "stg_platform_references_additional_costs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/platform/stg_platform_references_additional_costs.yml/dbt_constraints_primary_key_st_73d49a78281cf5bff738996740082897.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_key", "file_key_name": "models.stg_platform_references_additional_costs", "attached_node": "model.fasttrack_cost_reporting.stg_platform_references_additional_costs", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "unique_key", "model": "{{ get_where_subquery(ref('stg_platform_references_additional_costs')) }}"}, "namespace": "dbt_constraints"}}, "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_id.88c5e2ab29": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_snowflake_account_pipe_usage_history_pipe_id", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_snowflake_account_pipe_usage_history_pipe_id.sql", "original_file_path": "models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_id.88c5e2ab29", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "account_usage", "not_null_stg_snowflake_account_pipe_usage_history_pipe_id"], "alias": "not_null_stg_snowflake_account_pipe_usage_history_pipe_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.670553, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_snowflake_account_pipe_usage_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml/not_null_stg_snowflake_account_pipe_usage_history_pipe_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pipe_id\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\nwhere pipe_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pipe_id", "file_key_name": "models.stg_snowflake_account_pipe_usage_history", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pipe_id", "model": "{{ get_where_subquery(ref('stg_snowflake_account_pipe_usage_history')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_name.9163515cfb": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_snowflake_account_pipe_usage_history_pipe_name", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_snowflake_account_pipe_usage_history_pipe_name.sql", "original_file_path": "models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_name.9163515cfb", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "account_usage", "not_null_stg_snowflake_account_pipe_usage_history_pipe_name"], "alias": "not_null_stg_snowflake_account_pipe_usage_history_pipe_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.670992, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_snowflake_account_pipe_usage_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml/not_null_stg_snowflake_account_pipe_usage_history_pipe_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pipe_name\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\nwhere pipe_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pipe_name", "file_key_name": "models.stg_snowflake_account_pipe_usage_history", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pipe_name", "model": "{{ get_where_subquery(ref('stg_snowflake_account_pipe_usage_history')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_start_time.47804d07ac": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_snowflake_account_pipe_usage_history_start_time", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_snowflake_account_pipe_usage_history_start_time.sql", "original_file_path": "models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_start_time.47804d07ac", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "account_usage", "not_null_stg_snowflake_account_pipe_usage_history_start_time"], "alias": "not_null_stg_snowflake_account_pipe_usage_history_start_time", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.6713998, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_snowflake_account_pipe_usage_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml/not_null_stg_snowflake_account_pipe_usage_history_start_time.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_time\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\nwhere start_time is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "start_time", "file_key_name": "models.stg_snowflake_account_pipe_usage_history", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_time", "model": "{{ get_where_subquery(ref('stg_snowflake_account_pipe_usage_history')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_credits_used.20ecc634fe": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_snowflake_account_pipe_usage_history_credits_used", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_snowflake_account_pipe_usage_history_credits_used.sql", "original_file_path": "models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_credits_used.20ecc634fe", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "account_usage", "not_null_stg_snowflake_account_pipe_usage_history_credits_used"], "alias": "not_null_stg_snowflake_account_pipe_usage_history_credits_used", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.6719081, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_snowflake_account_pipe_usage_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml/not_null_stg_snowflake_account_pipe_usage_history_credits_used.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credits_used\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\nwhere credits_used is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credits_used", "file_key_name": "models.stg_snowflake_account_pipe_usage_history", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credits_used", "model": "{{ get_where_subquery(ref('stg_snowflake_account_pipe_usage_history')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_account_pipe_usage_history_unique_key.04d5b1cccb": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_stg_snowflake_account_pipe_usage_history_unique_key", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "dbt_constraints_primary_key_st_96a6276ade1b871bd1c27f294ffccb10.sql", "original_file_path": "models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml", "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_account_pipe_usage_history_unique_key.04d5b1cccb", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "account_usage", "dbt_constraints_primary_key_stg_snowflake_account_pipe_usage_history_unique_key"], "alias": "dbt_constraints_primary_key_st_96a6276ade1b871bd1c27f294ffccb10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_st_96a6276ade1b871bd1c27f294ffccb10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}, "alias": "dbt_constraints_primary_key_st_96a6276ade1b871bd1c27f294ffccb10"}, "created_at": 1742470392.6723368, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_st_96a6276ade1b871bd1c27f294ffccb10\") }}", "language": "sql", "refs": [{"name": "stg_snowflake_account_pipe_usage_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/account_usage/stg_snowflake_account_pipe_usage_history.yml/dbt_constraints_primary_key_st_96a6276ade1b871bd1c27f294ffccb10.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_key", "file_key_name": "models.stg_snowflake_account_pipe_usage_history", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "unique_key", "model": "{{ get_where_subquery(ref('stg_snowflake_account_pipe_usage_history')) }}"}, "namespace": "dbt_constraints"}}, "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_ref_date.0f932b0a21": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_snowflake_monitoring_daily_rates_ref_date", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_snowflake_monitoring_daily_rates_ref_date.sql", "original_file_path": "models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_rates.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_ref_date.0f932b0a21", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "monitoring_package", "not_null_stg_snowflake_monitoring_daily_rates_ref_date"], "alias": "not_null_stg_snowflake_monitoring_daily_rates_ref_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.6775491, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_snowflake_monitoring_daily_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_rates.yml/not_null_stg_snowflake_monitoring_daily_rates_ref_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ref_date\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_rates\nwhere ref_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ref_date", "file_key_name": "models.stg_snowflake_monitoring_daily_rates", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ref_date", "model": "{{ get_where_subquery(ref('stg_snowflake_monitoring_daily_rates')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_effective_rate.af4aa13c9e": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_snowflake_monitoring_daily_rates_effective_rate", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_snowflake_monitoring_daily_rates_effective_rate.sql", "original_file_path": "models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_rates.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_effective_rate.af4aa13c9e", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "monitoring_package", "not_null_stg_snowflake_monitoring_daily_rates_effective_rate"], "alias": "not_null_stg_snowflake_monitoring_daily_rates_effective_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.677952, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_snowflake_monitoring_daily_rates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_rates.yml/not_null_stg_snowflake_monitoring_daily_rates_effective_rate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect effective_rate\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_rates\nwhere effective_rate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "effective_rate", "file_key_name": "models.stg_snowflake_monitoring_daily_rates", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "effective_rate", "model": "{{ get_where_subquery(ref('stg_snowflake_monitoring_daily_rates')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_ref_date.7a60765288": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_snowflake_monitoring_daily_spend_ref_date", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_snowflake_monitoring_daily_spend_ref_date.sql", "original_file_path": "models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_ref_date.7a60765288", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "monitoring_package", "not_null_stg_snowflake_monitoring_daily_spend_ref_date"], "alias": "not_null_stg_snowflake_monitoring_daily_spend_ref_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.6795342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_snowflake_monitoring_daily_spend", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.yml/not_null_stg_snowflake_monitoring_daily_spend_ref_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ref_date\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend\nwhere ref_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ref_date", "file_key_name": "models.stg_snowflake_monitoring_daily_spend", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ref_date", "model": "{{ get_where_subquery(ref('stg_snowflake_monitoring_daily_spend')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_service.9b10de093f": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_snowflake_monitoring_daily_spend_service", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_snowflake_monitoring_daily_spend_service.sql", "original_file_path": "models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_service.9b10de093f", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "monitoring_package", "not_null_stg_snowflake_monitoring_daily_spend_service"], "alias": "not_null_stg_snowflake_monitoring_daily_spend_service", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.679946, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_snowflake_monitoring_daily_spend", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.yml/not_null_stg_snowflake_monitoring_daily_spend_service.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect service\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend\nwhere service is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "service", "file_key_name": "models.stg_snowflake_monitoring_daily_spend", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "service", "model": "{{ get_where_subquery(ref('stg_snowflake_monitoring_daily_spend')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_spend.2260f1a9a9": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_stg_snowflake_monitoring_daily_spend_spend", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_stg_snowflake_monitoring_daily_spend_spend.sql", "original_file_path": "models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.yml", "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_spend.2260f1a9a9", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "monitoring_package", "not_null_stg_snowflake_monitoring_daily_spend_spend"], "alias": "not_null_stg_snowflake_monitoring_daily_spend_spend", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.680379, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_snowflake_monitoring_daily_spend", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.yml/not_null_stg_snowflake_monitoring_daily_spend_spend.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend\nwhere spend is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "spend", "file_key_name": "models.stg_snowflake_monitoring_daily_spend", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "spend", "model": "{{ get_where_subquery(ref('stg_snowflake_monitoring_daily_spend')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_monitoring_daily_spend_unique_key.65e22c6801": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_stg_snowflake_monitoring_daily_spend_unique_key", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "dbt_constraints_primary_key_st_53ccc19ec28741edd91e65d0b9f7fd9c.sql", "original_file_path": "models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.yml", "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_monitoring_daily_spend_unique_key.65e22c6801", "fqn": ["fasttrack_cost_reporting", "staging", "snowflake", "monitoring_package", "dbt_constraints_primary_key_stg_snowflake_monitoring_daily_spend_unique_key"], "alias": "dbt_constraints_primary_key_st_53ccc19ec28741edd91e65d0b9f7fd9c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_st_53ccc19ec28741edd91e65d0b9f7fd9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}, "alias": "dbt_constraints_primary_key_st_53ccc19ec28741edd91e65d0b9f7fd9c"}, "created_at": 1742470392.680777, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_st_53ccc19ec28741edd91e65d0b9f7fd9c\") }}", "language": "sql", "refs": [{"name": "stg_snowflake_monitoring_daily_spend", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/staging/snowflake/monitoring_package/stg_snowflake_monitoring_daily_spend.yml/dbt_constraints_primary_key_st_53ccc19ec28741edd91e65d0b9f7fd9c.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_key", "file_key_name": "models.stg_snowflake_monitoring_daily_spend", "attached_node": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "unique_key", "model": "{{ get_where_subquery(ref('stg_snowflake_monitoring_daily_spend')) }}"}, "namespace": "dbt_constraints"}}, "test.fasttrack_cost_reporting.dbt_constraints_primary_key_f_cost_reporting_unique_key.60890aab9f": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_f_cost_reporting_unique_key", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "dbt_constraints_primary_key_f_cost_reporting_unique_key.sql", "original_file_path": "models/publish/facts/f_cost_reporting.yaml", "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_f_cost_reporting_unique_key.60890aab9f", "fqn": ["fasttrack_cost_reporting", "publish", "facts", "dbt_constraints_primary_key_f_cost_reporting_unique_key"], "alias": "dbt_constraints_primary_key_f_cost_reporting_unique_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.740204, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_cost_reporting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.f_cost_reporting"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/publish/facts/f_cost_reporting.yaml/dbt_constraints_primary_key_f_cost_reporting_unique_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_key", "file_key_name": "models.f_cost_reporting", "attached_node": "model.fasttrack_cost_reporting.f_cost_reporting", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "unique_key", "model": "{{ get_where_subquery(ref('f_cost_reporting')) }}"}, "namespace": "dbt_constraints"}}, "test.fasttrack_cost_reporting.not_null_f_cost_reporting_platform.b2a4d8740e": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_f_cost_reporting_platform", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_f_cost_reporting_platform.sql", "original_file_path": "models/publish/facts/f_cost_reporting.yaml", "unique_id": "test.fasttrack_cost_reporting.not_null_f_cost_reporting_platform.b2a4d8740e", "fqn": ["fasttrack_cost_reporting", "publish", "facts", "not_null_f_cost_reporting_platform"], "alias": "not_null_f_cost_reporting_platform", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.741451, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_cost_reporting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.f_cost_reporting"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/publish/facts/f_cost_reporting.yaml/not_null_f_cost_reporting_platform.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect platform\nfrom fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\nwhere platform is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "platform", "file_key_name": "models.f_cost_reporting", "attached_node": "model.fasttrack_cost_reporting.f_cost_reporting", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "platform", "model": "{{ get_where_subquery(ref('f_cost_reporting')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_f_cost_reporting_billingdate.d5e3ce003d": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_f_cost_reporting_billingdate", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_f_cost_reporting_billingdate.sql", "original_file_path": "models/publish/facts/f_cost_reporting.yaml", "unique_id": "test.fasttrack_cost_reporting.not_null_f_cost_reporting_billingdate.d5e3ce003d", "fqn": ["fasttrack_cost_reporting", "publish", "facts", "not_null_f_cost_reporting_billingdate"], "alias": "not_null_f_cost_reporting_billingdate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.741934, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_cost_reporting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.f_cost_reporting"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/publish/facts/f_cost_reporting.yaml/not_null_f_cost_reporting_billingdate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billingdate\nfrom fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\nwhere billingdate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "billingdate", "file_key_name": "models.f_cost_reporting", "attached_node": "model.fasttrack_cost_reporting.f_cost_reporting", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "billingdate", "model": "{{ get_where_subquery(ref('f_cost_reporting')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_f_cost_reporting_granularity.929559885d": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_f_cost_reporting_granularity", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_f_cost_reporting_granularity.sql", "original_file_path": "models/publish/facts/f_cost_reporting.yaml", "unique_id": "test.fasttrack_cost_reporting.not_null_f_cost_reporting_granularity.929559885d", "fqn": ["fasttrack_cost_reporting", "publish", "facts", "not_null_f_cost_reporting_granularity"], "alias": "not_null_f_cost_reporting_granularity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.742353, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_cost_reporting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.f_cost_reporting"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/publish/facts/f_cost_reporting.yaml/not_null_f_cost_reporting_granularity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect granularity\nfrom fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\nwhere granularity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "granularity", "file_key_name": "models.f_cost_reporting", "attached_node": "model.fasttrack_cost_reporting.f_cost_reporting", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "granularity", "model": "{{ get_where_subquery(ref('f_cost_reporting')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.accepted_values_f_cost_reporting_granularity__True__daily__weekly__monthly.df184bd1cf": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "accepted_values_f_cost_reporting_granularity__True__daily__weekly__monthly", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "accepted_values_f_cost_reporti_420a1fa3f413517319608c2740ce99b3.sql", "original_file_path": "models/publish/facts/f_cost_reporting.yaml", "unique_id": "test.fasttrack_cost_reporting.accepted_values_f_cost_reporting_granularity__True__daily__weekly__monthly.df184bd1cf", "fqn": ["fasttrack_cost_reporting", "publish", "facts", "accepted_values_f_cost_reporting_granularity__True__daily__weekly__monthly"], "alias": "accepted_values_f_cost_reporti_420a1fa3f413517319608c2740ce99b3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_f_cost_reporti_420a1fa3f413517319608c2740ce99b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}, "alias": "accepted_values_f_cost_reporti_420a1fa3f413517319608c2740ce99b3"}, "created_at": 1742470392.74278, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_f_cost_reporti_420a1fa3f413517319608c2740ce99b3\") }}", "language": "sql", "refs": [{"name": "f_cost_reporting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.f_cost_reporting"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/publish/facts/f_cost_reporting.yaml/accepted_values_f_cost_reporti_420a1fa3f413517319608c2740ce99b3.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        granularity as value_field,\n        count(*) as n_records\n\n    from fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\n    group by granularity\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'daily','weekly','monthly'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "granularity", "file_key_name": "models.f_cost_reporting", "attached_node": "model.fasttrack_cost_reporting.f_cost_reporting", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["daily", "weekly", "monthly"], "quote": true, "column_name": "granularity", "model": "{{ get_where_subquery(ref('f_cost_reporting')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.not_null_f_cost_reporting_spend.2ca305a830": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_f_cost_reporting_spend", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "not_null_f_cost_reporting_spend.sql", "original_file_path": "models/publish/facts/f_cost_reporting.yaml", "unique_id": "test.fasttrack_cost_reporting.not_null_f_cost_reporting_spend.2ca305a830", "fqn": ["fasttrack_cost_reporting", "publish", "facts", "not_null_f_cost_reporting_spend"], "alias": "not_null_f_cost_reporting_spend", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.745285, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "f_cost_reporting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.fasttrack_cost_reporting.f_cost_reporting"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/publish/facts/f_cost_reporting.yaml/not_null_f_cost_reporting_spend.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect spend\nfrom fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\nwhere spend is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "spend", "file_key_name": "models.f_cost_reporting", "attached_node": "model.fasttrack_cost_reporting.f_cost_reporting", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "spend", "model": "{{ get_where_subquery(ref('f_cost_reporting')) }}"}, "namespace": null}}, "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "unique_cost_per_query_query_id", "resource_type": "test", "package_name": "dbt_snowflake_monitoring", "path": "unique_cost_per_query_query_id.sql", "original_file_path": "models/cost_per_query.yml", "unique_id": "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d", "fqn": ["dbt_snowflake_monitoring", "unique_cost_per_query_query_id"], "alias": "unique_cost_per_query_query_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.762482, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cost_per_query", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_snowflake_monitoring.cost_per_query"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/cost_per_query.yml/unique_cost_per_query_query_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    query_id as unique_field,\n    count(*) as n_records\n\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query\nwhere query_id is not null\ngroup by query_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query_id", "file_key_name": "models.cost_per_query", "attached_node": "model.dbt_snowflake_monitoring.cost_per_query", "test_metadata": {"name": "unique", "kwargs": {"column_name": "query_id", "model": "{{ get_where_subquery(ref('cost_per_query')) }}"}, "namespace": null}}, "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "not_null_cost_per_query_query_id", "resource_type": "test", "package_name": "dbt_snowflake_monitoring", "path": "not_null_cost_per_query_query_id.sql", "original_file_path": "models/cost_per_query.yml", "unique_id": "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b", "fqn": ["dbt_snowflake_monitoring", "not_null_cost_per_query_query_id"], "alias": "not_null_cost_per_query_query_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}}, "created_at": 1742470392.762974, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cost_per_query", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_snowflake_monitoring.cost_per_query"]}, "compiled_path": "target/compiled/dbt_snowflake_monitoring/models/cost_per_query.yml/not_null_cost_per_query_query_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect query_id\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query\nwhere query_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query_id", "file_key_name": "models.cost_per_query", "attached_node": "model.dbt_snowflake_monitoring.cost_per_query", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "query_id", "model": "{{ get_where_subquery(ref('cost_per_query')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_qty__varchar.699c064453": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "source_expect_column_to_be_of_type_platform_references_additional_costs_qty__varchar", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "source_expect_column_to_be_of__e2a95c1c6ae86c8d4d05aefffaedbb4d.sql", "original_file_path": "models/sources/platform_references.yml", "unique_id": "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_qty__varchar.699c064453", "fqn": ["fasttrack_cost_reporting", "sources", "source_expect_column_to_be_of_type_platform_references_additional_costs_qty__varchar"], "alias": "source_expect_column_to_be_of__e2a95c1c6ae86c8d4d05aefffaedbb4d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_expect_column_to_be_of__e2a95c1c6ae86c8d4d05aefffaedbb4d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}, "severity": "warn", "alias": "source_expect_column_to_be_of__e2a95c1c6ae86c8d4d05aefffaedbb4d"}, "created_at": 1742470392.779968, "relation_name": null, "raw_code": "{{ test_expect_column_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"source_expect_column_to_be_of__e2a95c1c6ae86c8d4d05aefffaedbb4d\") }}", "language": "sql", "refs": [], "sources": [["platform_references", "additional_costs"]], "metrics": [], "depends_on": {"macros": ["macro.fasttrack_cost_reporting.test_expect_column_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.fasttrack_cost_reporting.platform_references.additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/sources/platform_references.yml/source_expect_column_to_be_of__e2a95c1c6ae86c8d4d05aefffaedbb4d.sql", "compiled": true, "compiled_code": "\n\nselect left(system$typeof(col), 7) as data_type from (\n  select max(qty) as col from fasttrack_cost_reporting_dev.reference_cost_reporting.fasttrack_additional_platform_costs\n)\nwhere data_type not ilike 'varchar%'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "qty", "file_key_name": "sources.platform_references", "attached_node": null, "test_metadata": {"name": "expect_column_to_be_of_type", "kwargs": {"data_type": "varchar", "column_name": "qty", "model": "{{ get_where_subquery(source('platform_references', 'additional_costs')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_price__varchar.975636f35f": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "source_expect_column_to_be_of_type_platform_references_additional_costs_price__varchar", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "source_expect_column_to_be_of__281798e8a8e98351c0645adf1cf897dd.sql", "original_file_path": "models/sources/platform_references.yml", "unique_id": "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_price__varchar.975636f35f", "fqn": ["fasttrack_cost_reporting", "sources", "source_expect_column_to_be_of_type_platform_references_additional_costs_price__varchar"], "alias": "source_expect_column_to_be_of__281798e8a8e98351c0645adf1cf897dd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_expect_column_to_be_of__281798e8a8e98351c0645adf1cf897dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}, "severity": "warn", "alias": "source_expect_column_to_be_of__281798e8a8e98351c0645adf1cf897dd"}, "created_at": 1742470392.781726, "relation_name": null, "raw_code": "{{ test_expect_column_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"source_expect_column_to_be_of__281798e8a8e98351c0645adf1cf897dd\") }}", "language": "sql", "refs": [], "sources": [["platform_references", "additional_costs"]], "metrics": [], "depends_on": {"macros": ["macro.fasttrack_cost_reporting.test_expect_column_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.fasttrack_cost_reporting.platform_references.additional_costs"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/sources/platform_references.yml/source_expect_column_to_be_of__281798e8a8e98351c0645adf1cf897dd.sql", "compiled": true, "compiled_code": "\n\nselect left(system$typeof(col), 7) as data_type from (\n  select max(price) as col from fasttrack_cost_reporting_dev.reference_cost_reporting.fasttrack_additional_platform_costs\n)\nwhere data_type not ilike 'varchar%'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "sources.platform_references", "attached_node": null, "test_metadata": {"name": "expect_column_to_be_of_type", "kwargs": {"data_type": "varchar", "column_name": "price", "model": "{{ get_where_subquery(source('platform_references', 'additional_costs')) }}"}, "namespace": null}}, "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_azure_exports_daily_mtd_costinusd__varchar.4e3408ed13": {"database": "fasttrack_cost_reporting_dev", "schema": "dbt_test__audit", "name": "source_expect_column_to_be_of_type_azure_exports_daily_mtd_costinusd__varchar", "resource_type": "test", "package_name": "fasttrack_cost_reporting", "path": "source_expect_column_to_be_of__b7f1b84ee5ac9706dc6d741676b578bf.sql", "original_file_path": "models/sources/azure_exports.yml", "unique_id": "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_azure_exports_daily_mtd_costinusd__varchar.4e3408ed13", "fqn": ["fasttrack_cost_reporting", "sources", "source_expect_column_to_be_of_type_azure_exports_daily_mtd_costinusd__varchar"], "alias": "source_expect_column_to_be_of__b7f1b84ee5ac9706dc6d741676b578bf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_expect_column_to_be_of__b7f1b84ee5ac9706dc6d741676b578bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"node_color": "#696969"}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#696969"}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"node_color": "#696969"}, "severity": "warn", "alias": "source_expect_column_to_be_of__b7f1b84ee5ac9706dc6d741676b578bf"}, "created_at": 1742470392.784833, "relation_name": null, "raw_code": "{{ test_expect_column_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"source_expect_column_to_be_of__b7f1b84ee5ac9706dc6d741676b578bf\") }}", "language": "sql", "refs": [], "sources": [["azure_exports", "daily_mtd"]], "metrics": [], "depends_on": {"macros": ["macro.fasttrack_cost_reporting.test_expect_column_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.fasttrack_cost_reporting.azure_exports.daily_mtd"]}, "compiled_path": "target/compiled/fasttrack_cost_reporting/models/sources/azure_exports.yml/source_expect_column_to_be_of__b7f1b84ee5ac9706dc6d741676b578bf.sql", "compiled": true, "compiled_code": "\n\nselect left(system$typeof(col), 7) as data_type from (\n  select max(costinusd) as col from fasttrack_cost_reporting_dev.landing_azure_cost_data_export.dailyexportmtd\n)\nwhere data_type not ilike 'varchar%'\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "costinusd", "file_key_name": "sources.azure_exports", "attached_node": null, "test_metadata": {"name": "expect_column_to_be_of_type", "kwargs": {"data_type": "varchar", "column_name": "costinusd", "model": "{{ get_where_subquery(source('azure_exports', 'daily_mtd')) }}"}, "namespace": null}}}, "sources": {"source.fasttrack_cost_reporting.platform_references.additional_costs": {"database": "fasttrack_cost_reporting_dev", "schema": "reference_cost_reporting", "name": "additional_costs", "resource_type": "source", "package_name": "fasttrack_cost_reporting", "path": "models/sources/platform_references.yml", "original_file_path": "models/sources/platform_references.yml", "unique_id": "source.fasttrack_cost_reporting.platform_references.additional_costs", "fqn": ["fasttrack_cost_reporting", "sources", "platform_references", "additional_costs"], "source_name": "platform_references", "source_description": "Fast Track mapping tables used as primary sources (references)", "loader": "", "identifier": "fasttrack_additional_platform_costs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Fact table listing additional platform costs associated to Fast Track deployments", "columns": {"platform": {"name": "platform", "description": "Platform service provider name associated with the additional cost", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "servicecharge": {"name": "servicecharge", "description": "Classification of the service charge coming from the platform service provider", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "servicesubcharge": {"name": "servicesubcharge", "description": "Sub-classification of the service subcharge coming from the platform service provider", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billingdatefrom": {"name": "billingdatefrom", "description": "Start date of the billing period for the additional cost, must be parseable via `to_date(billingdatefrom, 'AUTO')`", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billingdateto": {"name": "billingdateto", "description": "End date of the billing period for the additional cost, must be parseable via `to_date(billingdateto, 'AUTO')`", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "qty": {"name": "qty", "description": "Quantity related to the service charge", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Price per unit of the service charge", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "Currency relative to the price per unit, attention: must be set to **USD** for now", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "granularity": {"name": "granularity", "description": "Granularity of the service charge, supported values: daily/weekly/monthly/yearly", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "fasttrack_cost_reporting_dev.reference_cost_reporting.fasttrack_additional_platform_costs", "created_at": 1742470392.784054, "unrendered_database": null, "unrendered_schema": "reference_cost_reporting"}, "source.fasttrack_cost_reporting.snowflake_account_usage.pipe_usage_history": {"database": "snowflake", "schema": "account_usage", "name": "pipe_usage_history", "resource_type": "source", "package_name": "fasttrack_cost_reporting", "path": "models/sources/snowflake_account_usage.yml", "original_file_path": "models/sources/snowflake_account_usage.yml", "unique_id": "source.fasttrack_cost_reporting.snowflake_account_usage.pipe_usage_history", "fqn": ["fasttrack_cost_reporting", "sources", "snowflake_account_usage", "pipe_usage_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "pipe_usage_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "View describing the history of data loaded into Snowflake tables using Snowpipe within the last 365 days (1 year). The view displays the history of data loaded and credits billed for your entire Snowflake account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage/pipe_usage_history)", "columns": {"pipe_id": {"name": "pipe_id", "description": "Internal/system-generated identifier for the pipe used for the data load. NULL if no pipe name was specified in the query. Each row includes the totals for all pipes in use within the time range.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pipe_name": {"name": "pipe_name", "description": "Name of the pipe. Displays NULL for the internal (hidden) pipe object used to refresh the metadata for an external table.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_time": {"name": "start_time", "description": "Start of the time (in the local time zone) range in which data loading took place.", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_time": {"name": "end_time", "description": "End of the time (in the local time zone) range in which data loading took place.", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "credits_used": {"name": "credits_used", "description": "Number of credits billed for Snowpipe data loads during the USAGE_DATE", "meta": {}, "data_type": "number(38,9)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "bytes_inserted": {"name": "bytes_inserted", "description": "Number of bytes loaded during the USAGE_DATE", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": [], "granularity": null}, "files_inserted": {"name": "files_inserted", "description": "Number of files loaded during the USAGE_DATE", "meta": {}, "data_type": "variant", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.pipe_usage_history", "created_at": 1742470392.7844238, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.fasttrack_cost_reporting.snowflake_account_usage.tags": {"database": "snowflake", "schema": "account_usage", "name": "tags", "resource_type": "source", "package_name": "fasttrack_cost_reporting", "path": "models/sources/snowflake_account_usage.yml", "original_file_path": "models/sources/snowflake_account_usage.yml", "unique_id": "source.fasttrack_cost_reporting.snowflake_account_usage.tags", "fqn": ["fasttrack_cost_reporting", "sources", "snowflake_account_usage", "tags"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "tags", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "View listing the tags being used in the current account [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage/tags)", "columns": {"tag_id": {"name": "tag_id", "description": "The local identifier of a tag", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_name": {"name": "tag_name", "description": "The name of a tag", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_schema_id": {"name": "tag_schema_id", "description": "The local identifier of the tag schema", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_schema": {"name": "tag_schema", "description": "The name of schema in which the tag exists", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_database_id": {"name": "tag_database_id", "description": "The local identifier of the database in which the tag exists", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_database": {"name": "tag_database", "description": "The name of the database in which the tag exists", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_owner": {"name": "tag_owner", "description": "The name of the role that owns the tag", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_comment": {"name": "tag_comment", "description": "Comments for the tag, if any", "meta": {}, "data_type": "variant", "constraints": [], "quote": null, "tags": [], "granularity": null}, "created": {"name": "created", "description": "Date and time when the tag was created", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_altered": {"name": "last_altered", "description": "Date and time the object was last altered by a DML, DDL, or background metadata operation", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "deleted": {"name": "deleted", "description": "Date and time when the tag was dropped, or the date and time when its parents were dropped", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "allowed_values": {"name": "allowed_values", "description": "Specifies the possible string values that can be assigned to the tag when the tag is set on an object or NULL if the tag does not have any specified allowed values.", "meta": {}, "data_type": "variant", "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_role_type": {"name": "owner_role_type", "description": "The type of role that owns the object, for example ROLE. If a Snowflake Native App owns the object, the value is APPLICATION. Snowflake returns NULL if you delete the object because a deleted object does not have an owner role.", "meta": {}, "data_type": "varchar(13)", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.tags", "created_at": 1742470392.784485, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.fasttrack_cost_reporting.snowflake_account_usage.tag_references": {"database": "snowflake", "schema": "account_usage", "name": "tag_references", "resource_type": "source", "package_name": "fasttrack_cost_reporting", "path": "models/sources/snowflake_account_usage.yml", "original_file_path": "models/sources/snowflake_account_usage.yml", "unique_id": "source.fasttrack_cost_reporting.snowflake_account_usage.tag_references", "fqn": ["fasttrack_cost_reporting", "sources", "snowflake_account_usage", "tag_references"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "tag_references", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "View used to identify associations between objects and tags on the Snowflake account. This view only records the direct relationship between the object and the tag. Tag lineage is not included in this view. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage/tag_references)", "columns": {"tag_database": {"name": "tag_database", "description": "The database in which the tag is set", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_schema": {"name": "tag_schema", "description": "The schema in which the tag is set", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_id": {"name": "tag_id", "description": "Internal/system-generated identifier for the tag, NULL for system tags", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_name": {"name": "tag_name", "description": "The name of the tag, this is the key in the key = 'value' pair of the tag", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tag_value": {"name": "tag_value", "description": "The value of tag, this is the 'value' in the key = 'value' pair of the tag", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_database": {"name": "object_database", "description": "Database name of the referenced object for database and schema objects. If the object is not a database or schema object, the value is empty.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_schema": {"name": "object_schema", "description": "Schema name of the referenced object (for schema objects). If the referenced object is not a schema object (e.g. warehouse), this value is empty.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_id": {"name": "object_id", "description": "Internal identifier of the referenced object.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_name": {"name": "object_name", "description": "Name of the referenced object if the tag association is on the object. If the tag association is on a column, Snowflake returns the parent table name.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "object_deleted": {"name": "object_deleted", "description": "Date and time when the associated object was dropped, or if the parentobject is dropped.", "meta": {}, "data_type": "timestamp_ltz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "domain": {"name": "domain", "description": "Domain of the reference object (e.g. table, view) if the tag association is on the object. For columns, the domain is COLUMN if the tag association is on a column.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "column_id": {"name": "column_id", "description": "The local identifier of the reference column; not applicable if the tag association is not a column.", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "column_name": {"name": "column_name", "description": "Name of the referenced column; not applicable if the tag association is not a column.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.tag_references", "created_at": 1742470392.78454, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.fasttrack_cost_reporting.azure_exports.daily_mtd": {"database": "fasttrack_cost_reporting_dev", "schema": "landing_azure_cost_data_export", "name": "daily_mtd", "resource_type": "source", "package_name": "fasttrack_cost_reporting", "path": "models/sources/azure_exports.yml", "original_file_path": "models/sources/azure_exports.yml", "unique_id": "source.fasttrack_cost_reporting.azure_exports.daily_mtd", "fqn": ["fasttrack_cost_reporting", "sources", "azure_exports", "daily_mtd"], "source_name": "azure_exports", "source_description": "Azure export tables used as primary sources", "loader": "", "identifier": "dailyexportmtd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Externally-managed fact table storing _\"month-to-2-days-ago\"_  Azure cost data exports, ref: [Azure Cost Management Export Data](https://learn.microsoft.com/en-us/azure/cost-management-billing/automate/understand-usage-details-fields)", "columns": {"unique_id": {"name": "unique_id", "description": "not-actually-unique identifier indicating the exported cost source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billingaccountname": {"name": "billingaccountname", "description": "Name of the billing account", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "partnername": {"name": "partnername", "description": "Name of the partner Microsoft Entra tenant", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "resellername": {"name": "resellername", "description": "The name of the reseller associated with the subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "resellermpnid": {"name": "resellermpnid", "description": "ID for the reseller associated with the subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "customertenantid": {"name": "customertenantid", "description": "Identifier of the Microsoft Entra tenant of the customer's subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "customername": {"name": "customername", "description": "Name of the Microsoft Entra tenant for the customer's subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "costcenter": {"name": "costcenter", "description": "The cost center defined for the subscription for tracking costs (only available in open billing periods for MCA accounts)", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billingperiodenddate": {"name": "billingperiodenddate", "description": "The end date of the billing period.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billingperiodstartdate": {"name": "billingperiodstartdate", "description": "The start date of the billing period", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "serviceperiodenddate": {"name": "serviceperiodenddate", "description": "The end date of the rating period that defined and locked pricing for the consumed or purchased service", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "serviceperiodstartdate": {"name": "serviceperiodstartdate", "description": "The start date of the rating period that defined and locked pricing for the consumed or purchased service", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billingdate": {"name": "billingdate", "description": "The billing date for the specified charge", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "servicefamily": {"name": "servicefamily", "description": "Service family that the service belongs to", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "productorderid": {"name": "productorderid", "description": "Unique identifier for the product order", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "productordername": {"name": "productordername", "description": "Unique name for the product order", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "consumedservice": {"name": "consumedservice", "description": "Name of the service the charge is associated with", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "meterid": {"name": "meterid", "description": "The unique identifier for the meter", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metername": {"name": "metername", "description": "The name of the meter. Purchases and Marketplace usage might be shown as blank or unassigned.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metercategory": {"name": "metercategory", "description": "Name of the classification category for the meter. For example, Cloud services and Networking. Purchases and Marketplace usage might be shown as blank or unassigned.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "metersubcategory": {"name": "metersubcategory", "description": "Name of the meter subclassification category. Purchases and Marketplace usage might be shown as blank or unassigned.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "meterregion": {"name": "meterregion", "description": "The name of the Azure region associated with the meter. It generally aligns with the resource location, except for certain global meters that are shared across regions. In such cases, the meter region indicates the primary region of the meter.\nNote: The meter is used to track the usage of specific services or resources, mainly for billing purposes. Each Azure service, resource, and region have its own billing meter ID that precisely reflects how its consumption and price are calculated.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "productid": {"name": "productid", "description": "Unique identifier for the product", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "productname": {"name": "productname", "description": "Name of the product", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscriptionid": {"name": "subscriptionid", "description": "Unique identifier for the Azure subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscriptionname": {"name": "subscriptionname", "description": "Name of the Azure subscription", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "publishertype": {"name": "publishertype", "description": "Supported values: Microsoft, Azure, AWS\u2074, Marketplace. For MCA accounts, the value can be Microsoft for first party charges and Marketplace for third party charges. For EA and pay-as-you-go accounts, the value is Azure.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "publisherid": {"name": "publisherid", "description": "The ID of the publisher. It's only available after the invoice is generated.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "publishername": {"name": "publishername", "description": "The name of the publisher. For first-party services, the value should be listed as Microsoft or Microsoft Corporation", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "resourcegroupname": {"name": "resourcegroupname", "description": "Name of the resource group the resource is in. Not all charges come from resources deployed to resource groups. Charges that don't have a resource group are shown as null or empty, Others, or Not applicable.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "resourceid": {"name": "resourceid", "description": "Unique identifier of the Azure Resource Manager resource", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "resourcelocation": {"name": "resourcelocation", "description": "The Azure region where the resource is deployed, also referred to as the datacenter location where the resource is running.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "location": {"name": "location", "description": "The normalized location used to resolve inconsistencies in region names sent by different Azure Resource Providers (RPs). The normalized location is based strictly on the resource location sent by RPs in usage data and is programmatically normalized to mitigate inconsistencies. Purchases and Marketplace usage might be shown as blank or unassigned. For example, `US East`.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "effectiveprice": {"name": "effectiveprice", "description": "The price for a given product or service representing the actual rate paid per unit", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The number of units used by the given product or service for a given day", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unitofmeasure": {"name": "unitofmeasure", "description": "The unit of measure for billing for the service. For example, compute services are billed per hour.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "chargetype": {"name": "chargetype", "description": "Indicates whether the charge represents usage (Usage), a purchase (Purchase), or a refund (Refund).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "billingcurrency": {"name": "billingcurrency", "description": "Currency associated with the billing account", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pricingcurrency": {"name": "pricingcurrency", "description": "Currency used when rating based on negotiated prices", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "costinbillingcurrency": {"name": "costinbillingcurrency", "description": "Cost of the charge in the billing currency before credits or taxes", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "costinusd": {"name": "costinusd", "description": "Cost of the charge in USD", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "exchangeratepricingtobilling": {"name": "exchangeratepricingtobilling", "description": "Exchange rate used converting cost from the pricing currency to the billing currency", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "exchangeratedate": {"name": "exchangeratedate", "description": "Date the exchange rate was established", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "serviceinfo1": {"name": "serviceinfo1", "description": "Service-specific metadata", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "serviceinfo2": {"name": "serviceinfo2", "description": "Legacy field with optional service-specific metadata", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "additionalinfo": {"name": "additionalinfo", "description": "Service-specific metadata, e.g. an image type for a virtual machine", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "tags": {"name": "tags", "description": "Tags assigned to the resource. Doesn't include resource group tags. Can be used to group or distribute costs for internal chargeback.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "paygprice": {"name": "paygprice", "description": "The market price (retail or list price) for a given product or service", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "frequency": {"name": "frequency", "description": "Indicates whether a charge is expected to repeat. Charges can either happen once (OneTime), repeat on a monthly or yearly basis (Recurring), or be based on usage (UsageBased).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "term": {"name": "term", "description": "Displays the term for the validity of the offer. For example: For reserved instances, it displays 12 months as the Term. For one-time purchases or recurring purchases, Term is one month (SaaS, Marketplace Support).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reservationid": {"name": "reservationid", "description": "Unique identifier for the purchased reservation instance.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "reservationname": {"name": "reservationname", "description": "Name of the purchased reservation instance.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pricingmodel": {"name": "pricingmodel", "description": "Identifier that indicates how the meter is priced. (Values: OnDemand, Reservation, Spot, and SavingsPlan)", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "unitprice": {"name": "unitprice", "description": "The price for a given product or service inclusive of any negotiated discount on top of the market price", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "benefitid": {"name": "benefitid", "description": "Unique identifier for the purchased savings plan instance", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "benefitname": {"name": "benefitname", "description": "Unique identifier for the purchased savings plan instance", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "provider": {"name": "provider", "description": "Identifier for product category or Line of Business. For example, Azure, Microsoft 365, and AWS.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscription": {"name": "subscription", "description": "Unique identifier for the Azure subscription.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "path": {"name": "path", "description": "snowpipe-sourced ingestion resource path", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_date": {"name": "ingested_date", "description": "snowpipe-sourced date indicating the UTC *start* of the data load", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "snowpipe-sourced timestamp indicating the UTC *start* of the data load", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "batch_timestamp": {"name": "batch_timestamp", "description": "snowpipe-sourced complimentary ingestion timestamp indicating start of batch loading, in UTC", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "fasttrack_cost_reporting_dev.landing_azure_cost_data_export.dailyexportmtd", "created_at": 1742470392.785882, "unrendered_database": null, "unrendered_schema": "landing_azure_cost_data_export"}, "source.dbt_snowflake_monitoring.snowflake_account_usage.access_history": {"database": "snowflake", "schema": "account_usage", "name": "access_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.access_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "access_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "access_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.access_history", "created_at": 1742470392.791959, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history": {"database": "snowflake", "schema": "account_usage", "name": "database_storage_usage_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "database_storage_usage_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "database_storage_usage_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.database_storage_usage_history", "created_at": 1742470392.792091, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history": {"database": "snowflake", "schema": "account_usage", "name": "metering_daily_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "metering_daily_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "metering_daily_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.metering_daily_history", "created_at": 1742470392.792207, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history": {"database": "snowflake", "schema": "account_usage", "name": "metering_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "metering_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "metering_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.metering_history", "created_at": 1742470392.792317, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.dbt_snowflake_monitoring.snowflake_account_usage.query_history": {"database": "snowflake", "schema": "account_usage", "name": "query_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.query_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "query_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "query_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1742470392.7924259, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history": {"database": "snowflake", "schema": "account_usage", "name": "serverless_task_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "serverless_task_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "serverless_task_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.serverless_task_history", "created_at": 1742470392.792535, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history": {"database": "snowflake", "schema": "account_usage", "name": "stage_storage_usage_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "stage_storage_usage_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "stage_storage_usage_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.stage_storage_usage_history", "created_at": 1742470392.792643, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history": {"database": "snowflake", "schema": "account_usage", "name": "warehouse_events_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "warehouse_events_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "warehouse_events_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.warehouse_events_history", "created_at": 1742470392.7927492, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history": {"database": "snowflake", "schema": "account_usage", "name": "warehouse_metering_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "warehouse_metering_history"], "source_name": "snowflake_account_usage", "source_description": "Source over native schema `snowflake.account_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/account-usage)", "loader": "", "identifier": "warehouse_metering_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.warehouse_metering_history", "created_at": 1742470392.792856, "unrendered_database": "snowflake", "unrendered_schema": "account_usage"}, "source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily": {"database": "snowflake", "schema": "organization_usage", "name": "rate_sheet_daily", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_organization_usage", "rate_sheet_daily"], "source_name": "snowflake_organization_usage", "source_description": "Source over native schema `snowflake.organization_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/organization-usage)", "loader": "", "identifier": "rate_sheet_daily", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.organization_usage.rate_sheet_daily", "created_at": 1742470392.7929401, "unrendered_database": "snowflake", "unrendered_schema": "organization_usage"}, "source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily": {"database": "snowflake", "schema": "organization_usage", "name": "remaining_balance_daily", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_organization_usage", "remaining_balance_daily"], "source_name": "snowflake_organization_usage", "source_description": "Source over native schema `snowflake.organization_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/organization-usage)", "loader": "", "identifier": "remaining_balance_daily", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.organization_usage.remaining_balance_daily", "created_at": 1742470392.793014, "unrendered_database": "snowflake", "unrendered_schema": "organization_usage"}, "source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily": {"database": "snowflake", "schema": "organization_usage", "name": "usage_in_currency_daily", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_organization_usage", "usage_in_currency_daily"], "source_name": "snowflake_organization_usage", "source_description": "Source over native schema `snowflake.organization_usage` providing views describing the usage of Snowflake resources in the current account. [Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/organization-usage)", "loader": "", "identifier": "usage_in_currency_daily", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.organization_usage.usage_in_currency_daily", "created_at": 1742470392.793089, "unrendered_database": "snowflake", "unrendered_schema": "organization_usage"}}, "macros": {"macro.fasttrack_cost_reporting.copy_into_azure_cost_data": {"name": "copy_into_azure_cost_data", "resource_type": "macro", "package_name": "fasttrack_cost_reporting", "path": "macros/azure/copy_into_azure_cost_data.sql", "original_file_path": "macros/azure/copy_into_azure_cost_data.sql", "unique_id": "macro.fasttrack_cost_reporting.copy_into_azure_cost_data", "macro_sql": "\n\n{%-\n  macro copy_into_azure_cost_data(\n    subscriptionname,\n    stagename='stage_azure_cost_data_export',\n    fileformat='fmt_csv',\n    sourcedatabase=target.database,\n    sourceschema='landing_azure_cost_data_export',\n    sourcepath='dailyexportmtd',\n    targetdatabase=target.database,\n    targetschema='landing_azure_cost_data_export',\n    targettable='dailyexportmtd'\n  ) \n-%}\n\n{% set copy_into %}\n\ncopy into {{ targetdatabase }}.{{ targetschemaa }}.{{ targettable }}\nfrom (\n  select\n    to_char(try_to_date(t.$12)) || t.$30 || $17 as unique_id,\n    t.$1 as billingaccountname,\n    t.$2 as partnername,\n    t.$3 as resellername,\n    t.$4 as resellermpnid,\n    t.$5 as customertenantid,\n    t.$6 as customername,\n    t.$7 as costcenter,\n    t.$8 as billingperiodenddate,\n    t.$9 as billingperiodstartdate,\n    t.$10 as serviceperiodenddate,\n    t.$11 as serviceperiodstartdate,\n    try_to_date(t.$12) as billingdate,\n    t.$13 as servicefamily,\n    t.$14 as productorderid,\n    t.$15 as productordername,\n    t.$16 as consumedservice,\n    t.$17 as meterid,\n    t.$18 as metername,\n    t.$19 as metercategory,\n    t.$20 as metersubcategory,\n    t.$21 as meterregion,\n    t.$22 as productid,\n    t.$23 as productname,\n    t.$24 as subscriptionid,\n    t.$25 as subscriptionname,\n    t.$26 as publishertype,\n    t.$27 as publisherid,\n    t.$28 as publishername,\n    t.$29 as resourcegroupname,\n    t.$30 as resourceid,\n    t.$31 as resourcelocation,\n    t.$32 as location,\n    t.$33 as effectiveprice,\n    t.$34 as quantity,\n    t.$35 as unitofmeasure,\n    t.$36 as chargetype,\n    t.$37 as billingcurrency,\n    t.$38 as pricingcurrency,\n    t.$39 as costinbillingcurrency,\n    t.$40 as costinusd,\n    t.$41 as exchangeratepricingtobilling,\n    t.$42 as exchangeratedate,\n    t.$43 as serviceinfo1,\n    t.$44 as serviceinfo2,\n    t.$45 as additionalinfo,\n    t.$46 as tags,\n    t.$47 as paygprice,\n    t.$48 as frequency,\n    t.$49 as term,\n    t.$50 as reservationid,\n    t.$51 as reservationname,\n    t.$52 as pricingmodel,\n    t.$53 as unitprice,\n    t.$54 as benefitid,\n    t.$55 as benefitname,\n    t.$56 as provider,\n    '{{ subscriptionname }}' as subscription,\n    metadata$filename as path,\n    convert_timezone('UTC', metadata$start_scan_time)::date as ingested_date,\n    convert_timezone('UTC', metadata$start_scan_time)::timestamp_ntz as ingested_at,\n    convert_timezone('UTC', current_timestamp())::timestamp_ntz as batch_timestamp\n  from @{{ sourcedatabase }}.{{ sourceschema }}.{{ stagename }}/{{ subscriptionname }}/{{ sourcepath }}/ as t\n)\nfile_format = (format_name = '{{ sourcedatabase }}.{{ sourceschema }}.{{ fileformat }}');\n\n{%- endset -%}\n\n\n{% do run_query(copy_into) %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0032902, "supported_languages": null}, "macro.fasttrack_cost_reporting.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "fasttrack_cost_reporting", "path": "macros/dbt/generate_schema_name.sql", "original_file_path": "macros/dbt/generate_schema_name.sql", "unique_id": "macro.fasttrack_cost_reporting.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n{{ (custom_schema_name or target.schema)|trim or 'PUBLIC' }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.003474, "supported_languages": null}, "macro.fasttrack_cost_reporting.test_expect_column_to_be_of_type": {"name": "test_expect_column_to_be_of_type", "resource_type": "macro", "package_name": "fasttrack_cost_reporting", "path": "tests/generic/expect_column_to_be_of_type.sql", "original_file_path": "tests/generic/expect_column_to_be_of_type.sql", "unique_id": "macro.fasttrack_cost_reporting.test_expect_column_to_be_of_type", "macro_sql": "{% test expect_column_to_be_of_type(model, column_name, data_type) %}\n\nselect left(system$typeof(col), {{ data_type|trim|length }}) as data_type from (\n  select max({{ column_name }}) as col from {{ model }}\n)\nwhere data_type not ilike '{{ data_type|trim }}%'\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.00367, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.004283, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.004513, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.004661, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.004744, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.004798, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0048919, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.005051, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.005379, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0068579, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0070221, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.007456, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.007633, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.008033, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {% if schema_relation is string %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% else %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% endif -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n            dbt is currently configured to list a maximum of {{ max_total_results }} objects per schema.\n            {{ schema_relation }} exceeds this limit. If this is expected, you may configure this limit\n            by setting list_relations_per_page and list_relations_page_limit in your project flags.\n            It is recommended to start by increasing list_relations_page_limit to something more than the default of 10.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.008876, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n  {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n  {%- set sql -%}\n    {% if schema_relation is string %}\n      show objects in {{ schema_relation }} limit {{ max_results_per_iter }};\n    {% else %}\n      show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }};\n    {% endif -%}\n\n    {# -- Gated for performance reason. If you don't want Iceberg, you shouldn't pay the\n       -- latency penalty. #}\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n      select all_objects.*, is_iceberg\n      from table(result_scan(last_query_id(-1))) all_objects\n      left join INFORMATION_SCHEMA.tables as all_tables\n        on all_tables.table_name = all_objects.\"name\"\n        and all_tables.table_schema = all_objects.\"schema_name\"\n        and all_tables.table_catalog = all_objects.\"database_name\"\n    {% endif -%}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0096488, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.009848, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.010027, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0102332, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.010612, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0107179, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_monitoring.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0108109, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.01107, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_monitoring.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.011172, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0114298, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.01195, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0120718, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.012212, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0123782, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.012446, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.012786, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0129778, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.013846, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.014011, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.014295, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.015178, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0154612, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.016617, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to alter incremental model `\" ~ target_relation.identifier  ~ \"` to '\" ~ target_relation.table_format ~ \" table format due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in new table format.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0185568, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0186508, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.018833, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0194938, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.020142, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0202591, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.020494, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.020637, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.020752, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.020899, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0214882, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.021642, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.021773, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.021881, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0224798, "supported_languages": null}, "macro.dbt_snowflake.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.022753, "supported_languages": null}, "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql": {"name": "snowflake__insert_overwrite_get_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql", "macro_sql": "{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.023086, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.023249, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0234501, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.023582, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.023764, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.023941, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0240839, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.024159, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.024273, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.024404, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n  {%- if relation.is_iceberg_format and not adapter.behavior.enable_iceberg_materializations.no_warn %}\n    {% do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') %}\n  {%- endif %}\n\n  {%- set materialization_prefix = relation.get_ddl_prefix_for_create(config.model.config, temporary) -%}\n  {%- set alter_prefix = relation.get_ddl_prefix_for_alter() -%}\n\n  {# Generate DDL/DML #}\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ materialization_prefix }} table {{ relation }}\n        {%- if relation.is_iceberg_format %}\n          {#\n            Valid DDL in CTAS statements. Plain create statements have a different order.\n            https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table\n          #}\n          {{ relation.get_iceberg_ddl_options(config.model.config) }}\n        {%- endif -%}\n\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter {{ alter_prefix }} table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary %}\n        alter {{ alter_prefix }} table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {%- if relation.is_iceberg_format %}\n      {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n    {%- endif %}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=relation.get_ddl_prefix_for_create(config.model.config, temporary)) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.025889, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.025978, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.026073, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0262022, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0268538, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.026936, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0274649, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.027544, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic table with a new dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql", "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.02794, "supported_languages": null}, "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql": {"name": "_get_replace_dynamic_standard_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql", "macro_sql": "{% macro _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a standard dynamic table with a new standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0281181, "supported_languages": null}, "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql": {"name": "_get_replace_dynamic_iceberg_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql", "macro_sql": "{% macro _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create or replace dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.028374, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n--  Get all relevant metadata about a dynamic table\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A dictionary with one or two entries depending on whether iceberg is enabled:\n--      - dynamic_table: the metadata associated with a standard dynamic table\n--      - catalog: the metadata associated with the iceberg catalog\n-#}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\",\n            \"refresh_mode\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set results = {'dynamic_table': run_query(_dynamic_table_sql)} %}\n\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n        {% set _ = results.update({'catalog': run_query(_get_describe_iceberg_catalog_sql(relation))}) %}\n    {% endif %}\n\n    {% do return(results) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake._get_describe_iceberg_catalog_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.028789, "supported_languages": null}, "macro.dbt_snowflake._get_describe_iceberg_catalog_sql": {"name": "_get_describe_iceberg_catalog_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake._get_describe_iceberg_catalog_sql", "macro_sql": "{% macro _get_describe_iceberg_catalog_sql(relation) %}\n{#-\n--  Produce DQL that returns all relevant metadata about an iceberg catalog\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A valid DQL statement that will return metadata associated with an iceberg catalog\n-#}\n    show iceberg tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"catalog_name\",\n        \"external_volume_name\",\n        \"base_location\"\n    from table(result_scan(last_query_id()))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.028894, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.029003, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0294452, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql", "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.029821, "supported_languages": null}, "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql": {"name": "_get_create_dynamic_standard_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql", "macro_sql": "{% macro _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.029998, "supported_languages": null}, "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql": {"name": "_get_create_dynamic_iceberg_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql", "macro_sql": "{% macro _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.030248, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/optional.sql", "original_file_path": "macros/utils/optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. string), leave blank if unnecessary (e.g. integer or bool)\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{% if value is not none %}{{ name }} = {{ quote_char }}{{ value }}{{ quote_char }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0304341, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.030549, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.030645, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.030702, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0307572, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.030824, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.030928, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.03104, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.031447, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0316591, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.031735, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.031826, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.032267, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.032366, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.032444, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.032515, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.032594, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0327501, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.032897, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.033047, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0332642, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.033665, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.034694, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.034782, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0348952, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.035379, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.035466, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.035553, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0362198, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0369449, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0379, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.038039, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0381172, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.038163, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.03823, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.038283, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.038374, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0384881, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0401092, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.040216, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.040446, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.040641, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0409138, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.041125, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.041257, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.041415, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.041676, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0417778, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.041873, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.04366, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.044628, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.044888, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.045034, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.045132, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.045411, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.045561, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.045734, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.04641, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.047134, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.047311, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.047424, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0481641, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0482728, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0485609, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.049532, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.050476, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0508611, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0511098, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.051407, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.051517, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.05184, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.052344, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.053112, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0532339, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }}\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }}\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0535522, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0536761, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.053977, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0542421, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0545468, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.05466, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.054754, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0548842, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.05497, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.055134, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.055229, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0553448, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.05543, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.055501, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0556412, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.055721, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.055846, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.057715, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.058275, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.058847, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0593762, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.059785, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0598998, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.059953, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.060085, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0601652, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.061284, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.062421, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.062897, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.06329, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.063396, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0636318, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0637288, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.063798, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.063863, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.063915, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.063987, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.064043, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.064254, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0643861, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.064947, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.065126, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.065301, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.065511, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.065641, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0657878, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.065965, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.066092, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0662951, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0664692, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.066554, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.066654, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.066758, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0670238, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.067564, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0677388, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.067861, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.067987, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.068083, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.06822, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0683148, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.068522, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.068737, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.068841, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.068974, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0691168, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0692868, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0694559, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0696661, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.069823, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.069922, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.070038, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.070095, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.070217, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.070285, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0704188, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0704799, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.070611, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0706859, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.070946, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.071039, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0711732, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.071242, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.071365, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0714319, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0718038, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.07186, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.072096, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.072173, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.072234, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.072887, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.073059, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.07321, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.073332, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.07339, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.073511, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.073579, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.073715, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.073789, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.074074, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.074156, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.074369, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.074683, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.074906, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.074991, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.075072, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.075187, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.075244, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.075495, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0755699, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.076082, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.076172, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.076278, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.076401, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.07647, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.076658, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0767412, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.07683, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.077075, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.077217, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.077352, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.077462, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.077717, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.078301, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.078569, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0787148, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.079057, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0795908, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0799491, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.080066, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.080173, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.080211, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.080441, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.080728, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.080841, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0810082, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.081156, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.081287, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.081429, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0815098, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.081635, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.081698, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.081908, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.082144, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.08223, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0824692, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.082596, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.082657, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.082808, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.082884, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0829902, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.083028, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0831628, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.083234, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.08337, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0834339, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.083634, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.083827, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.083979, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0840662, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0842109, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0842838, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.084432, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.084567, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.084683, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.084755, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.084866, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.084945, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.085084, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.085152, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.085278, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.085381, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.085509, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0855732, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.085684, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.085732, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.086071, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.086147, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.086228, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0863051, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.086378, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.086445, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.086518, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.086596, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0866728, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.08674, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.086813, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.086883, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0869582, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.087033, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.087174, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.087244, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.087368, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0874162, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.087564, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.087679, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.087745, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0879118, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0880482, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0881631, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.088305, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0883698, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.088542, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0886521, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.088783, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.088844, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.088989, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0890749, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0891578, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.089254, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.089477, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.089546, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.08961, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.089658, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0898402, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.089918, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.089956, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.090036, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.090118, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0903559, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.090423, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.090493, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.090674, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.090806, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.090872, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0909598, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.091017, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.091349, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.091425, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.091607, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.091756, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.091873, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.092015, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.092098, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.09218, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.092288, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.092549, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0926661, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.092737, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.092949, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.093138, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0932329, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0933802, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0935118, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.093621, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0941582, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.094213, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.09429, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.094341, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.094551, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.094649, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.094713, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.094826, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.094919, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.09502, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.095111, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.095212, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.095521, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.095618, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0957491, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.095859, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.096381, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.096574, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.096666, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.09676, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.096962, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.097041, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.097132, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.097207, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.097325, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.097543, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0979478, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0980659, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.098154, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.098271, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.098409, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.098484, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0985742, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0986948, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.098795, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.09894, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0990238, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0990982, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.0991821, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.099267, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.099353, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.099421, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.09951, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.099597, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.100131, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.100207, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1003451, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.100441, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1005461, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1006331, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1011698, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.101341, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1014242, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.101579, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1016939, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.102144, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.102259, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.102633, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.10377, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.104037, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1045508, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1046588, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.104715, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1050382, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.105116, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.105483, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.105691, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.105958, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1061819, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.106217, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.10642, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.106543, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.106693, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.106839, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.106978, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.107219, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1073751, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.107679, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.107832, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1079721, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.108237, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.108795, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.109077, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1095738, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1098182, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1099799, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.110222, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.110618, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1108239, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.111031, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.11125, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.11147, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.11168, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.111872, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1120908, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1124952, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.112718, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.113021, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.113199, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.11336, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.113536, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.113717, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.113933, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.114321, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.114581, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.115063, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1156428, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.117461, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.117669, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.117825, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.118212, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.118936, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.119061, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.119137, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.119339, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1194649, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.119561, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.119691, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.119779, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.120119, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1204522, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.120707, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.120982, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.121088, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.12126, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1214132, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.121676, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.121826, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1219761, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1222, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1226492, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.122875, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1230621, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.12315, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.123391, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1236339, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.124025, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.124206, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.124356, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.124705, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1253471, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1257432, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.126574, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.126726, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1267982, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.127284, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.128939, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.129079, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.129195, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.129479, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1296031, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.129693, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.129793, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.129874, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.129951, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.130039, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.130198, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.130311, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.130465, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.13073, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.130883, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.131031, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1314151, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1315851, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.131913, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1322398, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.132509, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1328719, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1336021, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.133985, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.134358, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.134552, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.134874, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1350772, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.135284, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.135369, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.135526, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.135788, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.13596, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.136235, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.136388, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.13646, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.136529, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.136598, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1367848, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.137117, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1373389, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.137465, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1377358, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1380951, "supported_languages": null}, "macro.dbt_snowflake_monitoring.get_query_comment": {"name": "get_query_comment", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_comment.sql", "original_file_path": "macros/query_comment.sql", "unique_id": "macro.dbt_snowflake_monitoring.get_query_comment", "macro_sql": "{% macro get_query_comment(node) %}\n    {{ return(dbt_snowflake_query_tags.get_query_comment(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.get_query_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1381912, "supported_languages": null}, "macro.dbt_snowflake_monitoring.account_locator": {"name": "account_locator", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/account_locator.sql", "original_file_path": "macros/account_locator.sql", "unique_id": "macro.dbt_snowflake_monitoring.account_locator", "macro_sql": "{% macro account_locator() %}\n{%- if var('account_locator', none) -%}\n'{{ var('account_locator') }}'\n{%- else -%}\ncurrent_account()\n{%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1383219, "supported_languages": null}, "macro.dbt_snowflake_monitoring.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_monitoring.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.138464, "supported_languages": null}, "macro.dbt_snowflake_monitoring.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_monitoring.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_monitoring.set_query_tag", "macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.138535, "supported_languages": null}, "macro.dbt_snowflake_monitoring.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_monitoring.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.138672, "supported_languages": null}, "macro.dbt_snowflake_monitoring.default__unset_query_tag": {"name": "default__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_monitoring.default__unset_query_tag", "macro_sql": "{% macro default__unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_monitoring.unset_query_tag", "macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.138758, "supported_languages": null}, "macro.dbt_snowflake_monitoring.create_merge_objects_udf": {"name": "create_merge_objects_udf", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/create_merge_objects_udf.sql", "original_file_path": "macros/create_merge_objects_udf.sql", "unique_id": "macro.dbt_snowflake_monitoring.create_merge_objects_udf", "macro_sql": "{% macro create_merge_objects_udf(relation) %}\n\ncreate or replace function {{ adapter.quote_as_configured(this.database, 'database') }}.{{  adapter.quote_as_configured(this.schema, 'schema') }}.merge_objects(obj1 variant, obj2 variant)\nreturns variant\nlanguage javascript\ncomment = 'Created by dbt-snowflake-monitoring dbt package.'\nas\n$$\n    return x = Object.assign(OBJ1, OBJ2)\n$$\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.138901, "supported_languages": null}, "macro.dbt_constraints.postgres__create_primary_key": {"name": "postgres__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_primary_key", "macro_sql": "\n{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.140348, "supported_languages": null}, "macro.dbt_constraints.postgres__create_unique_key": {"name": "postgres__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_unique_key", "macro_sql": "\n{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.140946, "supported_languages": null}, "macro.dbt_constraints.postgres__create_not_null": {"name": "postgres__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_not_null", "macro_sql": "\n{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.141412, "supported_languages": null}, "macro.dbt_constraints.postgres__create_foreign_key": {"name": "postgres__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_foreign_key", "macro_sql": "\n{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.142197, "supported_languages": null}, "macro.dbt_constraints.postgres__unique_constraint_exists": {"name": "postgres__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__unique_constraint_exists", "macro_sql": "\n{%- macro postgres__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1426408, "supported_languages": null}, "macro.dbt_constraints.postgres__foreign_key_exists": {"name": "postgres__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__foreign_key_exists", "macro_sql": "\n{%- macro postgres__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.143056, "supported_languages": null}, "macro.dbt_constraints.postgres__have_references_priv": {"name": "postgres__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_references_priv", "macro_sql": "{%- macro postgres__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.143337, "supported_languages": null}, "macro.dbt_constraints.postgres__have_ownership_priv": {"name": "postgres__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_ownership_priv", "macro_sql": "{%- macro postgres__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.143622, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_referential_constraints": {"name": "postgres__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_referential_constraints", "macro_sql": "{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.143903, "supported_languages": null}, "macro.dbt_constraints.postgres__truncate_relation": {"name": "postgres__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__truncate_relation", "macro_sql": "{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1440058, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_relation": {"name": "postgres__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_relation", "macro_sql": "{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1441002, "supported_languages": null}, "macro.dbt_constraints.default__test_primary_key": {"name": "default__test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_primary_key", "macro_sql": "\n{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}, count(*) as row_count\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n        {% for column in column_names -%}\n        or {{column}} is null\n        {% endfor %}\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.144543, "supported_languages": null}, "macro.dbt_constraints.default__test_unique_key": {"name": "default__test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_unique_key", "macro_sql": "\n{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return any duplicates -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1446881, "supported_languages": null}, "macro.dbt_constraints.default__test_foreign_key": {"name": "default__test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_foreign_key", "macro_sql": "\n{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_list=dbt_constraints.get_quoted_column_list(fk_column_names, quote_columns) %}\n{%- set pk_columns_list=dbt_constraints.get_quoted_column_list(pk_column_names, quote_columns) %}\n{%- set fk_columns_csv=dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) %}\n{%- set pk_columns_csv=dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) %}\n{%- set join_conditions = [] -%}\n{%- for x in range(fk_columns_list|count) -%}\n    {%- set join_conditions = join_conditions.append( 'parent.' ~ pk_columns_list[x] ~ ' = child.' ~ fk_columns_list[x] ) -%}\n{%- endfor -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\nwith child as (\n  select\n    {{fk_columns_csv}}\n  from {{model}}\n  where 1=1\n        {% for column in fk_columns_list -%}\n        and {{column}} is not null\n        {% endfor %}\n),\n\nparent as (\n    select\n        {{pk_columns_csv}}\n    from {{pk_table_name}}\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on {{join_conditions | join(' and ')}}\n\n    where parent.{{pk_columns_list | first}} is null\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.14512, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_list": {"name": "get_quoted_column_list", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_list", "macro_sql": "{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.145349, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_csv": {"name": "get_quoted_column_csv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_csv", "macro_sql": "{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.145476, "supported_languages": null}, "macro.dbt_constraints.test_primary_key": {"name": "test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_primary_key", "macro_sql": "\n\n{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_primary_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.147284, "supported_languages": null}, "macro.dbt_constraints.test_unique_key": {"name": "test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_unique_key", "macro_sql": "{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_unique_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.147478, "supported_languages": null}, "macro.dbt_constraints.test_foreign_key": {"name": "test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_foreign_key", "macro_sql": "{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.147845, "supported_languages": null}, "macro.dbt_constraints.create_primary_key": {"name": "create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_primary_key", "macro_sql": "\n\n{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_primary_key"]}, "description": "Calls the adapter-specific version of the macro to create a primary key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1742470392.776696, "supported_languages": null}, "macro.dbt_constraints.create_unique_key": {"name": "create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_unique_key", "macro_sql": "{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_unique_key"]}, "description": "Calls the adapter-specific version of the macro to create a unique key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1742470392.776871, "supported_languages": null}, "macro.dbt_constraints.create_foreign_key": {"name": "create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_foreign_key", "macro_sql": "{%- macro create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_foreign_key"]}, "description": "Calls the adapter-specific version of the macro to create a foreign key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "test_model", "type": "results node", "description": "Accepts the result node of the test related to this constraint"}, {"name": "pk_model", "type": "graph node", "description": "Accepts the graph node of the parent table that has a PK or UK"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the FK reference"}, {"name": "fk_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "fk_column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1742470392.777482, "supported_languages": null}, "macro.dbt_constraints.create_not_null": {"name": "create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_not_null", "macro_sql": "{%- macro create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1484969, "supported_languages": null}, "macro.dbt_constraints.unique_constraint_exists": {"name": "unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.unique_constraint_exists", "macro_sql": "\n\n{%- macro unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__unique_constraint_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a PK or UK already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1742470392.777798, "supported_languages": null}, "macro.dbt_constraints.foreign_key_exists": {"name": "foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.foreign_key_exists", "macro_sql": "{%- macro foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__foreign_key_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a foreign key already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1742470392.777952, "supported_languages": null}, "macro.dbt_constraints.have_references_priv": {"name": "have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.have_references_priv", "macro_sql": "\n\n{%- macro have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.148802, "supported_languages": null}, "macro.dbt_constraints.have_ownership_priv": {"name": "have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.have_ownership_priv", "macro_sql": "{%- macro have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1489, "supported_languages": null}, "macro.dbt_constraints.adapter_supports_rely_norely": {"name": "adapter_supports_rely_norely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.adapter_supports_rely_norely", "macro_sql": "\n\n{%- macro adapter_supports_rely_norely(test_name) -%}\n    {{ return(adapter.dispatch('adapter_supports_rely_norely', 'dbt_constraints')(test_name)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__adapter_supports_rely_norely"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.148981, "supported_languages": null}, "macro.dbt_constraints.default__adapter_supports_rely_norely": {"name": "default__adapter_supports_rely_norely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.default__adapter_supports_rely_norely", "macro_sql": "\n{%- macro default__adapter_supports_rely_norely(test_name) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.149038, "supported_languages": null}, "macro.dbt_constraints.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.149119, "supported_languages": null}, "macro.dbt_constraints.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.149205, "supported_languages": null}, "macro.dbt_constraints.create_constraints": {"name": "create_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints", "macro_sql": "\n{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', false) and results -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- set lookup_cache = {\n            \"table_columns\": { },\n            \"table_privileges\": { },\n            \"unique_keys\": { },\n            \"not_null_col\": { },\n            \"foreign_keys\": { } } -%}\n\n        {%- if 'not_null' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.create_constraints_by_type"]}, "description": "Primary macro automatically called `on-run-end` to generate primary keys, unique keys, and foreign keys. The `dbt_constraints_enabled` variable can be set to `false` in your project to disable this macro.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "constraint_types", "type": "array of constraint types", "description": "Accepts a list of tests to consider for constraint creation and whether columns should be quoted. By default it will create all the constraint types. Valid values are ['primary_key', 'unique_key', 'unique_combination_of_columns', 'unique', 'foreign_key', 'relationships']"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1742470392.775928, "supported_languages": null}, "macro.dbt_constraints.test_selected": {"name": "test_selected", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_selected", "macro_sql": "\n{%- macro test_selected(test_model) -%}\n\n    {%- if test_model.unique_id in selected_resources -%}\n        {{ return(\"TEST_SELECTED\") }}\n    {%- endif -%}\n    {%- if test_model.attached_node in selected_resources -%} -%}\n        {{ return(\"MODEL_SELECTED\") }}\n    {%- endif -%}\n\n    {#- Check if a PK/UK should be created because it is referenced by a selected FK -#}\n    {%- if test_model.test_metadata.name in (\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n        {%- set pk_test_args = test_model.test_metadata.kwargs -%}\n        {%- set pk_test_columns = [] -%}\n        {%- if pk_test_args.column_names -%}\n            {%- set pk_test_columns =  pk_test_args.column_names -%}\n        {%- elif pk_test_args.combination_of_columns -%}\n            {%- set pk_test_columns =  pk_test_args.combination_of_columns -%}\n        {%- elif pk_test_args.column_name -%}\n            {%- set pk_test_columns =  [pk_test_args.column_name] -%}\n        {%- endif -%}\n        {%- for fk_model in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\")\n                if  fk_model.test_metadata\n                and fk_model.test_metadata.name in (\"foreign_key\", \"relationships\")\n                and test_model.attached_node in fk_model.depends_on.nodes\n                and ( (fk_model.unique_id and fk_model.unique_id in selected_resources)\n                    or (fk_model.attached_node and fk_model.attached_node in selected_resources) ) -%}\n            {%- set fk_test_args = fk_model.test_metadata.kwargs -%}\n            {%- set fk_test_columns = [] -%}\n            {%- if fk_test_args.pk_column_names -%}\n                {%- set fk_test_columns =  fk_test_args.pk_column_names -%}\n            {%- elif fk_test_args.pk_column_name -%}\n                {%- set fk_test_columns =  [fk_test_args.pk_column_name] -%}\n            {%- elif fk_test_args.field -%}\n                {%- set fk_test_columns =  [fk_test_args.field] -%}\n            {%- endif -%}\n            {%- if column_list_matches(pk_test_columns, fk_test_columns) -%}\n                {{ return(\"PK_UK_FOR_SELECTED_FK\") }}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(none) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.150687, "supported_languages": null}, "macro.dbt_constraints.lookup_should_rely": {"name": "lookup_should_rely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.lookup_should_rely", "macro_sql": "\n{%- macro lookup_should_rely(test_model) -%}\n    {%- if test_model.config.where\n            or test_model.config.warn_if != \"!= 0\"\n            or test_model.config.fail_calc != \"count(*)\" -%}\n        {#- Set NORELY if there is a condition on the test -#}\n        {{ return('NORELY') }}\n    {%- endif -%}\n\n    {%- for res in results\n        if res.node.config.materialized == \"test\"\n        and res.node.unique_id == test_model.unique_id -%}\n        {%- if res.failures == None -%}\n            {#- Set '' if we do not know if there is a test failure -#}\n            {{ return('') }}\n        {%- elif res.failures > 0 -%}\n            {#- Set NORELY if there is a test failure -#}\n            {{ return('NORELY') }}\n        {%- elif res.failures == 0 -%}\n            {#- Set RELY if there are 0 failures -#}\n            {{ return('RELY') }}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return('') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.151019, "supported_languages": null}, "macro.dbt_constraints.should_always_create_constraint": {"name": "should_always_create_constraint", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.should_always_create_constraint", "macro_sql": "\n{%- macro should_always_create_constraint(test_model) -%}\n    {%- if test_model.config.get(\"always_create_constraint\", false) == true -%}\n        {{ return(true) }}\n    {%- endif -%}\n    {%- for table_node in test_model.depends_on.nodes -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"equalto\", table_node)\n            if node.config.get(\"always_create_constraint\", false) == true -%}\n            {{ return(true) }}\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.151298, "supported_languages": null}, "macro.dbt_constraints.create_constraints_by_type": {"name": "create_constraints_by_type", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints_by_type", "macro_sql": "\n{%- macro create_constraints_by_type(constraint_types, quote_columns, lookup_cache) -%}\n\n    {#- Loop through the metadata and find all tests that match the constraint_types and have all the fields we check for tests -#}\n    {%- for test_model in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\")\n            if test_model.test_metadata\n            and test_model.test_metadata.kwargs\n            and test_model.test_metadata.name\n            and test_model.test_metadata.name is in( constraint_types )\n            and test_model.unique_id\n            and test_model.attached_node\n            and test_model.depends_on\n            and test_model.depends_on.nodes\n            and test_model.config\n            and test_model.config.enabled\n            and test_model.config.get(\"dbt_constraints_enabled\", true) -%}\n\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {%- set test_name = test_model.test_metadata.name -%}\n        {%- set selected = dbt_constraints.test_selected(test_model) -%}\n\n        {#- We can shortcut additional tests if the constraint was not selected -#}\n        {%- if selected is not none -%}\n            {#- rely_clause clause will be RELY if a test passed, NORELY if it failed, and '' if it was skipped -#}\n            {%- set rely_clause = dbt_constraints.lookup_should_rely(test_model) -%}\n            {%- set always_create_constraint = dbt_constraints.should_always_create_constraint(test_model) -%}\n        {%- else -%}\n            {%- set rely_clause = '' -%}\n            {%- set always_create_constraint = false -%}\n        {%- endif -%}\n\n        {#- Create constraints that:\n            - Either the test or its model was selected to run, including PK/UK for FK\n            - Passed the test (RELY) or the database supports NORELY constraints\n            - We ran the test (RELY/NORELY) or we need the constraint for a FK\n              or we have the always_create_constraint parameter turned on -#}\n        {%- if selected is not none\n            and ( rely_clause == 'RELY'\n                  or dbt_constraints.adapter_supports_rely_norely(test_name) == true )\n            and ( rely_clause in('RELY', 'NORELY')\n                  or selected == \"PK_UK_FOR_SELECTED_FK\"\n                  or always_create_constraint == true ) -%}\n\n            {% set ns = namespace(verify_permissions=false) %}\n            {%- set table_models = [] -%}\n\n            {#- Find the table models that are referenced by this test. -#}\n            {%- for table_node in test_model.depends_on.nodes -%}\n                {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"equalto\", table_node)\n                    if node.config\n                    and node.config.get(\"materialized\", \"other\") not in (\"view\", \"ephemeral\", \"dynamic_table\")\n                    and ( node.resource_type in (\"model\", \"snapshot\", \"seed\")\n                        or ( node.resource_type == \"source\" and var('dbt_constraints_sources_enabled', false)\n                            and ( ( var('dbt_constraints_sources_pk_enabled', false) and test_name in(\"primary_key\") )\n                                or ( var('dbt_constraints_sources_uk_enabled', false) and test_name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n                                or ( var('dbt_constraints_sources_fk_enabled', false) and test_name in(\"foreign_key\", \"relationships\") )\n                                or ( var('dbt_constraints_sources_nn_enabled', false) and test_name in(\"not_null\") ) )\n                        ) ) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {%- if node.resource_type == \"source\"\n                        or node.config.get(\"materialized\", \"other\") not in (\"table\", \"incremental\", \"snapshot\", \"seed\") -%}\n                        {#- If we are using a sources or custom materializations, we will need to verify permissions -#}\n                        {%- set ns.verify_permissions = true -%}\n                    {%- endif -%}\n\n                {% endfor %}\n            {% endfor %}\n\n            {#- We only create PK/UK if there is one model referenced by the test\n                and if all the columns exist as physical columns on the table -#}\n            {%- if 1 == table_models|count\n                and test_name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n                {# Attempt to identify a parameter we can use for the column names #}\n                {%- set column_names = [] -%}\n                {%- if  test_parameters.column_names -%}\n                    {%- set column_names =  test_parameters.column_names -%}\n                {%- elif  test_parameters.combination_of_columns -%}\n                    {%- set column_names =  test_parameters.combination_of_columns -%}\n                {%- elif  test_parameters.column_name -%}\n                    {%- set column_names =  [test_parameters.column_name] -%}\n                {%- else  -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                    ) }}\n                {%- endif -%}\n\n                {%- set table_relation = adapter.get_relation(\n                    database=table_models[0].database,\n                    schema=table_models[0].schema,\n                    identifier=table_models[0].alias ) -%}\n                {%- if table_relation and table_relation.is_table -%}\n                    {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                        {%- if test_name == \"primary_key\" -%}\n                            {%- if dbt_constraints.adapter_supports_rely_norely(\"not_null\") == true -%}\n                                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n                            {%- endif -%}\n                            {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache, rely_clause) -%}\n                        {%- else  -%}\n                            {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache, rely_clause) -%}\n                        {%- endif -%}\n                    {%- else  -%}\n                        {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n                    {%- endif -%}\n                {%- else  -%}\n                    {%- do log(\"Skipping primary/unique key because the table was not found in the database: \" ~ table_models[0].name, info=true) -%}\n                {%- endif -%}\n\n            {#- We only create FK if there are two models referenced by the test\n                and if all the columns exist as physical columns on the tables -#}\n            {%- elif 2 == table_models|count\n                and test_name in( \"foreign_key\", \"relationships\") -%}\n\n                {%- set fk_model = table_models | selectattr(\"unique_id\", \"equalto\", test_model.attached_node) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"unique_id\", \"equalto\", test_model.attached_node) | first -%}\n\n                {%- if fk_model and pk_model -%}\n\n                    {%- set fk_table_relation = adapter.get_relation(\n                        database=fk_model.database,\n                        schema=fk_model.schema,\n                        identifier=fk_model.alias) -%}\n\n                    {%- set pk_table_relation = adapter.get_relation(\n                        database=pk_model.database,\n                        schema=pk_model.schema,\n                        identifier=pk_model.alias) -%}\n\n                    {%- if fk_table_relation and pk_table_relation and fk_table_relation.is_table and pk_table_relation.is_table-%}\n                        {# Attempt to identify parameters we can use for the column names #}\n                        {%- set pk_column_names = [] -%}\n                        {%- if  test_parameters.pk_column_names -%}\n                            {%- set pk_column_names = test_parameters.pk_column_names -%}\n                        {%- elif  test_parameters.field -%}\n                            {%- set pk_column_names = [test_parameters.field] -%}\n                        {%- elif test_parameters.pk_column_name -%}\n                            {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                        {%- else -%}\n                            {{ exceptions.raise_compiler_error(\n                            \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                            ) }}\n                        {%- endif -%}\n\n                        {%- set fk_column_names = [] -%}\n                        {%- if  test_parameters.fk_column_names -%}\n                            {%- set fk_column_names = test_parameters.fk_column_names -%}\n                        {%- elif test_parameters.column_name -%}\n                            {%- set fk_column_names = [test_parameters.column_name] -%}\n                        {%- elif test_parameters.fk_column_name -%}\n                            {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                        {%- else -%}\n                            {{ exceptions.raise_compiler_error(\n                            \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                            ) }}\n                        {%- endif -%}\n\n                        {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names, lookup_cache) -%}\n                            {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                        {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names, lookup_cache) -%}\n                            {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                        {%- else  -%}\n                            {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache, rely_clause) -%}\n                        {%- endif -%}\n                    {%- else  -%}\n                        {%- if fk_model == None or not fk_table_relation.is_table -%}\n                            {%- do log(\"Skipping foreign key to \" ~ pk_model.alias ~ \" because the child table was not found in the database: \" ~ fk_model.alias, info=true) -%}\n                        {%- endif -%}\n                        {%- if pk_model == None or not pk_model.is_table -%}\n                            {%- do log(\"Skipping foreign key on \" ~ fk_model.alias ~ \" because the parent table was not found in the database: \" ~ pk_model.alias, info=true) -%}\n                        {%- endif -%}\n                    {%- endif -%}\n\n                {%- else  -%}\n                    {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ test_model.attached_node ~ \" or source\", info=true) -%}\n                {%- endif -%}\n\n            {#- We only create NN if there is one model referenced by the test\n                and if all the columns exist as physical columns on the table -#}\n            {%- elif 1 == table_models|count\n                and test_name in(\"not_null\") -%}\n\n                {# Attempt to identify a parameter we can use for the column names #}\n                {%- set column_names = [] -%}\n                {%- if  test_parameters.column_names -%}\n                    {%- set column_names =  test_parameters.column_names -%}\n                {%- elif  test_parameters.combination_of_columns -%}\n                    {%- set column_names =  test_parameters.combination_of_columns -%}\n                {%- elif  test_parameters.column_name -%}\n                    {%- set column_names =  [test_parameters.column_name] -%}\n                {%- else  -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                    ) }}\n                {%- endif -%}\n\n                {%- set table_relation = adapter.get_relation(\n                    database=table_models[0].database,\n                    schema=table_models[0].schema,\n                    identifier=table_models[0].alias ) -%}\n\n                {%- if table_relation and table_relation.is_table -%}\n                    {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                        {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n                    {%- else  -%}\n                        {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n                    {%- endif -%}\n                {%- else  -%}\n                    {%- do log(\"Skipping not null constraint because the table was not found in the database: \" ~ table_models[0].name, info=true) -%}\n                {%- endif -%}\n\n            {%- endif -%}\n        {%- endif -%}\n\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.test_selected", "macro.dbt_constraints.lookup_should_rely", "macro.dbt_constraints.should_always_create_constraint", "macro.dbt_constraints.adapter_supports_rely_norely", "macro.dbt_constraints.table_columns_all_exist", "macro.dbt_constraints.create_not_null", "macro.dbt_constraints.create_primary_key", "macro.dbt_constraints.create_unique_key", "macro.dbt_constraints.create_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1552, "supported_languages": null}, "macro.dbt_constraints.table_columns_all_exist": {"name": "table_columns_all_exist", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.table_columns_all_exist", "macro_sql": "\n{%- macro table_columns_all_exist(table_relation, column_list, lookup_cache) -%}\n    {%- set tab_column_list = dbt_constraints.lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- for column in column_list|map('upper') if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.155403, "supported_languages": null}, "macro.dbt_constraints.lookup_table_columns": {"name": "lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.lookup_table_columns", "macro_sql": "{%- macro lookup_table_columns(table_relation, lookup_cache) -%}\n    {{ return(adapter.dispatch('lookup_table_columns', 'dbt_constraints')(table_relation, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.155503, "supported_languages": null}, "macro.dbt_constraints.default__lookup_table_columns": {"name": "default__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.default__lookup_table_columns", "macro_sql": "{%- macro default__lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n        {%- set tab_column_list = [] -%}\n        {%- for column in tab_Columns -%}\n            {{ tab_column_list.append(column.name|upper) }}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: tab_column_list }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.155735, "supported_languages": null}, "macro.dbt_constraints.column_list_matches": {"name": "column_list_matches", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.column_list_matches", "macro_sql": "\n{%- macro column_list_matches(listA, listB) -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in listA|map('upper') -%}\n            {%- if valueFromA|upper not in listB| map('upper')  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1559749, "supported_languages": null}, "macro.dbt_constraints.snowflake__adapter_supports_rely_norely": {"name": "snowflake__adapter_supports_rely_norely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__adapter_supports_rely_norely", "macro_sql": "\n{%- macro snowflake__adapter_supports_rely_norely(test_name) -%}\n    {%- if test_name in (\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships') -%}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.157467, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_primary_key": {"name": "snowflake__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_primary_key", "macro_sql": "\n{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n{%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n{#- Check that the table does not already have this PK/UK -#}\n{%- set existing_constraint = dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n{%- if constraint_name == existing_constraint -%}\n    {%- do dbt_constraints.set_rely_norely(table_relation, constraint_name, lookup_cache.unique_keys[table_relation][constraint_name].rely, rely_clause) -%}\n    {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name:\n        {  \"constraint_name\": constraint_name,\n            \"columns\": column_names,\n            \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n{%- elif none == existing_constraint -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set rely_clause = 'NORELY' if rely_clause == '' else rely_clause -%}\n            {%- set query -%}\n            ALTER TABLE {{ table_relation }} ADD CONSTRAINT {{ constraint_name }} PRIMARY KEY ( {{ columns_csv }} ) {{ rely_clause }}\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name ~ \" \" ~ rely_clause, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name:\n                {  \"constraint_name\": constraint_name,\n                   \"columns\": column_names,\n                   \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.set_rely_norely", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.158352, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_unique_key": {"name": "snowflake__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_unique_key", "macro_sql": "\n{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n{%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n{#- Check that the table does not already have this PK/UK -#}\n{%- set existing_constraint = dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n{%- if constraint_name == existing_constraint -%}\n    {%- do dbt_constraints.set_rely_norely(table_relation, constraint_name, lookup_cache.unique_keys[table_relation][constraint_name].rely, rely_clause) -%}\n    {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name:\n        {  \"constraint_name\": constraint_name,\n            \"columns\": column_names,\n            \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n{%- elif none == existing_constraint -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set rely_clause = 'NORELY' if rely_clause == '' else rely_clause -%}\n            {%- set query -%}\n            ALTER TABLE {{ table_relation }} ADD CONSTRAINT {{ constraint_name }} UNIQUE ( {{ columns_csv }} ) {{ rely_clause }}\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name ~ \" \" ~ rely_clause, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name:\n                {  \"constraint_name\": constraint_name,\n                   \"columns\": column_names,\n                   \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.set_rely_norely", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.159217, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_foreign_key": {"name": "snowflake__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_foreign_key", "macro_sql": "\n{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n{%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n{%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n{%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n\n{#- Check that the PK table has a PK or UK -#}\n{%- if none != dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- set existing_constraint = dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n        {%- if constraint_name == existing_constraint -%}\n            {%- do dbt_constraints.set_rely_norely(fk_table_relation, constraint_name, lookup_cache.foreign_keys[fk_table_relation][constraint_name].rely, rely_clause) -%}\n            {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name:\n                {\"constraint_name\": constraint_name,\n                    \"columns\": fk_column_names,\n                    \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n        {%- elif none == existing_constraint -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set rely_clause = 'NORELY' if rely_clause == '' else rely_clause -%}\n                {%- set query -%}\n                ALTER TABLE {{ fk_table_relation }} ADD CONSTRAINT {{ constraint_name }} FOREIGN KEY ( {{ fk_columns_csv }} ) REFERENCES {{ pk_table_relation }} ( {{ pk_columns_csv }} ) {{ rely_clause }}\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names ~ \" \" ~ rely_clause, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name:\n                    {\"constraint_name\": constraint_name,\n                     \"columns\": fk_column_names,\n                     \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.set_rely_norely", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.160349, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_not_null": {"name": "snowflake__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_not_null", "macro_sql": "\n{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n{%- if not rely_clause == 'RELY' -%}\n    {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because Snowflake does not support NORELY for not null constraints.\", info=true) -%}\n    {{ return(false) }}\n{%- endif -%}\n\n{%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n{%- set columns_to_change = [] -%}\n{%- for column_name in column_names if column_name not in existing_not_null_col -%}\n    {%- do columns_to_change.append(column_name) -%}\n    {%- do existing_not_null_col.append(column_name) -%}\n{%- endfor -%}\n{%- if columns_to_change|count > 0 -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{ table_relation }} MODIFY {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" \" ~ rely_clause, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n            {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- else -%}\n    {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.161186, "supported_languages": null}, "macro.dbt_constraints.set_rely_norely": {"name": "set_rely_norely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.set_rely_norely", "macro_sql": "\n{%- macro set_rely_norely(table_relation, constraint_name, constraint_rely, rely_clause) -%}\n    {%- if ( rely_clause == 'NORELY' and constraint_rely == 'true' )\n            or ( rely_clause == 'RELY' and constraint_rely == 'false' ) -%}\n        {%- set query -%}\n        ALTER TABLE {{ table_relation }} MODIFY CONSTRAINT {{ constraint_name }} {{ rely_clause }}\n        {%- endset -%}\n        {%- do log(\"Updating constraint: \" ~ constraint_name ~ \" \" ~ rely_clause, info=true) -%}\n        {%- do run_query(query) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.16144, "supported_languages": null}, "macro.dbt_constraints.snowflake__unique_constraint_exists": {"name": "snowflake__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__unique_constraint_exists", "macro_sql": "\n{%- macro snowflake__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n{#- Check if we can find this constraint in the lookup cache -#}\n{%- if table_relation in lookup_cache.unique_keys -%}\n    {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n    {%- for cached_val in cached_unique_keys.values() -%}\n        {%- if dbt_constraints.column_list_matches(cached_val.columns, column_names ) -%}\n            {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ cached_val.columns ~ \" \" ~ cached_val.rely, info=false) -%}\n            {{ return(cached_val.constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{%- set lookup_query -%}\nSHOW UNIQUE KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n    {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n        {%- set existing_constraint_name = (constraint.columns[\"constraint_name\"].values() | first) -%}\n        {%- set existing_columns = constraint.columns[\"column_name\"].values() -%}\n        {%- set existing_rely = (constraint.columns[\"rely\"].values() | first) -%}\n        {#- Add this constraint to the lookup cache -#}\n        {%- do lookup_cache.unique_keys.update({table_relation: {existing_constraint_name:\n            {  \"constraint_name\": existing_constraint_name,\n                \"columns\": existing_columns,\n                \"rely\": existing_rely } } }) -%}\n        {%- if dbt_constraints.column_list_matches(existing_columns, column_names ) -%}\n            {%- do log(\"Found UK key: \" ~ existing_constraint_name ~ \" \" ~ table_relation ~ \" \" ~ column_names ~ \" \" ~ existing_rely, info=false) -%}\n            {{ return(existing_constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{%- set lookup_query -%}\nSHOW PRIMARY KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n    {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n        {%- set existing_constraint_name = (constraint.columns[\"constraint_name\"].values() | first) -%}\n        {%- set existing_columns = constraint.columns[\"column_name\"].values() -%}\n        {%- set existing_rely = (constraint.columns[\"rely\"].values() | first) -%}\n        {#- Add this constraint to the lookup cache -#}\n        {%- do lookup_cache.unique_keys.update({table_relation: {existing_constraint_name:\n            {  \"constraint_name\": existing_constraint_name,\n                \"columns\": existing_columns,\n                \"rely\": existing_rely } } }) -%}\n        {%- if dbt_constraints.column_list_matches(existing_columns, column_names ) -%}\n            {%- do log(\"Found PK key: \" ~ existing_constraint_name ~ \" \" ~ table_relation ~ \" \" ~ column_names ~ \" \" ~ existing_rely, info=false) -%}\n            {{ return(existing_constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{#- If we get this far then the table does not have either constraint -#}\n{%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(none) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.16273, "supported_languages": null}, "macro.dbt_constraints.snowflake__foreign_key_exists": {"name": "snowflake__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__foreign_key_exists", "macro_sql": "\n{%- macro snowflake__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n{#- Check if we can find this constraint in the lookup cache -#}\n{%- if table_relation in lookup_cache.foreign_keys -%}\n    {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n    {%- for cached_val in cached_foreign_keys.values() -%}\n        {%- if dbt_constraints.column_list_matches(cached_val.columns, column_names ) -%}\n            {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ cached_val.constraint_name ~ \" \" ~ column_names ~ \" \" ~ cached_val.rely, info=false) -%}\n            {{ return(cached_val.constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{%- set lookup_query -%}\nSHOW IMPORTED KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n    {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n        {%- set existing_constraint_name = (constraint.columns[\"fk_name\"].values() | first) -%}\n        {%- set existing_columns = constraint.columns[\"fk_column_name\"].values() -%}\n        {%- set existing_rely = (constraint.columns[\"rely\"].values() | first) -%}\n        {#- Add this constraint to the lookup cache -#}\n        {%- do lookup_cache.foreign_keys.update({table_relation: {existing_constraint_name:\n            {  \"constraint_name\": existing_constraint_name,\n                \"columns\": existing_columns,\n                \"rely\": existing_rely } } }) -%}\n        {%- if dbt_constraints.column_list_matches(existing_columns, column_names ) -%}\n            {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ existing_constraint_name ~ \" \" ~ column_names ~ \" \" ~ existing_rely, info=false) -%}\n            {{ return(existing_constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{#- If we get this far then the table does not have this constraint -#}\n{%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(none) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1636329, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_references_priv": {"name": "snowflake__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_references_priv", "macro_sql": "{%- macro snowflake__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n{%- if verify_permissions is sameas true -%}\n\n{%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n{%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n{{ return(true) }}\n{%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.163838, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_ownership_priv": {"name": "snowflake__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_ownership_priv", "macro_sql": "{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n{%- if verify_permissions is sameas true -%}\n\n{%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n{%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n{{ return(true) }}\n{%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1640341, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_privileges": {"name": "snowflake__lookup_table_privileges", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_privileges", "macro_sql": "{%- macro snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n{%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n\n        {%- set lookup_query -%}\n        select distinct\n            upper(tp.table_schema) as \"table_schema\",\n            upper(tp.table_name) as \"table_name\",\n            tp.privilege_type as \"privilege_type\"\n        from {{ table_relation.database }}.information_schema.table_privileges tp\n        where (is_role_in_session(tp.grantee) or is_database_role_in_session(tp.grantee))\n            and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n{%- set tab_priv_list = [] -%}\n{%- set schema_name = table_relation.schema|upper -%}\n{%- set table_name = table_relation.identifier|upper -%}\n{%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n{{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.164479, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_columns": {"name": "snowflake__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_columns", "macro_sql": "{%- macro snowflake__lookup_table_columns(table_relation, lookup_cache) -%}\n\n{%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n        SHOW COLUMNS IN TABLE {{ table_relation }}\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['null?'] == 'false' -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n{{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.164856, "supported_languages": null}, "macro.dbt_constraints.redshift__create_primary_key": {"name": "redshift__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_primary_key", "macro_sql": "\n{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.166302, "supported_languages": null}, "macro.dbt_constraints.redshift__create_unique_key": {"name": "redshift__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_unique_key", "macro_sql": "\n{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.166882, "supported_languages": null}, "macro.dbt_constraints.redshift__create_not_null": {"name": "redshift__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_not_null", "macro_sql": "\n{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.167048, "supported_languages": null}, "macro.dbt_constraints.redshift__create_foreign_key": {"name": "redshift__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_foreign_key", "macro_sql": "\n{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.167843, "supported_languages": null}, "macro.dbt_constraints.redshift__unique_constraint_exists": {"name": "redshift__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__unique_constraint_exists", "macro_sql": "\n{%- macro redshift__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.168297, "supported_languages": null}, "macro.dbt_constraints.redshift__foreign_key_exists": {"name": "redshift__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__foreign_key_exists", "macro_sql": "\n{%- macro redshift__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1687229, "supported_languages": null}, "macro.dbt_constraints.redshift__have_references_priv": {"name": "redshift__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_references_priv", "macro_sql": "{%- macro redshift__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.169018, "supported_languages": null}, "macro.dbt_constraints.redshift__have_ownership_priv": {"name": "redshift__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_ownership_priv", "macro_sql": "{%- macro redshift__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1693408, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_referential_constraints": {"name": "redshift__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_referential_constraints", "macro_sql": "{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.169591, "supported_languages": null}, "macro.dbt_constraints.redshift__truncate_relation": {"name": "redshift__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__truncate_relation", "macro_sql": "{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1696901, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_relation": {"name": "redshift__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_relation", "macro_sql": "{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1697862, "supported_languages": null}, "macro.dbt_constraints.vertica__create_primary_key": {"name": "vertica__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_primary_key", "macro_sql": "\n{%- macro vertica__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.171378, "supported_languages": null}, "macro.dbt_constraints.vertica__create_unique_key": {"name": "vertica__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_unique_key", "macro_sql": "\n{%- macro vertica__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1718981, "supported_languages": null}, "macro.dbt_constraints.vertica__create_foreign_key": {"name": "vertica__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_foreign_key", "macro_sql": "\n{%- macro vertica__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                    ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.172616, "supported_languages": null}, "macro.dbt_constraints.vertica__create_not_null": {"name": "vertica__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_not_null", "macro_sql": "\n{%- macro vertica__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name|upper not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ALTER {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n            {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.173425, "supported_languages": null}, "macro.dbt_constraints.vertica__unique_constraint_exists": {"name": "vertica__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__unique_constraint_exists", "macro_sql": "\n{%- macro vertica__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n      select constraint_name, column_name\n      from constraint_columns\n      where\n          table_schema ilike '{{table_relation.schema}}'\n        and table_name ilike '{{table_relation.identifier}}'\n        and constraint_type in ('u')\n      order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    select constraint_name, column_name\n    from constraint_columns\n    where\n        table_schema ilike '{{table_relation.schema}}'\n      and table_name ilike '{{table_relation.identifier}}'\n      and constraint_type in ('p')\n    order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1745028, "supported_languages": null}, "macro.dbt_constraints.vertica__foreign_key_exists": {"name": "vertica__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__foreign_key_exists", "macro_sql": "\n{%- macro vertica__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n        select constraint_name as fk_name, column_name as fk_column_name\n        from constraint_columns\n        where\n            table_schema ilike '{{table_relation.schema}}'\n          and table_name ilike '{{table_relation.identifier}}'\n          and constraint_type in ('f')\n        order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.17521, "supported_languages": null}, "macro.dbt_constraints.vertica__have_references_priv": {"name": "vertica__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__have_references_priv", "macro_sql": "{%- macro vertica__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.vertica__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.175424, "supported_languages": null}, "macro.dbt_constraints.vertica__have_ownership_priv": {"name": "vertica__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__have_ownership_priv", "macro_sql": "{%- macro vertica__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.vertica__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.175618, "supported_languages": null}, "macro.dbt_constraints.vertica__lookup_table_privileges": {"name": "vertica__lookup_table_privileges", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__lookup_table_privileges", "macro_sql": "{%- macro vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n            select distinct\n              upper(tp.table_schema) as \"table_schema\",\n              upper(tp.table_name) as \"table_name\",\n              tp.privilege_type as \"privilege_type\"\n            from {{table_relation.database}}.information_schema.table_privileges tp\n            where is_role_in_session(tp.grantee)\n              and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.176057, "supported_languages": null}, "macro.dbt_constraints.vertica__lookup_table_columns": {"name": "vertica__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__lookup_table_columns", "macro_sql": "{%- macro vertica__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n            select column_name, is_nullable\n            from columns\n            where table_schema ilike '{{table_relation.schema}}'\n              and table_name ilike '{{table_relation.identifier}}'\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['is_nullable'] == False -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1764731, "supported_languages": null}, "macro.dbt_constraints.vertica__get_create_index_sql": {"name": "vertica__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__get_create_index_sql", "macro_sql": "{%- macro vertica__get_create_index_sql(table_relation, lookup_cache) -%}\n\n    {%- do log(\"Skipping creation of indexes, they are not supported by Vertica\", info=true) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1765618, "supported_languages": null}, "macro.dbt_constraints.oracle__create_primary_key": {"name": "oracle__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_primary_key", "macro_sql": "\n{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1780028, "supported_languages": null}, "macro.dbt_constraints.oracle__create_unique_key": {"name": "oracle__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_unique_key", "macro_sql": "\n{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.178606, "supported_languages": null}, "macro.dbt_constraints.oracle__create_foreign_key": {"name": "oracle__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_foreign_key", "macro_sql": "\n{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.179403, "supported_languages": null}, "macro.dbt_constraints.oracle__create_not_null": {"name": "oracle__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_not_null", "macro_sql": "\n{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.179845, "supported_languages": null}, "macro.dbt_constraints.oracle__unique_constraint_exists": {"name": "oracle__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__unique_constraint_exists", "macro_sql": "\n{%- macro oracle__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.180293, "supported_languages": null}, "macro.dbt_constraints.oracle__foreign_key_exists": {"name": "oracle__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__foreign_key_exists", "macro_sql": "\n{%- macro oracle__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.180737, "supported_languages": null}, "macro.dbt_constraints.oracle__have_references_priv": {"name": "oracle__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_references_priv", "macro_sql": "\n{%- macro oracle__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.180814, "supported_languages": null}, "macro.dbt_constraints.oracle__have_ownership_priv": {"name": "oracle__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_ownership_priv", "macro_sql": "\n{%- macro oracle__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.180879, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_referential_constraints": {"name": "oracle__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_referential_constraints", "macro_sql": "{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.181, "supported_languages": null}, "macro.dbt_constraints.oracle__truncate_relation": {"name": "oracle__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n    {%- do log(\"Truncating table \" ~ relation, info=true) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1811368, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_relation": {"name": "oracle__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n    {%- do log(\"Dropping table \" ~ relation, info=true) -%}\n        {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\n    FOR REC IN (\n        SELECT owner, table_name\n        FROM all_tables\n        WHERE upper(owner) = '{{relation.schema|upper}}'\n            AND upper(table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'DROP TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" CASCADE CONSTRAINTS';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop table: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1813388, "supported_languages": null}, "macro.dbt_snowflake_query_tags.get_query_comment": {"name": "get_query_comment", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_comment.sql", "original_file_path": "macros/query_comment.sql", "unique_id": "macro.dbt_snowflake_query_tags.get_query_comment", "macro_sql": "{% macro get_query_comment(node, extra = {}) %}\n    {%- set comment_dict = extra -%}\n    {%- do comment_dict.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n        dbt_version=dbt_version,\n        project_name=project_name,\n        target_name=target.name,\n        target_database=target.database,\n        target_schema=target.schema,\n        invocation_id=invocation_id,\n        run_started_at=run_started_at.astimezone(modules.pytz.utc).isoformat(),\n        full_refresh=flags.FULL_REFRESH,\n        which=flags.WHICH,\n    ) -%}\n\n    {%- if node is not none -%}\n        {%- do comment_dict.update(\n            node_name=node.name,\n            node_alias=node.alias,\n            node_package_name=node.package_name,\n            node_original_file_path=node.original_file_path,\n            node_database=node.database,\n            node_schema=node.schema,\n            node_id=node.unique_id,\n            node_resource_type=node.resource_type,\n            node_meta=node.config.meta,\n            node_tags=node.tags,\n        ) -%}\n\n        {%- if flags.INVOCATION_COMMAND -%}\n            {%- do comment_dict.update(\n                invocation_command=flags.INVOCATION_COMMAND\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.resource_type != ('seed') -%} {# Otherwise this throws an error saying 'Seeds cannot depend on other nodes.' #}\n            {%- if node.refs is defined -%}\n                {% set refs = [] %}\n                {% for ref in node.refs %}\n                    {%- if dbt_version >= '1.5.0' -%}\n                        {%- do refs.append(ref.name) -%}\n                    {%- else -%}\n                        {%- do refs.append(ref[0]) -%}\n                    {%- endif -%}\n                {% endfor %}\n                {%- do comment_dict.update(\n                    node_refs=refs | unique | list\n                ) -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if node.resource_type == 'model' -%}\n            {%- do comment_dict.update(\n                materialized=node.config.materialized,\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.raw_code is not none and local_md5 -%}\n            {%- do comment_dict.update({\n                \"raw_code_hash\": local_md5(node.raw_code)\n            }) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_PROJECT_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_project_id=env_var('DBT_CLOUD_PROJECT_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_JOB_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_job_id=env_var('DBT_CLOUD_JOB_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_id=env_var('DBT_CLOUD_RUN_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON_CATEGORY', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason_category=env_var('DBT_CLOUD_RUN_REASON_CATEGORY')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason=env_var('DBT_CLOUD_RUN_REASON')\n        ) -%}\n    {%- endif -%}\n\n    {{ return(tojson(comment_dict)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.18274, "supported_languages": null}, "macro.dbt_snowflake_query_tags.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.set_query_tag", "macro_sql": "{% macro set_query_tag(extra = {}) -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')(extra=extra)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1830919, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag(extra = {}) -%}\n    {# Get session level query tag #}\n    {% set original_query_tag = get_current_query_tag() %}\n    {% set original_query_tag_parsed = {} %}\n\n    {% if original_query_tag %}\n        {% if fromjson(original_query_tag) is mapping %}\n            {% set original_query_tag_parsed = fromjson(original_query_tag) %}\n        {% endif %}\n    {% endif %}\n\n    {# The env_vars_to_query_tag_list should contain an environment variables list to construct query tag dict #}\n    {% set env_var_query_tags = {} %}\n    {% if var('env_vars_to_query_tag_list', '') %} {# Get a list of env vars from env_vars_to_query_tag_list variable to add additional query tags #}\n        {% for k in var('env_vars_to_query_tag_list') %}\n            {% set v = env_var(k, '') %}\n            {% do env_var_query_tags.update({k.lower(): v}) if v %}\n        {% endfor %}\n    {% endif %}\n\n    {# Start with any model-configured dict #}\n    {% set query_tag = config.get('query_tag', default={}) %}\n\n    {% if query_tag is not mapping %}\n    {% do log(\"dbt-snowflake-query-tags warning: the query_tag config value of '{}' is not a mapping type, so is being ignored. If you'd like to add additional query tag information, use a mapping type instead, or remove it to avoid this message.\".format(query_tag), True) %}\n    {% set query_tag = {} %} {# If the user has set the query tag config as a non mapping type, start fresh #}\n    {% endif %}\n\n    {% do query_tag.update(original_query_tag_parsed) %}\n    {% do query_tag.update(env_var_query_tags) %}\n    {% do query_tag.update(extra) %}\n\n    {%- do query_tag.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n    ) -%}\n\n    {% if thread_id %}\n        {%- do query_tag.update(\n            thread_id=thread_id\n        ) -%}\n    {% endif %}\n\n\n    {# We have to bring is_incremental through here because its not available in the comment context #}\n    {% if model.resource_type == 'model' %}\n        {%- do query_tag.update(\n            is_incremental=is_incremental()\n        ) -%}\n    {% endif %}\n\n    {% set query_tag_json = tojson(query_tag) %}\n    {{ log(\"Setting query_tag to '\" ~ query_tag_json ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(query_tag_json)) %}\n    {{ return(original_query_tag)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.is_incremental", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.183928, "supported_languages": null}, "macro.dbt_snowflake_query_tags.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1841521, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__unset_query_tag": {"name": "default__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__unset_query_tag", "macro_sql": "{% macro default__unset_query_tag(original_query_tag) -%}\n    {% if original_query_tag %}\n    {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n    {{ log(\"No original query_tag, unsetting parameter.\") }}\n    {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1742470392.1843379, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.fasttrack_cost_reporting.stg_azure_daily_exports": ["source.fasttrack_cost_reporting.azure_exports.daily_mtd"], "model.fasttrack_cost_reporting.stg_platform_references_additional_costs": ["source.fasttrack_cost_reporting.platform_references.additional_costs"], "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history": ["source.fasttrack_cost_reporting.snowflake_account_usage.pipe_usage_history"], "model.fasttrack_cost_reporting.stg_snowflake_account_tag_references": ["source.fasttrack_cost_reporting.snowflake_account_usage.tag_references", "source.fasttrack_cost_reporting.snowflake_account_usage.tags"], "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend": ["model.dbt_snowflake_monitoring.daily_spend"], "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates": ["model.dbt_snowflake_monitoring.daily_rates"], "model.fasttrack_cost_reporting.d_cost_reporting_tags": ["model.fasttrack_cost_reporting.t_cost_reporting_tags"], "model.fasttrack_cost_reporting.f_cost_reporting": ["model.fasttrack_cost_reporting.t_cost_reporting"], "model.fasttrack_cost_reporting.t_snowflake_serverless_costs": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history", "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates"], "model.fasttrack_cost_reporting.t_consolidated_costs": ["model.fasttrack_cost_reporting.t_azure_costs", "model.fasttrack_cost_reporting.t_platform_additional_costs", "model.fasttrack_cost_reporting.t_snowflake_costs"], "model.fasttrack_cost_reporting.t_azure_costs": ["model.fasttrack_cost_reporting.t_valid_azure_daily_exports"], "model.fasttrack_cost_reporting.t_snowflake_costs": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend", "model.fasttrack_cost_reporting.t_snowflake_serverless_costs"], "model.fasttrack_cost_reporting.t_platform_additional_costs": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"], "model.fasttrack_cost_reporting.t_valid_azure_daily_exports": ["model.fasttrack_cost_reporting.stg_azure_daily_exports"], "model.fasttrack_cost_reporting.t_azure_tags": ["model.fasttrack_cost_reporting.t_valid_azure_daily_exports"], "model.fasttrack_cost_reporting.t_snowflake_tags": ["model.fasttrack_cost_reporting.stg_snowflake_account_tag_references"], "model.fasttrack_cost_reporting.t_consolidated_tags": ["model.fasttrack_cost_reporting.t_azure_tags", "model.fasttrack_cost_reporting.t_platform_additional_tags", "model.fasttrack_cost_reporting.t_snowflake_tags"], "model.fasttrack_cost_reporting.t_platform_additional_tags": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"], "model.fasttrack_cost_reporting.t_cost_reporting": ["model.fasttrack_cost_reporting.t_consolidated_costs", "model.fasttrack_cost_reporting.t_consolidated_tags"], "model.fasttrack_cost_reporting.t_cost_reporting_tags": ["model.fasttrack_cost_reporting.t_consolidated_costs", "model.fasttrack_cost_reporting.t_consolidated_tags"], "test.fasttrack_cost_reporting.stg_azure_daily_exports__validate_key_cols": ["model.fasttrack_cost_reporting.stg_azure_daily_exports"], "test.fasttrack_cost_reporting.stg_platform_references_additional_costs__validate_key_cols": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"], "test.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history__validate_key_cols": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"], "model.dbt_snowflake_monitoring.query_direct_object_access": ["model.dbt_snowflake_monitoring.stg_access_history"], "model.dbt_snowflake_monitoring.query_base_table_access": ["model.dbt_snowflake_monitoring.query_base_object_access"], "model.dbt_snowflake_monitoring.daily_rates": ["model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view", "model.dbt_snowflake_monitoring.stg_rate_sheet_daily"], "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view": ["model.dbt_snowflake_monitoring.stg_remaining_balance_daily"], "model.dbt_snowflake_monitoring.daily_spend": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.hourly_spend": ["model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "model.dbt_snowflake_monitoring.stg_metering_daily_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_serverless_task_history", "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history", "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily"], "model.dbt_snowflake_monitoring.query_history_enriched": ["model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.stg_query_history"], "model.dbt_snowflake_monitoring.dbt_queries": ["model.dbt_snowflake_monitoring.query_history_enriched"], "model.dbt_snowflake_monitoring.query_direct_table_access": ["model.dbt_snowflake_monitoring.query_direct_object_access"], "model.dbt_snowflake_monitoring.query_base_object_access": ["model.dbt_snowflake_monitoring.stg_access_history"], "model.dbt_snowflake_monitoring.warehouse_credits_map": [], "model.dbt_snowflake_monitoring.warehouses_type2_dimension": ["model.dbt_snowflake_monitoring.stg_query_history"], "model.dbt_snowflake_monitoring.cost_per_query": ["model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_query_history", "model.dbt_snowflake_monitoring.stg_warehouse_metering_history"], "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily"], "model.dbt_snowflake_monitoring.stg_remaining_balance_daily": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily"], "model.dbt_snowflake_monitoring.stg_serverless_task_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history"], "model.dbt_snowflake_monitoring.stg_access_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.access_history"], "model.dbt_snowflake_monitoring.stg_rate_sheet_daily": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily"], "model.dbt_snowflake_monitoring.stg_metering_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history"], "model.dbt_snowflake_monitoring.stg_metering_daily_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history"], "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history"], "model.dbt_snowflake_monitoring.stg_database_storage_usage_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history"], "model.dbt_snowflake_monitoring.stg_warehouse_metering_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history"], "model.dbt_snowflake_monitoring.stg_query_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.query_history"], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.fasttrack_cost_reporting.not_null_stg_azure_daily_exports_ingested_at.b7fae96aec": ["model.fasttrack_cost_reporting.stg_azure_daily_exports"], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_azure_daily_exports_unique_key.327a7440f8": ["model.fasttrack_cost_reporting.stg_azure_daily_exports"], "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_platform.9a315c9cfe": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"], "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_billing_date.aa8675ce9f": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"], "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_resource.9efadf8ebf": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"], "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_spend.af4fa432a5": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_platform_references_additional_costs_unique_key.fe1824bcd0": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"], "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_id.88c5e2ab29": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"], "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_name.9163515cfb": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"], "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_start_time.47804d07ac": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"], "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_credits_used.20ecc634fe": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_account_pipe_usage_history_unique_key.04d5b1cccb": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_ref_date.0f932b0a21": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates"], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_effective_rate.af4aa13c9e": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates"], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_ref_date.7a60765288": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_service.9b10de093f": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_spend.2260f1a9a9": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_monitoring_daily_spend_unique_key.65e22c6801": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_f_cost_reporting_unique_key.60890aab9f": ["model.fasttrack_cost_reporting.f_cost_reporting"], "test.fasttrack_cost_reporting.not_null_f_cost_reporting_platform.b2a4d8740e": ["model.fasttrack_cost_reporting.f_cost_reporting"], "test.fasttrack_cost_reporting.not_null_f_cost_reporting_billingdate.d5e3ce003d": ["model.fasttrack_cost_reporting.f_cost_reporting"], "test.fasttrack_cost_reporting.not_null_f_cost_reporting_granularity.929559885d": ["model.fasttrack_cost_reporting.f_cost_reporting"], "test.fasttrack_cost_reporting.accepted_values_f_cost_reporting_granularity__True__daily__weekly__monthly.df184bd1cf": ["model.fasttrack_cost_reporting.f_cost_reporting"], "test.fasttrack_cost_reporting.not_null_f_cost_reporting_spend.2ca305a830": ["model.fasttrack_cost_reporting.f_cost_reporting"], "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d": ["model.dbt_snowflake_monitoring.cost_per_query"], "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b": ["model.dbt_snowflake_monitoring.cost_per_query"], "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_qty__varchar.699c064453": ["source.fasttrack_cost_reporting.platform_references.additional_costs"], "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_price__varchar.975636f35f": ["source.fasttrack_cost_reporting.platform_references.additional_costs"], "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_azure_exports_daily_mtd_costinusd__varchar.4e3408ed13": ["source.fasttrack_cost_reporting.azure_exports.daily_mtd"], "source.fasttrack_cost_reporting.platform_references.additional_costs": [], "source.fasttrack_cost_reporting.snowflake_account_usage.pipe_usage_history": [], "source.fasttrack_cost_reporting.snowflake_account_usage.tags": [], "source.fasttrack_cost_reporting.snowflake_account_usage.tag_references": [], "source.fasttrack_cost_reporting.azure_exports.daily_mtd": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.access_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.query_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history": [], "source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily": [], "source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily": [], "source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily": [], "unit_test.fasttrack_cost_reporting.stg_platform_references_additional_costs.stg_platform_references_additional_costs__validate_results": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "child_map": {"model.fasttrack_cost_reporting.stg_azure_daily_exports": ["model.fasttrack_cost_reporting.t_valid_azure_daily_exports", "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_azure_daily_exports_unique_key.327a7440f8", "test.fasttrack_cost_reporting.not_null_stg_azure_daily_exports_ingested_at.b7fae96aec", "test.fasttrack_cost_reporting.stg_azure_daily_exports__validate_key_cols"], "model.fasttrack_cost_reporting.stg_platform_references_additional_costs": ["model.fasttrack_cost_reporting.t_platform_additional_costs", "model.fasttrack_cost_reporting.t_platform_additional_tags", "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_platform_references_additional_costs_unique_key.fe1824bcd0", "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_billing_date.aa8675ce9f", "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_platform.9a315c9cfe", "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_resource.9efadf8ebf", "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_spend.af4fa432a5", "test.fasttrack_cost_reporting.stg_platform_references_additional_costs__validate_key_cols", "unit_test.fasttrack_cost_reporting.stg_platform_references_additional_costs.stg_platform_references_additional_costs__validate_results"], "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history": ["model.fasttrack_cost_reporting.t_snowflake_serverless_costs", "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_account_pipe_usage_history_unique_key.04d5b1cccb", "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_credits_used.20ecc634fe", "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_id.88c5e2ab29", "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_name.9163515cfb", "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_start_time.47804d07ac", "test.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history__validate_key_cols"], "model.fasttrack_cost_reporting.stg_snowflake_account_tag_references": ["model.fasttrack_cost_reporting.t_snowflake_tags"], "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend": ["model.fasttrack_cost_reporting.t_snowflake_costs", "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_monitoring_daily_spend_unique_key.65e22c6801", "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_ref_date.7a60765288", "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_service.9b10de093f", "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_spend.2260f1a9a9"], "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates": ["model.fasttrack_cost_reporting.t_snowflake_serverless_costs", "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_effective_rate.af4aa13c9e", "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_ref_date.0f932b0a21"], "model.fasttrack_cost_reporting.d_cost_reporting_tags": [], "model.fasttrack_cost_reporting.f_cost_reporting": ["test.fasttrack_cost_reporting.accepted_values_f_cost_reporting_granularity__True__daily__weekly__monthly.df184bd1cf", "test.fasttrack_cost_reporting.dbt_constraints_primary_key_f_cost_reporting_unique_key.60890aab9f", "test.fasttrack_cost_reporting.not_null_f_cost_reporting_billingdate.d5e3ce003d", "test.fasttrack_cost_reporting.not_null_f_cost_reporting_granularity.929559885d", "test.fasttrack_cost_reporting.not_null_f_cost_reporting_platform.b2a4d8740e", "test.fasttrack_cost_reporting.not_null_f_cost_reporting_spend.2ca305a830"], "model.fasttrack_cost_reporting.t_snowflake_serverless_costs": ["model.fasttrack_cost_reporting.t_snowflake_costs"], "model.fasttrack_cost_reporting.t_consolidated_costs": ["model.fasttrack_cost_reporting.t_cost_reporting", "model.fasttrack_cost_reporting.t_cost_reporting_tags"], "model.fasttrack_cost_reporting.t_azure_costs": ["model.fasttrack_cost_reporting.t_consolidated_costs"], "model.fasttrack_cost_reporting.t_snowflake_costs": ["model.fasttrack_cost_reporting.t_consolidated_costs"], "model.fasttrack_cost_reporting.t_platform_additional_costs": ["model.fasttrack_cost_reporting.t_consolidated_costs"], "model.fasttrack_cost_reporting.t_valid_azure_daily_exports": ["model.fasttrack_cost_reporting.t_azure_costs", "model.fasttrack_cost_reporting.t_azure_tags"], "model.fasttrack_cost_reporting.t_azure_tags": ["model.fasttrack_cost_reporting.t_consolidated_tags"], "model.fasttrack_cost_reporting.t_snowflake_tags": ["model.fasttrack_cost_reporting.t_consolidated_tags"], "model.fasttrack_cost_reporting.t_consolidated_tags": ["model.fasttrack_cost_reporting.t_cost_reporting", "model.fasttrack_cost_reporting.t_cost_reporting_tags"], "model.fasttrack_cost_reporting.t_platform_additional_tags": ["model.fasttrack_cost_reporting.t_consolidated_tags"], "model.fasttrack_cost_reporting.t_cost_reporting": ["model.fasttrack_cost_reporting.f_cost_reporting"], "model.fasttrack_cost_reporting.t_cost_reporting_tags": ["model.fasttrack_cost_reporting.d_cost_reporting_tags"], "test.fasttrack_cost_reporting.stg_azure_daily_exports__validate_key_cols": [], "test.fasttrack_cost_reporting.stg_platform_references_additional_costs__validate_key_cols": [], "test.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history__validate_key_cols": [], "model.dbt_snowflake_monitoring.query_direct_object_access": ["model.dbt_snowflake_monitoring.query_direct_table_access"], "model.dbt_snowflake_monitoring.query_base_table_access": [], "model.dbt_snowflake_monitoring.daily_rates": ["model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.hourly_spend", "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates"], "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view": ["model.dbt_snowflake_monitoring.daily_rates"], "model.dbt_snowflake_monitoring.daily_spend": ["model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend"], "model.dbt_snowflake_monitoring.hourly_spend": ["model.dbt_snowflake_monitoring.daily_spend"], "model.dbt_snowflake_monitoring.query_history_enriched": ["model.dbt_snowflake_monitoring.dbt_queries"], "model.dbt_snowflake_monitoring.dbt_queries": [], "model.dbt_snowflake_monitoring.query_direct_table_access": [], "model.dbt_snowflake_monitoring.query_base_object_access": ["model.dbt_snowflake_monitoring.query_base_table_access"], "model.dbt_snowflake_monitoring.warehouse_credits_map": [], "model.dbt_snowflake_monitoring.warehouses_type2_dimension": [], "model.dbt_snowflake_monitoring.cost_per_query": ["model.dbt_snowflake_monitoring.query_history_enriched", "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b", "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d"], "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_remaining_balance_daily": ["model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view"], "model.dbt_snowflake_monitoring.stg_serverless_task_history": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_access_history": ["model.dbt_snowflake_monitoring.query_base_object_access", "model.dbt_snowflake_monitoring.query_direct_object_access"], "model.dbt_snowflake_monitoring.stg_rate_sheet_daily": ["model.dbt_snowflake_monitoring.daily_rates"], "model.dbt_snowflake_monitoring.stg_metering_history": ["model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_metering_daily_history": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_database_storage_usage_history": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_warehouse_metering_history": ["model.dbt_snowflake_monitoring.cost_per_query"], "model.dbt_snowflake_monitoring.stg_query_history": ["model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.query_history_enriched", "model.dbt_snowflake_monitoring.warehouses_type2_dimension"], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.fasttrack_cost_reporting.not_null_stg_azure_daily_exports_ingested_at.b7fae96aec": [], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_azure_daily_exports_unique_key.327a7440f8": [], "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_platform.9a315c9cfe": [], "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_billing_date.aa8675ce9f": [], "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_resource.9efadf8ebf": [], "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_spend.af4fa432a5": [], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_platform_references_additional_costs_unique_key.fe1824bcd0": [], "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_id.88c5e2ab29": [], "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_name.9163515cfb": [], "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_start_time.47804d07ac": [], "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_credits_used.20ecc634fe": [], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_account_pipe_usage_history_unique_key.04d5b1cccb": [], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_ref_date.0f932b0a21": [], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_effective_rate.af4aa13c9e": [], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_ref_date.7a60765288": [], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_service.9b10de093f": [], "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_spend.2260f1a9a9": [], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_monitoring_daily_spend_unique_key.65e22c6801": [], "test.fasttrack_cost_reporting.dbt_constraints_primary_key_f_cost_reporting_unique_key.60890aab9f": [], "test.fasttrack_cost_reporting.not_null_f_cost_reporting_platform.b2a4d8740e": [], "test.fasttrack_cost_reporting.not_null_f_cost_reporting_billingdate.d5e3ce003d": [], "test.fasttrack_cost_reporting.not_null_f_cost_reporting_granularity.929559885d": [], "test.fasttrack_cost_reporting.accepted_values_f_cost_reporting_granularity__True__daily__weekly__monthly.df184bd1cf": [], "test.fasttrack_cost_reporting.not_null_f_cost_reporting_spend.2ca305a830": [], "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d": [], "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b": [], "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_qty__varchar.699c064453": [], "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_price__varchar.975636f35f": [], "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_azure_exports_daily_mtd_costinusd__varchar.4e3408ed13": [], "source.fasttrack_cost_reporting.platform_references.additional_costs": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs", "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_price__varchar.975636f35f", "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_qty__varchar.699c064453"], "source.fasttrack_cost_reporting.snowflake_account_usage.pipe_usage_history": ["model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history"], "source.fasttrack_cost_reporting.snowflake_account_usage.tags": ["model.fasttrack_cost_reporting.stg_snowflake_account_tag_references"], "source.fasttrack_cost_reporting.snowflake_account_usage.tag_references": ["model.fasttrack_cost_reporting.stg_snowflake_account_tag_references"], "source.fasttrack_cost_reporting.azure_exports.daily_mtd": ["model.fasttrack_cost_reporting.stg_azure_daily_exports", "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_azure_exports_daily_mtd_costinusd__varchar.4e3408ed13"], "source.dbt_snowflake_monitoring.snowflake_account_usage.access_history": ["model.dbt_snowflake_monitoring.stg_access_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history": ["model.dbt_snowflake_monitoring.stg_database_storage_usage_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history": ["model.dbt_snowflake_monitoring.stg_metering_daily_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history": ["model.dbt_snowflake_monitoring.stg_metering_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.query_history": ["model.dbt_snowflake_monitoring.stg_query_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history": ["model.dbt_snowflake_monitoring.stg_serverless_task_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history": ["model.dbt_snowflake_monitoring.stg_stage_storage_usage_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history": ["model.dbt_snowflake_monitoring.stg_warehouse_metering_history"], "source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily": ["model.dbt_snowflake_monitoring.stg_rate_sheet_daily"], "source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily": ["model.dbt_snowflake_monitoring.stg_remaining_balance_daily"], "source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily": ["model.dbt_snowflake_monitoring.stg_usage_in_currency_daily"], "unit_test.fasttrack_cost_reporting.stg_platform_references_additional_costs.stg_platform_references_additional_costs__validate_results": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {"unit_test.fasttrack_cost_reporting.stg_platform_references_additional_costs.stg_platform_references_additional_costs__validate_results": {"model": "stg_platform_references_additional_costs", "given": [{"input": "source('platform_references', 'additional_costs')", "rows": [{"PLATFORM": "x1", "SERVICECHARGE": "x1.daily", "SERVICESUBCHARGE": "a cost", "BILLINGDATEFROM": "2024-01-01", "BILLINGDATETO": "2024-01-03", "QTY": "5.000000000000", "PRICE": "0.250000000000", "CURRENCY": "USD", "GRANULARITY": "daily"}, {"PLATFORM": "x1", "SERVICECHARGE": "x1.daily", "SERVICESUBCHARGE": "a cost", "BILLINGDATEFROM": "2024-01-02", "BILLINGDATETO": "2024-01-04", "QTY": "5.000000000000", "PRICE": "0.500000000000", "CURRENCY": "USD", "GRANULARITY": "daily"}, {"PLATFORM": "x1", "SERVICECHARGE": "x1.daily", "SERVICESUBCHARGE": "some cost", "BILLINGDATEFROM": "2024-01-03", "BILLINGDATETO": "2024-01-05", "QTY": "2.000000000000", "PRICE": "2.500000000000", "CURRENCY": "USD", "GRANULARITY": "daily"}, {"PLATFORM": "x1", "SERVICECHARGE": "x1.daily", "SERVICESUBCHARGE": "a cost", "BILLINGDATEFROM": "2024-01-07", "BILLINGDATETO": "2024-01-07", "QTY": "5.000000000000", "PRICE": "0.500000000000", "CURRENCY": "USD", "GRANULARITY": "daily"}, {"PLATFORM": "x2", "SERVICECHARGE": "x2.weekly", "SERVICESUBCHARGE": "some cost", "BILLINGDATEFROM": "2024-01-01", "BILLINGDATETO": "2024-03-31", "QTY": "15.000000000000", "PRICE": "1.250000000000", "CURRENCY": "USD", "GRANULARITY": "weekly"}, {"PLATFORM": "x3", "SERVICECHARGE": "x3.monthly", "SERVICESUBCHARGE": "a cost", "BILLINGDATEFROM": "2024-01-01", "BILLINGDATETO": "2024-03-15", "QTY": "2.000000000000", "PRICE": "3.750000000000", "CURRENCY": "USD", "GRANULARITY": "monthly"}, {"PLATFORM": "x4", "SERVICECHARGE": "x4.yearly", "SERVICESUBCHARGE": "yrly cost", "BILLINGDATEFROM": "2024-01-01", "BILLINGDATETO": "2024-02-10", "QTY": "1.000000000000", "PRICE": "100.000000000000", "CURRENCY": "USD", "GRANULARITY": "yearly"}], "format": "csv", "fixture": "stg_platform_references_additional_costs__mock_input"}], "expect": {"rows": [{"BILLING_DATE": "2024-01-01", "PLATFORM": "x1", "SERVICE_CATEGORY": "x1.daily", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "1.250000000000"}, {"BILLING_DATE": "2024-01-01", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-01-01", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.300000000000"}, {"BILLING_DATE": "2024-01-01", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.800000000000"}, {"BILLING_DATE": "2024-01-02", "PLATFORM": "x1", "SERVICE_CATEGORY": "x1.daily", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "2.500000000000"}, {"BILLING_DATE": "2024-01-02", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-02", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-02", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-03", "PLATFORM": "x1", "SERVICE_CATEGORY": "x1.daily", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "2.500000000000"}, {"BILLING_DATE": "2024-01-03", "PLATFORM": "x1", "SERVICE_CATEGORY": "x1.daily", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "5.000000000000"}, {"BILLING_DATE": "2024-01-03", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-03", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-03", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-04", "PLATFORM": "x1", "SERVICE_CATEGORY": "x1.daily", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "2.500000000000"}, {"BILLING_DATE": "2024-01-04", "PLATFORM": "x1", "SERVICE_CATEGORY": "x1.daily", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "5.000000000000"}, {"BILLING_DATE": "2024-01-04", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-04", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-04", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-05", "PLATFORM": "x1", "SERVICE_CATEGORY": "x1.daily", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "5.000000000000"}, {"BILLING_DATE": "2024-01-05", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-05", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-05", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-06", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-06", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-06", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-07", "PLATFORM": "x1", "SERVICE_CATEGORY": "x1.daily", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "2.500000000000"}, {"BILLING_DATE": "2024-01-07", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-07", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-07", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-08", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-01-08", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-08", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-09", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-09", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-09", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-10", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-10", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-10", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-11", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-11", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-11", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-12", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-12", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-12", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-13", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-13", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-13", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-14", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-14", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-14", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-15", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-01-15", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-15", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-16", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-16", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-16", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-17", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-17", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-17", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-18", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-18", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-18", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-19", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-19", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-19", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-20", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-20", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-20", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-21", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-21", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-21", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-22", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-01-22", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-22", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-23", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-23", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-23", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-24", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-24", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-24", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-25", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-25", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-25", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-26", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-26", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-26", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-27", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-27", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-27", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-28", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-28", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-28", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-29", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-01-29", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-29", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-30", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-30", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-30", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-01-31", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-01-31", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.240000000000"}, {"BILLING_DATE": "2024-01-31", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-01", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-01", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-02-01", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-02", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-02", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-02", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-03", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-03", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-03", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-04", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-04", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-04", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-05", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-02-05", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-05", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-06", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-06", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-06", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-07", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-07", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-07", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-08", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-08", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-08", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-09", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-09", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-09", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-10", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-10", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-10", "PLATFORM": "x4", "SERVICE_CATEGORY": "x4.yearly", "SERVICE_SUBCATEGORY": "yrly cost", "SPEND": "2.430000000000"}, {"BILLING_DATE": "2024-02-11", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-11", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-12", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-02-12", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-13", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-13", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-14", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-14", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-15", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-15", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-16", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-16", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-17", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-17", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-18", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-18", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-19", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-02-19", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-20", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-20", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-21", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-21", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-22", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-22", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-23", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-23", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-24", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-24", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-25", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-25", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-26", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-02-26", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-27", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-27", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-28", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-28", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-02-29", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-02-29", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.250000000000"}, {"BILLING_DATE": "2024-03-01", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-01", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-02", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-02", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-03", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-03", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-04", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-03-04", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-05", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-05", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-06", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-06", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-07", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-07", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-08", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-08", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-09", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-09", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-10", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-10", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-11", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-03-11", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-12", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-12", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-13", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-13", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-14", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-14", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-15", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-15", "PLATFORM": "x3", "SERVICE_CATEGORY": "x3.monthly", "SERVICE_SUBCATEGORY": "a cost", "SPEND": "0.500000000000"}, {"BILLING_DATE": "2024-03-16", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-17", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-18", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-03-19", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-20", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-21", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-22", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-23", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-24", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-25", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.730000000000"}, {"BILLING_DATE": "2024-03-26", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-27", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-28", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-29", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-30", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}, {"BILLING_DATE": "2024-03-31", "PLATFORM": "x2", "SERVICE_CATEGORY": "x2.weekly", "SERVICE_SUBCATEGORY": "some cost", "SPEND": "2.670000000000"}], "format": "csv", "fixture": "stg_platform_references_additional_costs__expected_output"}, "name": "stg_platform_references_additional_costs__validate_results", "resource_type": "unit_test", "package_name": "fasttrack_cost_reporting", "path": "staging/platform/stg_platform_references_additional_costs.yml", "original_file_path": "models/staging/platform/stg_platform_references_additional_costs.yml", "unique_id": "unit_test.fasttrack_cost_reporting.stg_platform_references_additional_costs.stg_platform_references_additional_costs__validate_results", "fqn": ["fasttrack_cost_reporting", "staging", "platform", "stg_platform_references_additional_costs", "stg_platform_references_additional_costs__validate_results"], "description": "unit test to ensure date interpolation is consistent across supported granularities", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.fasttrack_cost_reporting.stg_platform_references_additional_costs"]}, "config": {"tags": ["tests_cost_reporting"], "meta": {}, "enabled": true}, "checksum": "fc71b91c2deccd42fa23f6136798f45c8a334b60387b43733bad0cb60c0bfae2", "schema": "transform_cost_reporting", "created_at": 1742470392.668297, "versions": null, "version": null}}}