{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-03-20T11:34:38.298727Z", "invocation_id": "a04370fc-9687-4970-acd0-8beeeb59359c", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.053839Z", "completed_at": "2025-03-20T11:34:36.069600Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.069829Z", "completed_at": "2025-03-20T11:34:36.069838Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01848888397216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_access_history", "compiled": true, "compiled_code": "\n\nselect\n    query_id,\n    parent_query_id,\n    root_query_id,\n    query_start_time,\n    user_name,\n    direct_objects_accessed,\n    base_objects_accessed,\n    objects_modified\nfrom snowflake.account_usage.access_history\n\n\n    where query_start_time > (select coalesce(max(query_start_time), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_access_history)\n\n\norder by query_start_time asc", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_access_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.065934Z", "completed_at": "2025-03-20T11:34:36.071314Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.074617Z", "completed_at": "2025-03-20T11:34:36.074622Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02225208282470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_metering_daily_history", "compiled": true, "compiled_code": "\n\nselect\n    usage_date as date,\n    service_type,\n    credits_used_cloud_services,\n    credits_adjustment_cloud_services\nfrom snowflake.account_usage.metering_daily_history", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_daily_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.064236Z", "completed_at": "2025-03-20T11:34:36.071584Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.075017Z", "completed_at": "2025-03-20T11:34:36.075022Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022899866104125977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "compiled": true, "compiled_code": "\n\nselect\n    usage_date as date,\n    database_name,\n    average_database_bytes,\n    average_failsafe_bytes,\n    average_hybrid_table_storage_bytes\nfrom snowflake.account_usage.database_storage_usage_history", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_database_storage_usage_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.067625Z", "completed_at": "2025-03-20T11:34:36.074411Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.075441Z", "completed_at": "2025-03-20T11:34:36.075445Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022655010223388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_metering_history", "compiled": true, "compiled_code": "\n\nselect\n    service_type,\n    start_time,\n    end_time,\n    entity_id,\n    name,\n    credits_used_compute,\n    credits_used_cloud_services,\n    credits_used\nfrom snowflake.account_usage.metering_history\norder by start_time asc", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.071818Z", "completed_at": "2025-03-20T11:34:36.076348Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.077387Z", "completed_at": "2025-03-20T11:34:36.077391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006911039352416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_query_history", "compiled": true, "compiled_code": "\n\nselect\n    query_id,\n    query_text,\n    database_id,\n    database_name,\n    schema_id,\n    schema_name,\n    query_type,\n    session_id,\n    user_name,\n    role_name,\n    warehouse_id,\n    warehouse_name,\n    warehouse_size,\n    warehouse_type,\n    cluster_number,\n    query_tag,\n    execution_status,\n    error_code,\n    error_message,\n    start_time,\n    end_time,\n    total_elapsed_time,\n    bytes_scanned,\n    percentage_scanned_from_cache,\n    bytes_written,\n    bytes_written_to_result,\n    bytes_read_from_result,\n    rows_produced,\n    rows_inserted,\n    rows_updated,\n    rows_deleted,\n    rows_unloaded,\n    bytes_deleted,\n    partitions_scanned,\n    partitions_total,\n    bytes_spilled_to_local_storage,\n    bytes_spilled_to_remote_storage,\n    bytes_sent_over_the_network,\n    compilation_time,\n    execution_time,\n    queued_provisioning_time,\n    queued_repair_time,\n    queued_overload_time,\n    transaction_blocked_time,\n    outbound_data_transfer_cloud,\n    outbound_data_transfer_region,\n    outbound_data_transfer_bytes,\n    inbound_data_transfer_cloud,\n    inbound_data_transfer_region,\n    inbound_data_transfer_bytes,\n    list_external_files_time,\n    credits_used_cloud_services,\n    release_version,\n    external_function_total_invocations,\n    external_function_total_sent_rows,\n    external_function_total_received_rows,\n    external_function_total_sent_bytes,\n    external_function_total_received_bytes,\n    query_load_percent,\n    is_client_generated_statement,\n    query_acceleration_bytes_scanned,\n    query_acceleration_partitions_scanned,\n    query_acceleration_upper_limit_scale_factor,\n    query_hash,\n    query_hash_version,\n    query_parameterized_hash,\n    query_parameterized_hash_version,\n    query_retry_time,\n    query_retry_cause,\n    fault_handling_time\nfrom snowflake.account_usage.query_history\n\n\n    -- must use end time in case query hasn't completed\n    -- add lookback window of 2 days to account for late arriving queries\n    where end_time > (select dateadd(day, -2, coalesce(max(end_time), '1970-01-01') ) from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history)\n\n\norder by start_time", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.078386Z", "completed_at": "2025-03-20T11:34:36.085881Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.086187Z", "completed_at": "2025-03-20T11:34:36.086190Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009752750396728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_rate_sheet_daily", "compiled": true, "compiled_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_type,\n    currency,\n    effective_rate,\n    service_type\nfrom snowflake.organization_usage.rate_sheet_daily\norder by date", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_rate_sheet_daily", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.080812Z", "completed_at": "2025-03-20T11:34:36.086035Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.086721Z", "completed_at": "2025-03-20T11:34:36.086724Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009940147399902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_remaining_balance_daily", "compiled": true, "compiled_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom snowflake.organization_usage.remaining_balance_daily\norder by date", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_remaining_balance_daily", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.082325Z", "completed_at": "2025-03-20T11:34:36.086513Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.087344Z", "completed_at": "2025-03-20T11:34:36.087347Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01030588150024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_serverless_task_history", "compiled": true, "compiled_code": "\n\nselect\n    start_time,\n    end_time,\n    task_id,\n    task_name,\n    schema_id,\n    schema_name,\n    database_id,\n    database_name,\n    credits_used\nfrom snowflake.account_usage.serverless_task_history\n\n\n    where end_time > (select dateadd(day, -3, coalesce(max(end_time), '1970-01-01') ) from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_serverless_task_history)\n\n\norder by start_time", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_serverless_task_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.084541Z", "completed_at": "2025-03-20T11:34:36.087171Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.088090Z", "completed_at": "2025-03-20T11:34:36.088093Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004127979278564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history", "compiled": true, "compiled_code": "\n\nselect\n    usage_date as date,\n    average_stage_bytes\nfrom snowflake.account_usage.stage_storage_usage_history", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_stage_storage_usage_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.089464Z", "completed_at": "2025-03-20T11:34:36.095630Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.095843Z", "completed_at": "2025-03-20T11:34:36.095846Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008105993270874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily", "compiled": true, "compiled_code": "select\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_date,\n    usage_type,\n    currency,\n    usage,\n    usage_in_currency,\n    balance_source\nfrom snowflake.organization_usage.usage_in_currency_daily", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_usage_in_currency_daily", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.090971Z", "completed_at": "2025-03-20T11:34:36.096102Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.096420Z", "completed_at": "2025-03-20T11:34:36.096422Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007953882217407227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_warehouse_metering_history", "compiled": true, "compiled_code": "\n\nselect\n    start_time,\n    end_time,\n    warehouse_id,\n    warehouse_name,\n    credits_used,\n    credits_used_compute,\n    credits_used_cloud_services\nfrom snowflake.account_usage.warehouse_metering_history\n\n\n    -- account for changing metering data\n    where end_time > (select coalesce(dateadd(day, -7, max(end_time)), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_warehouse_metering_history)\n\n\norder by start_time", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_warehouse_metering_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.092705Z", "completed_at": "2025-03-20T11:34:36.096941Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.097519Z", "completed_at": "2025-03-20T11:34:36.097522Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00850820541381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.warehouse_credits_map", "compiled": true, "compiled_code": "\n\nwith\nwarehouse_credits_map as (\n    select * from (\n        values\n        ('X-Small', 'STANDARD', 1),\n        ('Small', 'STANDARD', 2),\n        ('Medium', 'STANDARD', 4),\n        ('Large', 'STANDARD', 8),\n        ('X-Large', 'STANDARD', 16),\n        ('2X-Large', 'STANDARD', 32),\n        ('3X-Large', 'STANDARD', 64),\n        ('4X-Large', 'STANDARD', 128),\n        ('5X-Large', 'STANDARD', 256),\n        ('6X-Large', 'STANDARD', 512),\n        ('Medium', 'SNOWPARK-OPTIMIZED', 6),\n        ('Large', 'SNOWPARK-OPTIMIZED', 12),\n        ('X-Large', 'SNOWPARK-OPTIMIZED', 24),\n        ('2X-Large', 'SNOWPARK-OPTIMIZED', 48),\n        ('3X-Large', 'SNOWPARK-OPTIMIZED', 96),\n        ('4X-Large', 'SNOWPARK-OPTIMIZED', 192),\n        ('5X-Large', 'SNOWPARK-OPTIMIZED', 384),\n        ('6X-Large', 'SNOWPARK-OPTIMIZED', 768)\n    ) as t (warehouse_size, warehouse_type, credits_per_hour)\n)\n\nselect\n    warehouse_size,\n    warehouse_type,\n    credits_per_hour,\n    credits_per_hour / 60 as credits_per_minute,\n    credits_per_hour / 3600 as credits_per_second\nfrom warehouse_credits_map", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.warehouse_credits_map", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.093853Z", "completed_at": "2025-03-20T11:34:36.097081Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.097784Z", "completed_at": "2025-03-20T11:34:36.097786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007252931594848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.stg_azure_daily_exports", "compiled": true, "compiled_code": "\n\nselect\n  billingaccountname as billing_account_name,\n  partnername as partner_name,\n  resellername as reseller_name,\n  resellermpnid as reseller_mpn_id,\n  customertenantid as customer_tenant_id,\n  customername as customer_name,\n  costcenter as cost_center,\n  billingperiodenddate::date as billing_period_end_date,\n  billingperiodstartdate::date as billing_period_start_date,\n  serviceperiodenddate::date as service_period_end_date,\n  serviceperiodstartdate::date as service_period_start_date,\n  billingdate::date as billing_date,\n  servicefamily as service_family,\n  productorderid as product_order_id,\n  productordername as product_order_name,\n  consumedservice as consumed_service,\n  coalesce(meterid, '') as meter_id,\n  metername as meter_name,\n  metercategory as meter_category,\n  metersubcategory as meter_subcategory,\n  meterregion as meter_region,\n  productid as product_id,\n  productname as product_name,\n  subscriptionid as subscription_id,\n  subscriptionname as subscription_name,\n  publishertype as publisher_type,\n  publisherid as publisher_id,\n  publishername as publisher_name,\n  resourcegroupname as resource_group_name,\n  coalesce(resourceid, '') as resource_id,\n  resourcelocation as resource_location,\n  location,\n  effectiveprice::number(38,12) as effective_price,\n  quantity::number(38,12) as quantity,\n  unitofmeasure as unit_of_measure,\n  chargetype as charge_type,\n  billingcurrency as billing_currency,\n  pricingcurrency as pricing_currency,\n  costinbillingcurrency::number(38,12) as cost_in_billing_currency,\n  costinusd::number(38,12) as cost_in_usd,\n  exchangeratepricingtobilling::number(38,12) as exchange_rate_pricing_to_billing,\n  exchangeratedate::date as exchange_rate_date,\n  serviceinfo1 as service_info_1,\n  serviceinfo2 as service_info_2,\n  additionalinfo as additional_info,\n  try_parse_json(tags) as tags,\n  paygprice::number(38,12) as payg_price,\n  frequency,\n  term,\n  reservationid as reservation_id,\n  reservationname as reservation_name,\n  pricingmodel as pricing_model,\n  unitprice::number(38,12) as unit_price,\n  benefitid as benefit_id,\n  benefitname as benefit_name,\n  provider,\n  subscription,\n  path,\n  ingested_date,\n  ingested_at,\n  batch_timestamp,\n  abs(\n    hash(\n      billing_date || resource_id || meter_id\n    )\n  ) as unique_key,\n  sysdate() as dbt_loaded_at\nfrom fasttrack_cost_reporting_dev.landing_azure_cost_data_export.dailyexportmtd\nwhere billingdate::date is not null\n  and ingested_at > (\n    select coalesce(max(ingested_at), '2001-01-01')\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\n  )\nqualify row_number() over (\n  partition by unique_key\n  order by ingested_at desc\n) = 1", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.098248Z", "completed_at": "2025-03-20T11:34:36.103031Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.107938Z", "completed_at": "2025-03-20T11:34:36.107941Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011302947998046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.stg_platform_references_additional_costs", "compiled": true, "compiled_code": "\n\nwith\n\n_src_costs as (\n  select distinct\n    granularity,\n    lower(trim(platform)) as platform,\n    date(billingdatefrom) as date_from,\n    date(billingdateto) as date_to,\n    coalesce(servicecharge, '') as category,\n    coalesce(servicesubcharge, '') as sub_category,\n    qty::decimal(38,12) as qty,\n    price::decimal(38,12) as price,\n    upper(left(trim(currency), 3)) as currency\n  from fasttrack_cost_reporting_dev.reference_cost_reporting.fasttrack_additional_platform_costs\n  where currency ilike '%USD%' \n),\n\n_enhance_costs as (\n  select\n    * exclude (granularity),\n\n    case\n      when granularity ilike '%da%' then 'daily'\n      when granularity ilike '%we%' then 'weekly'\n      when granularity ilike '%mo%' then 'monthly'\n      when granularity ilike '%ye%' then 'yearly'\n    end as granularity\n  from _src_costs\n  where len(platform) > 0\n    and date_from <= date_to\n),\n\n_dedup_costs as (\n  select\n    *,\n\n    hash(s.*) as hash_key,\n    (qty * price)::decimal(38,12) as spend_sum\n  from _enhance_costs as s\n  where granularity is not null\n    and abs(spend_sum) > 0\n  qualify row_number() over (\n    partition by hash_key\n    order by 0\n  ) = 1\n),\n\n_expand_costs as (\n  select \n    d.*,\n    -1 + row_number() over(partition by hash_key order by 0) as i,\n    date_from + i as gen_date,\n    case granularity\n      when 'weekly' then date_trunc('week', date_from + i)\n      when 'monthly' then date_trunc('month', date_from + i)\n      when 'yearly' then date_trunc('year', date_from + i)\n      else date_from + i\n    end as trunc_date\n  from _dedup_costs as d, table(generator(rowcount => 10000))\n  qualify i < 1 + date_to - date_from\n),\n\n_window_costs as (\n  select  \n    count(1) over (partition by hash_key, trunc_date) as cnt,\n    (floor(spend_sum * 100 / cnt)::int / 100)::decimal(38,2) as frac_spend,\n\n    case\n      when cnt > 1 and gen_date = trunc_date then spend_sum - frac_spend*(cnt-1)\n      when cnt > 1 and gen_date > trunc_date then frac_spend\n      else spend_sum\n    end::decimal(38, 12) as spend,\n    \n    *\n  from _expand_costs\n)\n\nselect\n  platform,\n  gen_date as billing_date,\n  platform as account,\n  category as service_category,\n  sub_category as service_subcategory,\n\n  concat(\n    'Daily derived cost based on QTY: ',\n    round(qty, 2),\n     ' * PRICE: ',\n    round(price, 2),\n    ' / by ',\n    'N', --cnt,\n    ' days in each ',\n    granularity,\n    ' period'\n  ) as resource, \n  \n  spend,\n\n  abs(\n    hash(\n      concat(billing_date, platform, service_category, service_subcategory, granularity)\n    )\n  ) as unique_key,\n\n  sysdate() as dbt_loaded_at\nfrom _window_costs\nqualify row_number() over (\n  partition by unique_key\n  order by spend desc --> pick highest spend in case of overlapping dates for the same cost base\n) = 1\norder by billing_date, platform, service_category, service_subcategory, granularity", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.104418Z", "completed_at": "2025-03-20T11:34:36.108240Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.108621Z", "completed_at": "2025-03-20T11:34:36.108623Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007572174072265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "compiled": true, "compiled_code": "", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.101329Z", "completed_at": "2025-03-20T11:34:36.108353Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.108904Z", "completed_at": "2025-03-20T11:34:36.108907Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01094198226928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history", "compiled": true, "compiled_code": "\n\nselect\n  pipe_id,\n  pipe_name,\n  start_time,\n  end_time,\n  coalesce(credits_used, 0) as credits_used,\n  bytes_inserted,\n  files_inserted,\n\n  abs(hash(extract('epoch_second', start_time) || pipe_id)) as unique_key,\n  sysdate() as dbt_loaded_at\nfrom snowflake.account_usage.pipe_usage_history\nwhere pipe_id is not null\n  and start_time > (\n    select coalesce(max(start_time), '2001-01-01')\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\n  )\nqualify row_number() over (\n  partition by unique_key\n  order by start_time, end_time\n) = 1", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.103183Z", "completed_at": "2025-03-20T11:34:36.109398Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.109970Z", "completed_at": "2025-03-20T11:34:36.109972Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009208917617797852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.stg_snowflake_account_tag_references", "compiled": true, "compiled_code": "select\n  tr.tag_database,\n  tr.tag_schema,\n  tr.tag_id,\n  tr.tag_name,\n  tr.tag_value,\n  tr.object_database,\n  tr.object_schema,\n  tr.object_id,\n  tr.object_name,\n  tr.object_deleted,\n  tr.domain,\n  tr.column_id,\n  tr.column_name,\n  ta.tag_schema_id,\n  ta.tag_database_id,\n  ta.tag_owner,\n  ta.tag_comment,\n  ta.created,\n  ta.last_altered,\n  ta.deleted,\n  ta.allowed_values,\n  ta.owner_role_type,\n  sysdate() as dbt_loaded_at\nfrom snowflake.account_usage.tags as ta\njoin snowflake.account_usage.tag_references as tr on (\n  ta.tag_id = tr.tag_id\n)", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_tag_references", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.110657Z", "completed_at": "2025-03-20T11:34:36.117688Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.119444Z", "completed_at": "2025-03-20T11:34:36.119447Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010304927825927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_azure_exports_daily_mtd_costinusd__varchar.4e3408ed13", "compiled": true, "compiled_code": "\n\nselect left(system$typeof(col), 7) as data_type from (\n  select max(costinusd) as col from fasttrack_cost_reporting_dev.landing_azure_cost_data_export.dailyexportmtd\n)\nwhere data_type not ilike 'varchar%'\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.114691Z", "completed_at": "2025-03-20T11:34:36.119730Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.120145Z", "completed_at": "2025-03-20T11:34:36.120147Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009994983673095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_price__varchar.975636f35f", "compiled": true, "compiled_code": "\n\nselect left(system$typeof(col), 7) as data_type from (\n  select max(price) as col from fasttrack_cost_reporting_dev.reference_cost_reporting.fasttrack_additional_platform_costs\n)\nwhere data_type not ilike 'varchar%'\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.116118Z", "completed_at": "2025-03-20T11:34:36.119982Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.120690Z", "completed_at": "2025-03-20T11:34:36.120693Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011085033416748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.source_expect_column_to_be_of_type_platform_references_additional_costs_qty__varchar.699c064453", "compiled": true, "compiled_code": "\n\nselect left(system$typeof(col), 7) as data_type from (\n  select max(qty) as col from fasttrack_cost_reporting_dev.reference_cost_reporting.fasttrack_additional_platform_costs\n)\nwhere data_type not ilike 'varchar%'\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.117924Z", "completed_at": "2025-03-20T11:34:36.120373Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.121811Z", "completed_at": "2025-03-20T11:34:36.121813Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007395744323730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_base_object_access", "compiled": true, "compiled_code": "\n\nwith\naccess_history as (\n    select *\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_access_history\n\n    \n        where query_start_time > (select coalesce(dateadd('day', -1, max(query_start_time)), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_base_object_access)\n    \n\n),\n\naccess_history_flattened as (\n    select\n        access_history.query_id,\n        access_history.query_start_time,\n        access_history.user_name,\n        objects_accessed.value:objectId::integer as table_id, -- will be null for secured views or tables from a data share\n        objects_accessed.value:objectName::text as object_name,\n        objects_accessed.value:objectDomain::text as object_domain,\n        objects_accessed.value:columns as columns_array\n\n    from access_history, lateral flatten(access_history.base_objects_accessed) as objects_accessed\n),\n\naccess_history_flattened_w_columns as (\n    select\n        access_history_flattened.query_id,\n        access_history_flattened.query_start_time,\n        access_history_flattened.user_name,\n        access_history_flattened.table_id,\n        access_history_flattened.object_name,\n        access_history_flattened.object_domain,\n        array_agg(distinct columns.value:columnName::text) as columns_accessed\n    from access_history_flattened, lateral flatten(access_history_flattened.columns_array) as columns\n    where\n        access_history_flattened.object_name is not null\n    group by 1, 2, 3, 4, 5, 6\n)\n\nselect\n    md5(concat(query_id, object_name)) as _unique_id,\n    *\nfrom access_history_flattened_w_columns\norder by query_start_time asc", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_base_object_access", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.122617Z", "completed_at": "2025-03-20T11:34:36.127979Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.128275Z", "completed_at": "2025-03-20T11:34:36.128277Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007860898971557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_direct_object_access", "compiled": true, "compiled_code": "\n\nwith\n    access_history as (\n        select *\n        from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_access_history\n\n        \n            where\n                query_start_time > (\n                    select\n                        coalesce(\n                            dateadd('day', -1, max(query_start_time)), '1970-01-01'\n                        )\n                    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_direct_object_access\n                )\n        \n\n    ),\n\n    access_history_flattened as (\n        select\n            access_history.query_id,\n            access_history.query_start_time,\n            access_history.user_name,\n            objects_accessed.value:objectid::integer as table_id,  -- will be null for secured views or tables from a data share\n            objects_accessed.value:objectname::text as object_name,\n            objects_accessed.value:objectdomain::text as object_domain,\n            objects_accessed.value:columns as columns_array\n\n        from\n            access_history,\n            lateral flatten(access_history.direct_objects_accessed) as objects_accessed\n    ),\n\n    access_history_flattened_w_columns as (\n        select\n            access_history_flattened.query_id,\n            access_history_flattened.query_start_time,\n            access_history_flattened.user_name,\n            access_history_flattened.table_id,\n            access_history_flattened.object_name,\n            access_history_flattened.object_domain,\n            array_agg(distinct columns.value:columnname::text) as columns_accessed\n        from\n            access_history_flattened,\n            lateral flatten(access_history_flattened.columns_array) as columns\n        where access_history_flattened.object_name is not null\n        group by 1, 2, 3, 4, 5, 6\n    )\n\nselect\nmd5(concat(query_id, object_name)) as _unique_id,\n*\nfrom access_history_flattened_w_columns\nqualify -- added by affinaquest to ensure uniqueness\n    row_number() over (\n        partition by md5(concat(query_id, object_name)), query_start_time\n        order by query_start_time asc\n    )\n    = 1\norder by query_start_time asc", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_direct_object_access", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.124634Z", "completed_at": "2025-03-20T11:34:36.128150Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.128524Z", "completed_at": "2025-03-20T11:34:36.128526Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0062978267669677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.warehouses_type2_dimension", "compiled": true, "compiled_code": "\n\nwith\nstop_threshold as (\n    select max(start_time) as timestamp\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history\n),\n\nwarehouse_snapshots_base as (\n    select\n        warehouse_id,\n        warehouse_size,\n        warehouse_name,\n        start_time as timestamp,\n        lag(warehouse_size) over (partition by warehouse_id\norder by start_time) as prev_warehouse_size,\n        lag(warehouse_name) over (partition by warehouse_id\norder by start_time) as prev_warehouse_name\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history\n    where\n        warehouse_size is not null\n),\n\nwarehouse_snapshots as (\n    select\n        warehouse_id,\n        warehouse_name,\n        warehouse_size,\n        timestamp as valid_from,\n        lead(timestamp) over (partition by warehouse_id\norder by timestamp) as _valid_to\n    from warehouse_snapshots_base\n    where\n        warehouse_size != coalesce(prev_warehouse_size, '')\n        or warehouse_name != coalesce(prev_warehouse_name, '')\n)\n\nselect\n    warehouse_snapshots.warehouse_id,\n    warehouse_snapshots.warehouse_name,\n    warehouse_snapshots.warehouse_size,\n    warehouse_snapshots.valid_from,\n    coalesce(warehouse_snapshots._valid_to, stop_threshold.timestamp) as valid_to,\n    warehouse_snapshots._valid_to is null as is_current\nfrom warehouse_snapshots\ncross join stop_threshold", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.warehouses_type2_dimension", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.125867Z", "completed_at": "2025-03-20T11:34:36.129251Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.129947Z", "completed_at": "2025-03-20T11:34:36.129949Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006025791168212891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view", "compiled": true, "compiled_code": "select\n    date,\n    organization_name,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_remaining_balance_daily\n\nqualify row_number() over (partition by date\norder by contract_number desc nulls last) = 1", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.remaining_balance_daily_without_contract_view", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.137938Z", "completed_at": "2025-03-20T11:34:36.140105Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.140224Z", "completed_at": "2025-03-20T11:34:36.140226Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010102033615112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.stg_azure_daily_exports__validate_key_cols", "compiled": true, "compiled_code": "with\n\n_src as (\n  select * from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\n)\n\nselect distinct\n  'unique_key should be a positive number' as error_reason,\n  unique_key::text as error_value\nfrom _src\nwhere coalesce(unique_key, -1) < 0\n\nunion all\n\nselect distinct\n  'billing_date must occur between 2001-01-01 and current date' as error_reason,\n  billing_date::text as error_value\nfrom _src\nwhere coalesce(billing_date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'ingested_at must occur between 2001-01-01 and current date' as error_reason,\n  ingested_at::text as error_value\nfrom _src\nwhere coalesce(ingested_at::date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'billing_date must not be more recent than ingestion_date' as error_reason,\n  concat(\n    'billing: ',\n    coalesce(billing_date::text, 'nil'),\n    ' ingestion: ',\n    coalesce(date(ingested_at)::text, 'nil')\n  ) as error_value\nfrom _src\nwhere coalesce(billing_date, '1990-01-01') > coalesce(date(ingested_at), '2001-01-01')", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.130914Z", "completed_at": "2025-03-20T11:34:36.140444Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.140829Z", "completed_at": "2025-03-20T11:34:36.140832Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012153863906860352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_azure_daily_exports_unique_key.327a7440f8", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.135042Z", "completed_at": "2025-03-20T11:34:36.140555Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.142082Z", "completed_at": "2025-03-20T11:34:36.142084Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012387990951538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_azure_daily_exports_ingested_at.b7fae96aec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere ingested_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.144917Z", "completed_at": "2025-03-20T11:34:36.150507Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.150747Z", "completed_at": "2025-03-20T11:34:36.150749Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007752180099487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_platform_references_additional_costs_unique_key.fe1824bcd0", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.147390Z", "completed_at": "2025-03-20T11:34:36.150627Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.151099Z", "completed_at": "2025-03-20T11:34:36.151101Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007696866989135742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_platform.9a315c9cfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect platform\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\nwhere platform is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.146250Z", "completed_at": "2025-03-20T11:34:36.150982Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.151551Z", "completed_at": "2025-03-20T11:34:36.151553Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008352041244506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_billing_date.aa8675ce9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billing_date\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\nwhere billing_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.149261Z", "completed_at": "2025-03-20T11:34:36.151436Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.152109Z", "completed_at": "2025-03-20T11:34:36.152110Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003203153610229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_resource.9efadf8ebf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect resource\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\nwhere resource is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.154658Z", "completed_at": "2025-03-20T11:34:36.158902Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.159136Z", "completed_at": "2025-03-20T11:34:36.159139Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006719827651977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.stg_platform_references_additional_costs__validate_key_cols", "compiled": true, "compiled_code": "with\n\n_src as (\n  select * from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\n)\n\nselect distinct\n  'unique_key should be a positive number' as error_reason,\n  unique_key::text as error_value\nfrom _src\nwhere coalesce(unique_key, -1) < 0\n\nunion all\n\nselect distinct\n  'billing_date must not be older than 2021-01-01' as error_reason,\n  billing_date::text as error_value\nfrom _src\nwhere not coalesce(billing_date, '1990-01-01') >= '2001-01-01'\n\nunion all\n\nselect distinct\n  'platform should not be empty' as error_reason,\n  platform::text as error_value\nfrom _src\nwhere len(coalesce(platform, '')) < 1\n\nunion all\n\nselect distinct\n  'account should match platform' as error_reason,\n  concat(\n    'account: ',\n    coalesce(account, 'nil'),\n    ' platform: ',\n    coalesce(platform, 'nil')\n  ) as error_value\nfrom _src\nwhere account != platform\n\nunion all\n\nselect distinct\n  'resource should not be empty' as error_reason,\n  resource::text as error_value\nfrom _src\nwhere len(coalesce(resource, '')) < 1\n\nunion all\n\nselect distinct\n  'spend should not be zero' as error_reason,\n  spend::text as error_value\nfrom _src\nwhere abs(coalesce(spend, 0)) < 0.000000000001", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.153215Z", "completed_at": "2025-03-20T11:34:36.159020Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.159407Z", "completed_at": "2025-03-20T11:34:36.159410Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007555246353149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_platform_references_additional_costs_spend.af4fa432a5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\nwhere spend is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.155672Z", "completed_at": "2025-03-20T11:34:36.159674Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.160172Z", "completed_at": "2025-03-20T11:34:36.160174Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0073239803314208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_account_pipe_usage_history_unique_key.04d5b1cccb", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.157602Z", "completed_at": "2025-03-20T11:34:36.159787Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.160405Z", "completed_at": "2025-03-20T11:34:36.160406Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006097078323364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_credits_used.20ecc634fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credits_used\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\nwhere credits_used is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.163164Z", "completed_at": "2025-03-20T11:34:36.166804Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.167034Z", "completed_at": "2025-03-20T11:34:36.167036Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006268024444580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_name.9163515cfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pipe_name\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\nwhere pipe_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.162017Z", "completed_at": "2025-03-20T11:34:36.166927Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.167268Z", "completed_at": "2025-03-20T11:34:36.167270Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0066912174224853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_pipe_id.88c5e2ab29", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pipe_id\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\nwhere pipe_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.165839Z", "completed_at": "2025-03-20T11:34:36.170091Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.170322Z", "completed_at": "2025-03-20T11:34:36.170324Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00863194465637207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.stg_snowflake_account_pipe_usage_history__validate_key_cols", "compiled": true, "compiled_code": "with\n\n_src as (\n  select * from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\n)\n\nselect distinct\n  'unique_key should be a positive number' as error_reason,\n  unique_key::text as error_value\nfrom _src\nwhere coalesce(unique_key, -1) < 0\n\nunion all\n\nselect distinct\n  'start_time must occur between 2001-01-01 and current date' as error_reason,\n  start_time::text as error_value\nfrom _src\nwhere coalesce(start_time::date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'end_time must occur between 2001-01-01 and current date' as error_reason,\n  end_time::text as error_value\nfrom _src\nwhere coalesce(end_time::date, '1990-01-01') not between '2001-01-01' and sysdate()::date\n\nunion all\n\nselect distinct\n  'start_time must not be more recent than end_time' as error_reason,\n  concat(\n    'billing: ',\n    coalesce(start_time::text, 'nil'),\n    ' ingestion: ',\n    coalesce(end_time::text, 'nil')\n  ) as error_value\nfrom _src\nwhere coalesce(start_time, '1990-01-01') > coalesce(end_time, '2001-01-01')\n\nunion all\n\nselect distinct\n  'pipe_id should not be empty' as error_reason,\n  pipe_id::text as error_value\nfrom _src\nwhere len(coalesce(pipe_id, '')) < 1\n\nunion all\n\nselect distinct\n  'pipe_name should not be empty' as error_reason,\n  pipe_name::text as error_value\nfrom _src\nwhere len(coalesce(pipe_name, '')) < 1", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.164677Z", "completed_at": "2025-03-20T11:34:36.170210Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.170550Z", "completed_at": "2025-03-20T11:34:36.170552Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009059906005859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_account_pipe_usage_history_start_time.47804d07ac", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_time\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history\nwhere start_time is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.169154Z", "completed_at": "2025-03-20T11:34:36.174981Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.175272Z", "completed_at": "2025-03-20T11:34:36.175274Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007421970367431641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_base_table_access", "compiled": true, "compiled_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_base_object_access\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_base_table_access", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.171609Z", "completed_at": "2025-03-20T11:34:36.182363Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.182697Z", "completed_at": "2025-03-20T11:34:36.182700Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011723041534423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_direct_table_access", "compiled": true, "compiled_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_direct_object_access\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_direct_table_access", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.184054Z", "completed_at": "2025-03-20T11:34:36.186511Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.186628Z", "completed_at": "2025-03-20T11:34:36.186630Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003072977066040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.t_consolidated_tags", "compiled": true, "compiled_code": "\n\nwith\n\n __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n),  __dbt__cte__t_azure_tags as (\n\n\nselect \n  resource_id as resource, \n  resource_id as object_id,\n  to_json(max(tags)) as tag_values\nfrom __dbt__cte__t_valid_azure_daily_exports\ngroup by resource_id\n),  __dbt__cte__t_platform_additional_tags as (\n\n\nselect\n  resource,\n  resource as object_id, \n  platform as tag_values\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\ngroup by all\n),  __dbt__cte__t_snowflake_tags as (\n\n\nselect\n  object_name as resource,\n  iff(\n    domain ilike any ('%database%', '%warehouse%'),\n    object_name,\n    object_id::text\n  ) as object_id,\n  max(replace(allowed_values[0], '\"', '')) as tag_values\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_tag_references\nwhere deleted is null\ngroup by all\n), _fast_track_tags as (\n  select\n    resource,\n    object_id,\n    tag_values\n  from __dbt__cte__t_azure_tags\n    union all\n  select\n    resource,\n    object_id,\n    tag_values\n  from __dbt__cte__t_platform_additional_tags\n    union all\n  select\n    resource,\n    object_id,\n    tag_values\n  from __dbt__cte__t_snowflake_tags\n)\n\nselect \n  'FAST_TRACK' as managed_by, \n  resource,\n    object_id,\n    tag_values,\n  sysdate() as dbt_loaded_at\nfrom _fast_track_tags\norder by tag_values", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_tags", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.177306Z", "completed_at": "2025-03-20T11:34:36.317246Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.317434Z", "completed_at": "2025-03-20T11:34:36.317439Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14056801795959473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.daily_rates", "compiled": true, "compiled_code": "\n\n/*\nsnowflake.organization_usage.rate_sheet_daily isn't guaranteed to have 1 row per day per usage type.\n\nIf you don't consume any compute resources on a given day, there won't be a record.\n\nThis model guarantees 1 row per day per usage type, by filling in missing values with rates from the last\nknown day.\n*/\n\nwith\ndates_base as (\n    select date_day as date from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2636\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        '2018-01-01'\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(day, 1, current_date)\n\n)\n\nselect * from filtered\n\n\n    )\n),\n\nrate_sheet_daily_base as (\n    select\n        date,\n        usage_type,\n        currency,\n        effective_rate,\n        service_type\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_rate_sheet_daily\n    where\n        account_locator = current_account()\n),\n\nstop_thresholds as (\n    select min(date) as start_date\n    from rate_sheet_daily_base\n\n    union all\n\n    select min(date) as start_date\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.remaining_balance_daily_without_contract_view\n),\n\ndate_range as (\n    select\n        max(start_date) as start_date,\n        current_date as end_date\n    from stop_thresholds\n),\n\nremaining_balance_daily as (\n    select\n        date,\n        free_usage_balance + capacity_balance + on_demand_consumption_balance + rollover_balance as remaining_balance,\n        remaining_balance < 0 as is_account_in_overage\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.remaining_balance_daily_without_contract_view\n),\n\nlatest_remaining_balance_daily as (\n    select\n        date,\n        remaining_balance,\n        is_account_in_overage\n    from remaining_balance_daily\n    qualify row_number() over (\norder by date desc) = 1\n),\n\nrate_sheet_daily as (\n    select rate_sheet_daily_base.*\n    from rate_sheet_daily_base\n    inner join date_range\n        on rate_sheet_daily_base.date between date_range.start_date and date_range.end_date\n),\n\nrates_date_range_w_usage_types as (\n    select\n        date_range.start_date,\n        date_range.end_date,\n        usage_types.usage_type\n    from date_range\n    cross join (select distinct rate_sheet_daily.usage_type from rate_sheet_daily) as usage_types\n),\n\nbase as (\n    select\n        db.date,\n        dr.usage_type\n    from dates_base as db\n    inner join rates_date_range_w_usage_types as dr\n        on db.date between dr.start_date and dr.end_date\n),\n\nrates_w_overage as (\n    select\n        base.date,\n        base.usage_type,\n        coalesce(\n            rate_sheet_daily.service_type,\n            lag(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type\norder by base.date),\n            lead(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type\norder by base.date)\n        ) as service_type,\n        coalesce(\n            rate_sheet_daily.effective_rate,\n            lag(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type\norder by base.date),\n            lead(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type\norder by base.date)\n        ) as effective_rate,\n        coalesce(\n            rate_sheet_daily.currency,\n            lag(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type\norder by base.date),\n            lead(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type\norder by base.date)\n        ) as currency,\n        base.usage_type like 'overage-%' as is_overage_rate,\n        replace(base.usage_type, 'overage-', '') as associated_usage_type,\n        coalesce(remaining_balance_daily.is_account_in_overage, latest_remaining_balance_daily.is_account_in_overage, false) as _is_account_in_overage,\n        case\n            when _is_account_in_overage and is_overage_rate then 1\n            when not _is_account_in_overage and not is_overage_rate then 1\n            else 0\n        end as rate_priority\n\n    from base\n    left join latest_remaining_balance_daily on latest_remaining_balance_daily.date is not null\n    left join remaining_balance_daily\n        on base.date = remaining_balance_daily.date\n    left join rate_sheet_daily\n        on base.date = rate_sheet_daily.date\n            and base.usage_type = rate_sheet_daily.usage_type\n),\n\nrates as (\n    select\n        date,\n        usage_type,\n        associated_usage_type,\n        service_type,\n        effective_rate,\n        currency,\n        is_overage_rate\n    from rates_w_overage\n    qualify row_number() over (partition by date, service_type, associated_usage_type\norder by rate_priority desc) = 1\n)\n\nselect\n    date,\n    associated_usage_type as usage_type,\n    service_type,\n    effective_rate,\n    currency,\n    is_overage_rate,\n    row_number() over (partition by service_type, associated_usage_type\norder by date desc) = 1 as is_latest_rate\nfrom rates\norder by date", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.320287Z", "completed_at": "2025-03-20T11:34:36.388522Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.388795Z", "completed_at": "2025-03-20T11:34:36.388799Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07042884826660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.cost_per_query", "compiled": true, "compiled_code": "\n\nwith\nstop_threshold as (\n    select max(end_time) as latest_ts\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_warehouse_metering_history\n),\n\nfiltered_queries as (\n    select\n        query_id,\n        query_text as original_query_text,\n        credits_used_cloud_services,\n        warehouse_id,\n        warehouse_size is not null as ran_on_warehouse,\n        timeadd(\n            'millisecond',\n            queued_overload_time + compilation_time\n            + queued_provisioning_time + queued_repair_time\n            + list_external_files_time,\n            start_time\n        ) as execution_start_time,\n        start_time,\n        end_time,\n        query_acceleration_bytes_scanned\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history\n    where true\n        and end_time <= (select stop_threshold.latest_ts from stop_threshold)\n        \n        -- account for late arriving queries\n        and end_time > (select coalesce(dateadd(day, -3, max(end_time)), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query)\n        \n),\n\nhours_list as (\n    select\n        dateadd(\n            'hour',\n            '-' || row_number() over (\norder by seq4() asc),\n            dateadd('day', '+1', current_date::timestamp_tz)\n        ) as hour_start,\n        dateadd('hour', '+1', hour_start) as hour_end\n\n    \n    from table(generator(rowcount => (24 * 7)))\n    \n),\n\n-- 1 row per hour a query ran\nquery_hours as (\n    select\n        hours_list.hour_start,\n        hours_list.hour_end,\n        queries.*\n    from hours_list\n    inner join filtered_queries as queries\n        on hours_list.hour_start >= date_trunc('hour', queries.execution_start_time)\n            and hours_list.hour_start < queries.end_time\n            and queries.ran_on_warehouse\n),\n\nquery_seconds_per_hour as (\n    select\n        *,\n        datediff('millisecond', greatest(execution_start_time, hour_start), least(end_time, hour_end)) as num_milliseconds_query_ran,\n        sum(num_milliseconds_query_ran) over (partition by warehouse_id, hour_start) as total_query_milliseconds_in_hour,\n        div0(num_milliseconds_query_ran, total_query_milliseconds_in_hour) as fraction_of_total_query_time_in_hour,\n        sum(query_acceleration_bytes_scanned) over (partition by warehouse_id, hour_start) as total_query_acceleration_bytes_scanned_in_hour,\n        div0(query_acceleration_bytes_scanned, total_query_acceleration_bytes_scanned_in_hour) as fraction_of_total_query_acceleration_bytes_scanned_in_hour,\n        hour_start as hour\n    from query_hours\n),\n\ncredits_billed_hourly as (\n    select\n        start_time as hour,\n        entity_id as warehouse_id,\n        sum(iff(service_type = 'WAREHOUSE_METERING', credits_used_compute, 0)) as credits_used_compute,\n        sum(iff(service_type = 'WAREHOUSE_METERING', credits_used_cloud_services, 0)) as credits_used_cloud_services,\n        sum(iff(service_type = 'QUERY_ACCELERATION', credits_used_compute, 0)) as credits_used_query_acceleration\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history\n    where true\n        and service_type in ('QUERY_ACCELERATION', 'WAREHOUSE_METERING')\n    group by 1, 2\n),\n\nquery_cost as (\n    select\n        query_seconds_per_hour.*,\n        credits_billed_hourly.credits_used_compute * query_seconds_per_hour.fraction_of_total_query_time_in_hour as allocated_compute_credits_in_hour,\n        allocated_compute_credits_in_hour * daily_rates.effective_rate as allocated_compute_cost_in_hour,\n        credits_billed_hourly.credits_used_query_acceleration * query_seconds_per_hour.fraction_of_total_query_acceleration_bytes_scanned_in_hour as allocated_query_acceleration_credits_in_hour,\n        allocated_query_acceleration_credits_in_hour * daily_rates.effective_rate as allocated_query_acceleration_cost_in_hour\n    from query_seconds_per_hour\n    inner join credits_billed_hourly\n        on query_seconds_per_hour.warehouse_id = credits_billed_hourly.warehouse_id\n            and query_seconds_per_hour.hour = credits_billed_hourly.hour\n    inner join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on date(query_seconds_per_hour.start_time) = daily_rates.date\n            and daily_rates.service_type = 'WAREHOUSE_METERING'\n            and daily_rates.usage_type = 'compute'\n),\n\ncost_per_query as (\n    select\n        query_id,\n        any_value(start_time) as start_time,\n        any_value(end_time) as end_time,\n        any_value(execution_start_time) as execution_start_time,\n        sum(allocated_compute_cost_in_hour) as compute_cost,\n        sum(allocated_compute_credits_in_hour) as compute_credits,\n        sum(allocated_query_acceleration_cost_in_hour) as query_acceleration_cost,\n        sum(allocated_query_acceleration_credits_in_hour) as query_acceleration_credits,\n        any_value(credits_used_cloud_services) as credits_used_cloud_services,\n        any_value(ran_on_warehouse) as ran_on_warehouse\n    from query_cost\n    group by 1\n),\n\ncredits_billed_daily as (\n    select\n        date(hour) as date,\n        sum(credits_used_compute) as daily_credits_used_compute,\n        sum(credits_used_cloud_services) as daily_credits_used_cloud_services,\n        greatest(daily_credits_used_cloud_services - daily_credits_used_compute * 0.1, 0) as daily_billable_cloud_services\n    from credits_billed_hourly\n    group by 1\n),\n\nall_queries as (\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        compute_cost,\n        compute_credits,\n        query_acceleration_cost,\n        query_acceleration_credits,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from cost_per_query\n\n    union all\n\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        0 as compute_cost,\n        0 as compute_credits,\n        0 as query_acceleration_cost,\n        0 as query_acceleration_credits,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from filtered_queries\n    where\n        not ran_on_warehouse\n)\n\nselect\n    all_queries.query_id,\n    all_queries.start_time,\n    all_queries.end_time,\n    all_queries.execution_start_time,\n    all_queries.compute_cost,\n    all_queries.compute_credits,\n    all_queries.query_acceleration_cost,\n    all_queries.query_acceleration_credits,\n    -- For the most recent day, which is not yet complete, this calculation won't be perfect.\n    -- For example, at 12PM on the latest day, it's possible that cloud credits make up <10% of compute cost, so the queries\n    -- from that day are not allocated any cloud_services_cost. The next time the model runs, after we have the full day of data,\n    -- this may change if cloud credits make up >10% of compute cost.\n    (div0(all_queries.credits_used_cloud_services, credits_billed_daily.daily_credits_used_cloud_services) * credits_billed_daily.daily_billable_cloud_services) * coalesce(daily_rates.effective_rate, current_rates.effective_rate) as cloud_services_cost,\n    div0(all_queries.credits_used_cloud_services, credits_billed_daily.daily_credits_used_cloud_services) * credits_billed_daily.daily_billable_cloud_services as cloud_services_credits,\n    all_queries.compute_cost + all_queries.query_acceleration_cost + cloud_services_cost as query_cost,\n    all_queries.compute_credits + all_queries.query_acceleration_credits + cloud_services_credits as query_credits,\n    all_queries.ran_on_warehouse,\n    coalesce(daily_rates.currency, current_rates.currency) as currency\nfrom all_queries\ninner join credits_billed_daily\n    on date(all_queries.start_time) = credits_billed_daily.date\nleft join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n    on date(all_queries.start_time) = daily_rates.date\n        and daily_rates.service_type = 'CLOUD_SERVICES'\n        and daily_rates.usage_type = 'cloud services'\ninner join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as current_rates\n    on current_rates.is_latest_rate\n        and current_rates.service_type = 'CLOUD_SERVICES'\n        and current_rates.usage_type = 'cloud services'\norder by all_queries.start_time asc", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.324455Z", "completed_at": "2025-03-20T11:34:36.388667Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.389074Z", "completed_at": "2025-03-20T11:34:36.389077Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06995987892150879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_rates", "compiled": true, "compiled_code": "select\n  date(src.date) as ref_date,\n  src.usage_type,\n  src.service_type,\n  src.effective_rate::number(38,12) as effective_rate,\n  src.currency,\n  src.is_overage_rate,\n  src.is_latest_rate,\n  sysdate() as dbt_loaded_at\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as src\nwhere src.currency ilike '%USD%' ", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_rates", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.393314Z", "completed_at": "2025-03-20T11:34:36.396458Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.396732Z", "completed_at": "2025-03-20T11:34:36.396735Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00656890869140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.t_snowflake_serverless_costs", "compiled": true, "compiled_code": "with\n\n_pipe_usage as (\n  select \n    pu.unique_key as unique_key,\n    convert_timezone('UTC', pu.start_time)::date as billing_date,\n    pu.pipe_name || ',' || pu.pipe_id as resource,\n    'Snowpipe' as usage_type,\n    sum(pu.credits_used) as credits_used\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_account_pipe_usage_history as pu\n  group by all\n),\n\n_pipe_spend as (\n  select \n    p.unique_key,\n    p.billing_date,\n    p.resource,\n    p.usage_type,\n    max(p.credits_used * dr.effective_rate) as spend\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_rates as dr\n  join _pipe_usage as p on p.billing_date = dr.ref_date\n  where dr.usage_type ilike 'snowpipe' --> attention: snowpipe streaming rates may be different\n  group by all\n),\n\n_fix_spend as (\n  select\n    * replace (\n      abs(\n        hash(\n          unique_key || billing_date\n        )\n      ) as unique_key\n    )\n  from _pipe_spend\n  where abs(spend) > 0\n)\n\nselect\n  unique_key,\n  billing_date,\n  usage_type as service_category,\n  usage_type as service_subcategory,\n  resource,\n  spend,\n  sysdate() as dbt_loaded_at\nfrom _fix_spend\nqualify row_number() over (\n  partition by unique_key\n  order by 0 desc\n) = 1", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_snowflake_serverless_costs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.394338Z", "completed_at": "2025-03-20T11:34:36.396579Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.397010Z", "completed_at": "2025-03-20T11:34:36.397013Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006648063659667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect query_id\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query\nwhere query_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.391011Z", "completed_at": "2025-03-20T11:34:36.397384Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.397829Z", "completed_at": "2025-03-20T11:34:36.397831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007961034774780273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_history_enriched", "compiled": true, "compiled_code": "\n\nwith\nquery_history as (\n    select\n        *,\n\n        -- this removes comments enclosed by /* <comment text> */ and single line comments starting with -- and either ending with a new line or end of string\n        regexp_replace(query_text, $$(\\/\\*(.|\\n|\\r)*?\\*\\/)|(--.*$)|(--.*(\\n|\\r))|;$$, '') as query_text_no_comments,\n\n        try_parse_json(regexp_substr(query_text, $$\\/\\*\\s*({(.|\\n|\\r)*\"app\":\\s\"dbt\"(.|\\n|\\r)*})\\s*\\*\\/$$, 1, 1, 'ie')) as _dbt_json_comment_meta,\n        case\n            when try_parse_json(query_tag)['dbt_snowflake_query_tags_version'] is not null then try_parse_json(query_tag)\n        end as _dbt_json_query_tag_meta,\n        case\n            when _dbt_json_comment_meta is not null or _dbt_json_query_tag_meta is not null then\n                fasttrack_cost_reporting_dev.landing_snowflake_monitoring.merge_objects(coalesce(_dbt_json_comment_meta, { }), coalesce(_dbt_json_query_tag_meta, { }))\n        end as dbt_metadata\n\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_query_history\n\n    \n        -- Conservatively re-process the last 3 days to account for late arriving rates data. Allow an override from project variable\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -3, max(end_time)) from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_history_enriched)\n    \n),\n\ncost_per_query as (\n    select *\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query\n    \n        -- Conservatively re-process the last 3 days to account for late arriving rates data. Allow an override from project variable\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -3, max(end_time)) from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_history_enriched)\n    \n)\n\nselect\n    cost_per_query.query_id,\n    cost_per_query.compute_cost,\n    cost_per_query.compute_credits,\n    cost_per_query.query_acceleration_cost,\n    cost_per_query.query_acceleration_credits,\n    cost_per_query.cloud_services_cost,\n    cost_per_query.cloud_services_credits,\n    cost_per_query.query_cost,\n    cost_per_query.query_credits,\n    cost_per_query.execution_start_time,\n\n    -- Grab all columns from query_history (except the query time columns which we rename below)\n    query_history.query_text,\n    query_history.database_id,\n    query_history.database_name,\n    query_history.schema_id,\n    query_history.schema_name,\n    query_history.query_type,\n    query_history.session_id,\n    query_history.user_name,\n    query_history.role_name,\n    query_history.warehouse_id,\n    query_history.warehouse_name,\n    query_history.warehouse_size,\n    query_history.warehouse_type,\n    query_history.cluster_number,\n    query_history.query_tag,\n    query_history.execution_status,\n    query_history.error_code,\n    query_history.error_message,\n    query_history.start_time,\n    query_history.end_time,\n    query_history.total_elapsed_time,\n    query_history.bytes_scanned,\n    query_history.percentage_scanned_from_cache,\n    query_history.bytes_written,\n    query_history.bytes_written_to_result,\n    query_history.bytes_read_from_result,\n    query_history.rows_produced,\n    query_history.rows_inserted,\n    query_history.rows_updated,\n    query_history.rows_deleted,\n    query_history.rows_unloaded,\n    query_history.bytes_deleted,\n    query_history.partitions_scanned,\n    query_history.partitions_total,\n    query_history.bytes_spilled_to_local_storage,\n    query_history.bytes_spilled_to_remote_storage,\n    query_history.bytes_sent_over_the_network,\n    query_history.outbound_data_transfer_cloud,\n    query_history.outbound_data_transfer_region,\n    query_history.outbound_data_transfer_bytes,\n    query_history.inbound_data_transfer_cloud,\n    query_history.inbound_data_transfer_region,\n    query_history.inbound_data_transfer_bytes,\n    query_history.credits_used_cloud_services,\n    query_history.release_version,\n    query_history.external_function_total_invocations,\n    query_history.external_function_total_sent_rows,\n    query_history.external_function_total_received_rows,\n    query_history.external_function_total_sent_bytes,\n    query_history.external_function_total_received_bytes,\n    query_history.query_load_percent,\n    query_history.is_client_generated_statement,\n    query_history.query_acceleration_bytes_scanned,\n    query_history.query_acceleration_partitions_scanned,\n    query_history.query_acceleration_upper_limit_scale_factor,\n    query_history.query_hash,\n    query_history.query_hash_version,\n    query_history.query_parameterized_hash,\n    query_history.query_parameterized_hash_version,\n\n    -- Rename some existing columns for clarity\n    query_history.total_elapsed_time as total_elapsed_time_ms,\n    query_history.compilation_time as compilation_time_ms,\n    query_history.queued_provisioning_time as queued_provisioning_time_ms,\n    query_history.queued_repair_time as queued_repair_time_ms,\n    query_history.queued_overload_time as queued_overload_time_ms,\n    query_history.transaction_blocked_time as transaction_blocked_time_ms,\n    query_history.list_external_files_time as list_external_files_time_ms,\n    query_history.execution_time as execution_time_ms,\n\n    -- New columns\n    query_history.warehouse_size is not null as ran_on_warehouse,\n    query_history.bytes_scanned / power(1024, 3) as data_scanned_gb,\n    data_scanned_gb * query_history.percentage_scanned_from_cache as data_scanned_from_cache_gb,\n    query_history.bytes_spilled_to_local_storage / power(1024, 3) as data_spilled_to_local_storage_gb,\n    query_history.bytes_spilled_to_remote_storage / power(1024, 3) as data_spilled_to_remote_storage_gb,\n    query_history.bytes_sent_over_the_network / power(1024, 3) as data_sent_over_the_network_gb,\n    query_history.query_text_no_comments,\n    query_history.dbt_metadata,\n\n    query_history.total_elapsed_time / 1000 as total_elapsed_time_s,\n    query_history.compilation_time / 1000 as compilation_time_s,\n    query_history.queued_provisioning_time / 1000 as queued_provisioning_time_s,\n    query_history.queued_repair_time / 1000 as queued_repair_time_s,\n    query_history.queued_overload_time / 1000 as queued_overload_time_s,\n    query_history.transaction_blocked_time / 1000 as transaction_blocked_time_s,\n    query_history.list_external_files_time / 1000 as list_external_files_time_s,\n    query_history.execution_time / 1000 as execution_time_s,\n    cost_per_query.currency,\n    query_history.query_retry_time as query_retry_time_ms,\n    query_history.query_retry_time / 1000 as query_retry_time_s,\n    query_history.query_retry_cause,\n    query_history.fault_handling_time as fault_handling_time_ms,\n    query_history.fault_handling_time / 1000 as fault_handling_time_s\n\nfrom query_history\ninner join cost_per_query\n    on query_history.query_id = cost_per_query.query_id\norder by query_history.start_time", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_history_enriched", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.398606Z", "completed_at": "2025-03-20T11:34:36.403174Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.403423Z", "completed_at": "2025-03-20T11:34:36.403425Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005850791931152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    query_id as unique_field,\n    count(*) as n_records\n\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.cost_per_query\nwhere query_id is not null\ngroup by query_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.400580Z", "completed_at": "2025-03-20T11:34:36.403293Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.403657Z", "completed_at": "2025-03-20T11:34:36.403659Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005686044692993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_effective_rate.af4aa13c9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect effective_rate\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_rates\nwhere effective_rate is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.401955Z", "completed_at": "2025-03-20T11:34:36.404031Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.404394Z", "completed_at": "2025-03-20T11:34:36.404396Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004077911376953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_rates_ref_date.0f932b0a21", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ref_date\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_rates\nwhere ref_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.404816Z", "completed_at": "2025-03-20T11:34:36.408170Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:36.408294Z", "completed_at": "2025-03-20T11:34:36.408296Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004166841506958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.dbt_queries", "compiled": true, "compiled_code": "\n\nselect\n    dbt_metadata['dbt_snowflake_query_tags_version']::string as dbt_snowflake_query_tags_version, -- this will be null where the metadata came from a query comment in dbt-snowflake-monitoring versions <2.0.0\n    dbt_metadata['invocation_id']::string as dbt_invocation_id,\n    dbt_metadata['node_id']::string as dbt_node_id,\n    dbt_metadata['node_resource_type']::string as dbt_node_resource_type,\n    coalesce(dbt_metadata['node_name']::string, replace(array_slice(split(dbt_node_id, '.'), -1, array_size(split(dbt_node_id, '.')))[0], '\"')) as dbt_node_name, -- we can just use node_name once enough time has been that users have migrated to v2.0.0\n    dbt_metadata['materialized']::string as dbt_node_materialized,\n    dbt_metadata['is_incremental']::boolean as dbt_node_is_incremental,\n    dbt_metadata['node_alias']::string as dbt_node_alias,\n    dbt_metadata['node_meta']::variant as dbt_node_meta,\n    dbt_metadata['node_tags']::array as node_tags,\n    iff(dbt_snowflake_query_tags_version >= '1.1.3', dbt_metadata['node_refs']::array, []) as dbt_node_refs, -- correct refs available from 1.1.3 onwards\n    dbt_metadata['node_database']::string as dbt_node_database,\n    dbt_metadata['node_schema']::string as dbt_node_schema,\n    dbt_metadata['dbt_version']::string as dbt_version,\n    dbt_metadata['project_name']::string as dbt_project_name,\n    dbt_metadata['target_name']::string as dbt_target_name,\n    dbt_metadata['target_database']::string as dbt_target_database,\n    dbt_metadata['target_schema']::string as dbt_target_schema,\n    dbt_metadata['node_package_name']::string as dbt_node_package_name,\n    dbt_metadata['node_original_file_path']::string as dbt_node_original_file_path,\n    dbt_metadata['dbt_cloud_project_id']::string as dbt_cloud_project_id,\n    dbt_metadata['dbt_cloud_job_id']::string as dbt_cloud_job_id,\n    dbt_metadata['dbt_cloud_run_id']::string as dbt_cloud_run_id,\n    dbt_metadata['dbt_cloud_run_reason_category']::string as dbt_cloud_run_reason_category,\n    dbt_metadata['dbt_cloud_run_reason']::string as dbt_cloud_run_reason,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            'https://cloud.getdbt.com/deploy/' || '5235' || '/projects/' || dbt_cloud_project_id || '/jobs/' || dbt_cloud_job_id\n    end as dbt_cloud_job_url,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            'https://cloud.getdbt.com/deploy/' || '5235' || '/projects/' || dbt_cloud_project_id || '/runs/' || dbt_cloud_run_id\n    end as dbt_cloud_run_url,\n    * exclude dbt_metadata\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.query_history_enriched\nwhere dbt_metadata is not null\n    \n        -- Conservatively re-process the last 3 days to account for late arriving rates data which changes the cost per query. \n        -- Allow an override from project variable\n        and end_time > (select coalesce(dateadd(day, -3, max(end_time)), '1970-01-01') from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.dbt_queries)\n    ", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.dbt_queries", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:36.326247Z", "completed_at": "2025-03-20T11:34:37.569129Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.569369Z", "completed_at": "2025-03-20T11:34:37.569375Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2505359649658203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.hourly_spend", "compiled": true, "compiled_code": "-- depends_on: fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history\n\n\nwith hour_spine as (\n    \n\n        \n            \n            \n            \n            \n        \n    \n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3532\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        hour,\n        row_number() over (order by 1) - 1,\n        '2024-10-24 08:00:00+00:00'\n        )\n\n\n    ) as date_hour\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_hour <= '2025-03-20 12:00:00+00:00'\n\n)\n\nselect * from filtered\n\n\n),\n\nhours as (\n    select\n        date_hour as hour,\n        hour::date as date,\n        count(hour) over (partition by date) as hours_thus_far,\n        day(last_day(date)) as days_in_month\n    from hour_spine\n),\n\n-- GROUP BY to collapse possible overage and non-overage cost from the same service in the\n-- same day into a single row so this model does not emit multiple rows for the same service\n-- and hour\nusage_in_currency_daily as (\n    select\n        usage_date,\n        account_locator,\n        replace(usage_type, 'overage-', '') as usage_type,\n        currency,\n        sum(usage_in_currency) as usage_in_currency,\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_usage_in_currency_daily\n    group by all\n),\n\nstorage_terabytes_daily as (\n    select\n        date,\n        'Table and Time Travel' as storage_type,\n        database_name,\n        sum(average_database_bytes) / power(1024, 4) as storage_terabytes\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_database_storage_usage_history\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Failsafe' as storage_type,\n        database_name,\n        sum(average_failsafe_bytes) / power(1024, 4) as storage_terabytes\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_database_storage_usage_history\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Stage' as storage_type,\n        null as database_name,\n        sum(average_stage_bytes) / power(1024, 4) as storage_terabytes\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_stage_storage_usage_history\n    group by 1, 2, 3\n),\n\nstorage_spend_hourly as (\n    select\n        hours.hour,\n        'Storage' as service,\n        storage_terabytes_daily.storage_type,\n        null as warehouse_name,\n        storage_terabytes_daily.database_name,\n        coalesce(\n            sum(\n                div0(\n                    storage_terabytes_daily.storage_terabytes,\n                    hours.days_in_month * 24\n                ) * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join storage_terabytes_daily on hours.date = convert_timezone('UTC', storage_terabytes_daily.date)\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on storage_terabytes_daily.date = daily_rates.date\n            and daily_rates.service_type = 'STORAGE'\n            and daily_rates.usage_type = 'storage'\n    group by 1, 2, 3, 4, 5\n),\n\n-- Hybrid Table Storage has its own service type in `usage_in_currency_daily`,\n-- so we also handle it separately, and not with \"Storage\".\n_hybrid_table_terabytes_daily as (\n    select\n        date,\n        null as storage_type,\n        database_name,\n        sum(average_hybrid_table_storage_bytes) / power(1024, 4) as storage_terabytes\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_database_storage_usage_history\n    group by 1, 2, 3\n),\n\nhybrid_table_storage_spend_hourly as (\n    select\n        hours.hour,\n        'Hybrid Table Storage' as service,\n        null as storage_type,\n        null as warehouse_name,\n        _hybrid_table_terabytes_daily.database_name,\n        coalesce(\n            sum(\n                div0(\n                    _hybrid_table_terabytes_daily.storage_terabytes,\n                    hours.days_in_month * 24\n                ) * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join _hybrid_table_terabytes_daily on hours.date = convert_timezone('UTC', _hybrid_table_terabytes_daily.date)\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on _hybrid_table_terabytes_daily.date = daily_rates.date\n            and daily_rates.service_type = 'HYBRID_TABLE_STORAGE'\n            and daily_rates.usage_type = 'hybrid table storage'\n    group by 1, 2, 3, 4, 5\n),\n\ndata_transfer_spend_hourly as (\n    -- Right now we don't have a way of getting this at an hourly grain\n    -- We can get source cloud + region, target cloud + region, and bytes transferred at an hourly grain from DATA_TRANSFER_HISTORY\n    -- But Snowflake doesn't provide data transfer rates programmatically, so we can't get the cost\n    -- We could make a LUT from https://www.snowflake.com/legal-files/CreditConsumptionTable.pdf but it would be a lot of work to maintain and would frequently become out of date\n    -- So for now we just use the daily reported usage and evenly distribute it across the day\n    select\n        hours.hour,\n        'Data Transfer' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'data transfer'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\nlogging_spend_hourly as (\n    -- More granular cost information is available in the EVENT_USAGE_HISTORY view.\n    -- https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-tracing-billing\n    -- For now we just use the daily reported usage and evenly distribute it across the day\n    select\n        hours.hour,\n        'Logging' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'logging'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\n-- For now we just use the daily reported usage and evenly distribute it across the day\n-- More detailed information can be found on READER_ACCOUNT_USAGE.*\n\n\"reader compute_spend_hourly\" as (\n    select\n        hours.hour,\n        INITCAP('reader compute') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader compute'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\n\"reader storage_spend_hourly\" as (\n    select\n        hours.hour,\n        INITCAP('reader storage') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader storage'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\n\"reader data transfer_spend_hourly\" as (\n    select\n        hours.hour,\n        INITCAP('reader data transfer') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader data transfer'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\n\nreader_adj_for_incl_cloud_services_hourly as (\n    select\n        hours.hour,\n        INITCAP('reader adj for incl cloud services') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        0 as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader adj for incl cloud services'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n),\n\nreader_cloud_services_hourly as (\n        select\n        hours.hour,\n        INITCAP('reader cloud services') as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        coalesce(usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) + reader_adj_for_incl_cloud_services_hourly.spend as spend_net_cloud_services,\n        usage_in_currency_daily.currency as currency\n    from hours\n    left join usage_in_currency_daily on\n        usage_in_currency_daily.account_locator = current_account()\n        and usage_in_currency_daily.usage_type = 'reader cloud services'\n        and hours.hour::date = usage_in_currency_daily.usage_date\n    left join reader_adj_for_incl_cloud_services_hourly on\n        hours.hour = reader_adj_for_incl_cloud_services_hourly.hour\n),\n\ncompute_spend_hourly as (\n    select\n        hours.hour,\n        'Compute' as service,\n        null as storage_type,\n        stg_metering_history.name as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used_compute * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'WAREHOUSE_METERING'\n            and daily_rates.usage_type = 'compute'\n    where\n        stg_metering_history.service_type = 'WAREHOUSE_METERING' and stg_metering_history.name != 'CLOUD_SERVICES_ONLY'\n    group by 1, 2, 3, 4\n),\n\nserverless_task_spend_hourly as (\n    select\n        hours.hour,\n        'Serverless Tasks' as service,\n        null as storage_type,\n        null as warehouse_name,\n        stg_serverless_task_history.database_name,\n        coalesce(\n            sum(\n                stg_serverless_task_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_serverless_task_history as stg_serverless_task_history on\n        hours.hour = date_trunc('hour', stg_serverless_task_history.start_time)\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'SERVERLESS_TASK'\n            and daily_rates.usage_type = 'serverless tasks'\n    group by 1, 2, 3, 4, 5\n),\n\nadj_for_incl_cloud_services_hourly as (\n    select\n        hours.hour,\n        'Adj For Incl Cloud Services' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_daily_history.credits_adjustment_cloud_services * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        0 as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_daily_history as stg_metering_daily_history on\n        hours.hour = stg_metering_daily_history.date\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'CLOUD_SERVICES'\n            and daily_rates.usage_type = 'cloud services'\n    group by 1, 2, 3, 4\n),\n\n_cloud_services_usage_hourly as (\n    select\n        hours.hour,\n        hours.date,\n        'Cloud Services' as service,\n        null as storage_type,\n        case\n            when\n                stg_metering_history.name = 'CLOUD_SERVICES_ONLY' then 'Cloud Services Only'\n            else stg_metering_history.name\n        end as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(stg_metering_history.credits_used_cloud_services), 0\n        ) as credits_used_cloud_services\n    from hours\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'WAREHOUSE_METERING'\n    group by 1, 2, 3, 4, 5\n),\n\n_cloud_services_billed_daily as (\n    select\n        date,\n        sum(credits_used_cloud_services) as credits_used_cloud_services,\n        sum(\n            credits_used_cloud_services + credits_adjustment_cloud_services\n        ) as credits_used_cloud_services_billable\n    from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_daily_history\n    where\n        service_type = 'WAREHOUSE_METERING'\n    group by 1\n),\n\ncloud_services_spend_hourly as (\n    select\n        _cloud_services_usage_hourly.hour,\n        _cloud_services_usage_hourly.service,\n        _cloud_services_usage_hourly.storage_type,\n        _cloud_services_usage_hourly.warehouse_name,\n        _cloud_services_usage_hourly.database_name,\n        _cloud_services_usage_hourly.credits_used_cloud_services * daily_rates.effective_rate as spend,\n\n        (\n            div0(\n                _cloud_services_usage_hourly.credits_used_cloud_services,\n                _cloud_services_billed_daily.credits_used_cloud_services\n            ) * _cloud_services_billed_daily.credits_used_cloud_services_billable\n        ) * daily_rates.effective_rate as spend_net_cloud_services,\n        daily_rates.currency\n    from _cloud_services_usage_hourly\n    inner join _cloud_services_billed_daily on\n        _cloud_services_usage_hourly.date = _cloud_services_billed_daily.date\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on _cloud_services_usage_hourly.date = daily_rates.date\n            and daily_rates.service_type = 'CLOUD_SERVICES'\n            and daily_rates.usage_type = 'cloud services'\n\n),\n\nother_costs as (\n    select\n        hours.hour,\n\n        /* Sometimes Snowflake is inconsistent and the service names in metering_history\n           do not match the service names in our daily_rates (coming from rate_sheet_daily),\n           so we rename them to make it match  */\n        case stg_metering_history.service_type\n            when 'AUTO_CLUSTERING' then 'AUTOMATIC_CLUSTERING'\n            when 'PIPE' then 'SNOWPIPE'\n            else stg_metering_history.service_type\n        end as _service_renamed,\n\n        /* Convert it to a more human-readable format\n           AUTOMATIC_CLUSTERING -> Automatic Clustering\n        */\n        case _service_renamed\n            when 'MATERIALIZED_VIEW' then 'Materialized Views'\n            when 'AI_SERVICES' then 'AI Services'\n            else initcap(replace(_service_renamed, '_', ' '))\n        end as service,\n\n        /* Extract useful information from the row depending on the service type */\n        null as storage_type,\n        case\n            when stg_metering_history.service_type = 'QUERY_ACCELERATION'\n                then stg_metering_history.name\n            else null\n        end as warehouse_name,\n        null as database_name,\n\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n\n    from hours\n\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.stg_metering_history as stg_metering_history\n        on hours.hour = convert_timezone('UTC', stg_metering_history.start_time)\n\n    left join fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_rates as daily_rates\n        on hour::date = daily_rates.date\n            and _service_renamed = daily_rates.service_type\n            /* daily_rates can have multiple rows for the same service_type,\n               with different values in usage_type (eg: usage_type = \"automatic clustering\" or\n               \"adjustment-automatic clustering\"). We want to join only with the row where\n               usage_type is the same as the service_type */\n            and lower(service) = daily_rates.usage_type\n\n    -- Covered by their own CTEs due to more complex logic or better sources\n    where stg_metering_history.service_type not in (\n        'SERVERLESS_TASK', 'WAREHOUSE_METERING', 'WAREHOUSE_METERING_READER'\n    )\n\n    group by 1, 2, 3, 4, 5\n),\n\nunioned as (\n    select * from storage_spend_hourly\n    union all\n    select * from hybrid_table_storage_spend_hourly\n    union all\n    select * from data_transfer_spend_hourly\n    union all\n    select * from logging_spend_hourly\n    union all\n    select * from \"reader compute_spend_hourly\"\n    union all\n    select * from \"reader storage_spend_hourly\"\n    union all\n    select * from \"reader data transfer_spend_hourly\"\n    union all\n    select * from reader_adj_for_incl_cloud_services_hourly\n    union all\n    select * from reader_cloud_services_hourly\n    union all\n    select * from compute_spend_hourly\n    union all\n    select * from adj_for_incl_cloud_services_hourly\n    union all\n    select * from cloud_services_spend_hourly\n    union all\n    select * from serverless_task_spend_hourly\n    union all\n    select * exclude (_service_renamed) from other_costs\n)\n\nselect\n    convert_timezone('UTC', hour)::timestamp_ltz as hour,\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    spend,\n    spend_net_cloud_services,\n    currency\nfrom unioned", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.hourly_spend", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.570888Z", "completed_at": "2025-03-20T11:34:37.573277Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.573452Z", "completed_at": "2025-03-20T11:34:37.573456Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003244161605834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.daily_spend", "compiled": true, "compiled_code": "select\n    convert_timezone('UTC', hour)::date as date, -- get UTC date to align with Snowflake billing\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    sum(spend) as spend,\n    sum(spend_net_cloud_services) as spend_net_cloud_services,\n    any_value(currency) as currency\nfrom fasttrack_cost_reporting_dev.landing_snowflake_monitoring.hourly_spend\ngroup by 1, 2, 3, 4, 5", "relation_name": "fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_spend", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.574627Z", "completed_at": "2025-03-20T11:34:37.576456Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.576630Z", "completed_at": "2025-03-20T11:34:37.576633Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.002599954605102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.stg_snowflake_monitoring_daily_spend", "compiled": true, "compiled_code": "with\n\n_src as (\n  select \n    date(src.date) as ref_date,\n    coalesce(src.service, '') as service,\n    coalesce(src.storage_type, '') as storage_type,\n    coalesce(src.warehouse_name, '') as warehouse_name,\n    coalesce(src.database_name, '') as database_name,\n    src.spend::number(38,12) as spend,\n    src.spend_net_cloud_services::number(38,12) as spend_net_cloud_services,\n    upper(left(trim(src.currency), 3)) as currency\n  from fasttrack_cost_reporting_dev.landing_snowflake_monitoring.daily_spend as src\n)\n\nselect \n  *,\n\n  abs(\n    hash(\n      concat(ref_date, service, storage_type, warehouse_name, database_name)\n    )\n  ) as unique_key,\n\n  sysdate() as dbt_loaded_at\nfrom _src\nwhere currency = 'USD' \nqualify row_number() over (\n  partition by unique_key\n  order by 0\n) = 1", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.579650Z", "completed_at": "2025-03-20T11:34:37.587171Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.587440Z", "completed_at": "2025-03-20T11:34:37.587444Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01004481315612793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.t_snowflake_costs", "compiled": true, "compiled_code": "with\n\n_snowflake_costs as (\n  select\n    unique_key,\n    billing_date,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.t_snowflake_serverless_costs as src\n\n    union all\n\n  select\n    unique_key as unique_key,\n    ref_date as billing_date,\n    service as service_category,\n    iff(service ilike 'storage', storage_type, null) as service_subcategory,\n    iff(service ilike 'storage', database_name, warehouse_name) as resource,\n    sum(spend) as spend\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend as src\n  where service ilike any ('%cloud service%', '%compute%', '%storage%')\n    and abs(spend) > 0\n  group by all\n)\n\nselect\n  unique_key,\n  'Snowflake' as platform,\n  billing_date,\n  current_account() as account,\n  service_category,\n  service_subcategory,\n  resource,\n  spend,\n  sysdate() as dbt_loaded_at\nfrom _snowflake_costs", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_snowflake_costs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.583391Z", "completed_at": "2025-03-20T11:34:37.587782Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.588416Z", "completed_at": "2025-03-20T11:34:37.588420Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009654045104980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_ref_date.7a60765288", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ref_date\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend\nwhere ref_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.581444Z", "completed_at": "2025-03-20T11:34:37.588010Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.588933Z", "completed_at": "2025-03-20T11:34:37.588936Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01072382926940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_stg_snowflake_monitoring_daily_spend_unique_key.65e22c6801", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.585370Z", "completed_at": "2025-03-20T11:34:37.588754Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.589726Z", "completed_at": "2025-03-20T11:34:37.589729Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010616064071655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_service.9b10de093f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect service\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend\nwhere service is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.590491Z", "completed_at": "2025-03-20T11:34:37.597450Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.597594Z", "completed_at": "2025-03-20T11:34:37.597596Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008444070816040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_stg_snowflake_monitoring_daily_spend_spend.2260f1a9a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_snowflake_monitoring_daily_spend\nwhere spend is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.592221Z", "completed_at": "2025-03-20T11:34:37.597917Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.598047Z", "completed_at": "2025-03-20T11:34:37.598050Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007920026779174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.t_consolidated_costs", "compiled": true, "compiled_code": "\n\nwith\n\n __dbt__cte__t_valid_azure_daily_exports as (\n\n\nselect * exclude(dbt_loaded_at)\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_azure_daily_exports\nwhere abs(coalesce(cost_in_usd, 0)) > 0\n  and len(resource_id) > 0\n  and len(meter_id) > 0\n  and tags:\"ProjectName\" ilike 'Fast Track Development'\n),  __dbt__cte__t_azure_costs as (\n\n\nselect\n  unique_key,\n  'Azure' as platform,\n  billing_date,\n  subscription as account,\n  service_family as service_category,\n  meter_subcategory as service_subcategory,\n  resource_id as resource,\n  cost_in_usd as spend \nfrom __dbt__cte__t_valid_azure_daily_exports\n),  __dbt__cte__t_platform_additional_costs as (\n\n\nselect\n  unique_key,\n  platform,\n  billing_date,\n  account,\n  service_category,\n  service_subcategory,\n  resource,\n  spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.stg_platform_references_additional_costs\n), _consolidated_costs as (\n  select\n    unique_key,\n    platform,\n    billing_date,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n  from __dbt__cte__t_azure_costs\n\n    union all\n\n  select\n    unique_key,\n    platform,\n    billing_date,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n  from __dbt__cte__t_platform_additional_costs\n\n    union all\n\n  select\n    unique_key,\n    platform,\n    billing_date,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    spend\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.t_snowflake_costs\n)\n\nselect\n  unique_key,\n    platform,\n    billing_date,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    spend,\n  sysdate() as dbt_loaded_at\nfrom _consolidated_costs\nqualify row_number() over (\n  partition by unique_key\n  order by 0\n) = 1", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_costs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.599312Z", "completed_at": "2025-03-20T11:34:37.602394Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.602523Z", "completed_at": "2025-03-20T11:34:37.602525Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004025936126708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.t_cost_reporting", "compiled": true, "compiled_code": "\n\nwith\n\n_expanded_costs_daily as (\n  select\n    f.unique_key,\n    f.platform,\n    f.billing_date,\n    f.account,\n    f.service_category,\n    f.service_subcategory,\n    f.spend,\n    split_part(f.resource, ',',  1) as resource,\n    coalesce(t.tag_values, 'n/a') as tag_values,\n    coalesce(t.managed_by, 'OTHER') as managed_by,\n    case\n      when f.resource ilike '%dev%' or t.tag_values ilike '%dev%' then 'DEV'\n      when f.resource ilike '%test%' or t.tag_values ilike '%test%' then 'TEST'\n      when f.resource ilike '%prod%' or t.tag_values ilike '%prod%' then 'PROD'\n      else 'OTHER'\n    end as environment\n  from fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_costs as f\n  join fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_tags as t on ( \n    split_part(\n      f.resource,\n      ',', \n      iff(len(split_part(f.resource, ',',  2)) < 1, 1, 2)\n    ) = t.object_id\n  )\n  where f.billing_date <= sysdate()::date\n),\n\n_aggregated_costs as (\n  select\n    unique_key,\n    platform,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    environment,\n    tag_values,\n    managed_by,\n    'daily' as granularity,\n    billing_date,\n    spend\n  from _expanded_costs_daily\n    \n    union all\n\n  select\n    unique_key,\n    platform,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    environment,\n    tag_values,\n    managed_by,\n    'weekly' as granularity,\n    date_trunc('week', billing_date) as billing_date,\n    spend\n  from _expanded_costs_daily\n\n    union all\n\n  select\n    unique_key,\n    platform,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    environment,\n    tag_values,\n    managed_by,\n    'monthly' as granularity,\n    date_trunc('month', billing_date) as billing_date,\n    spend\n  from _expanded_costs_daily\n)\n\nselect\n  unique_key || left(granularity, 1) as unique_key,\n  platform,\n    account,\n    service_category,\n    service_subcategory,\n    resource,\n    environment,\n    tag_values,\n    managed_by,\n  granularity,\n  billing_date,\n  spend,\n  sysdate() as dbt_loaded_at\nfrom _aggregated_costs", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_cost_reporting", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.601109Z", "completed_at": "2025-03-20T11:34:37.603174Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.603424Z", "completed_at": "2025-03-20T11:34:37.603426Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004400014877319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.t_cost_reporting_tags", "compiled": true, "compiled_code": "select \n  coalesce(split_part(f.resource, ',',  1), 'n/a') as resource,\n  t.object_id,\n  t.tag_values,\n  coalesce(max(t.managed_by), 'OTHER') as managed_by,\n  sysdate() as dbt_loaded_at\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_tags as t\njoin fasttrack_cost_reporting_dev.transform_cost_reporting.t_consolidated_costs as f on ( \n  t.object_id = split_part(\n    f.resource,\n    ',', \n    iff(len(split_part(f.resource, ',',  2)) < 1, 1, 2)\n  )\n)\ngroup by all", "relation_name": "fasttrack_cost_reporting_dev.transform_cost_reporting.t_cost_reporting_tags", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.603670Z", "completed_at": "2025-03-20T11:34:37.606227Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.606357Z", "completed_at": "2025-03-20T11:34:37.606359Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0034623146057128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.f_cost_reporting", "compiled": true, "compiled_code": "select\n  unique_key,\n  platform,\n  billing_date as billingdate,\n  account,\n  service_category,\n  service_subcategory,\n  resource,\n  environment,\n  tag_values,\n  managed_by,\n  granularity,\n  spend\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.t_cost_reporting", "relation_name": "fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.605206Z", "completed_at": "2025-03-20T11:34:37.607224Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.607807Z", "completed_at": "2025-03-20T11:34:37.607810Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0030028820037841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fasttrack_cost_reporting.d_cost_reporting_tags", "compiled": true, "compiled_code": "select\n  resource,\n  object_id,\n  tag_values,\n  managed_by\nfrom fasttrack_cost_reporting_dev.transform_cost_reporting.t_cost_reporting_tags", "relation_name": "fasttrack_cost_reporting_dev.publish_cost_reporting.d_cost_reporting_tags", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.608070Z", "completed_at": "2025-03-20T11:34:37.615882Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.616152Z", "completed_at": "2025-03-20T11:34:37.616154Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00933980941772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.accepted_values_f_cost_reporting_granularity__True__daily__weekly__monthly.df184bd1cf", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        granularity as value_field,\n        count(*) as n_records\n\n    from fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\n    group by granularity\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'daily','weekly','monthly'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.612055Z", "completed_at": "2025-03-20T11:34:37.617834Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.618265Z", "completed_at": "2025-03-20T11:34:37.618267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010736942291259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.dbt_constraints_primary_key_f_cost_reporting_unique_key.60890aab9f", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        unique_key, count(*) as row_count\n    from fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\n    group by unique_key\n    having count(*) > 1\n        or unique_key is null\n        \n)\n\nselect *\nfrom validation_errors", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.613677Z", "completed_at": "2025-03-20T11:34:37.618160Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.618616Z", "completed_at": "2025-03-20T11:34:37.618618Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007256031036376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_f_cost_reporting_billingdate.d5e3ce003d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billingdate\nfrom fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\nwhere billingdate is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.618983Z", "completed_at": "2025-03-20T11:34:37.622146Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.622395Z", "completed_at": "2025-03-20T11:34:37.622398Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004509925842285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_f_cost_reporting_platform.b2a4d8740e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect platform\nfrom fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\nwhere platform is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.616399Z", "completed_at": "2025-03-20T11:34:37.622282Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.622652Z", "completed_at": "2025-03-20T11:34:37.622654Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009263038635253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_f_cost_reporting_granularity.929559885d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect granularity\nfrom fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\nwhere granularity is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T11:34:37.620621Z", "completed_at": "2025-03-20T11:34:37.622884Z"}, {"name": "execute", "started_at": "2025-03-20T11:34:37.623044Z", "completed_at": "2025-03-20T11:34:37.623046Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.002809762954711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fasttrack_cost_reporting.not_null_f_cost_reporting_spend.2ca305a830", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect spend\nfrom fasttrack_cost_reporting_dev.publish_cost_reporting.f_cost_reporting\nwhere spend is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 3.2104949951171875, "args": {"require_batched_execution_for_custom_microbatch_strategy": false, "log_level": "info", "print": true, "require_yaml_configuration_for_mf_time_spines": false, "static": false, "select": [], "warn_error_options": {"include": [], "exclude": []}, "partial_parse": true, "vars": {}, "log_format_file": "debug", "show_resource_report": false, "log_file_max_bytes": 10485760, "indirect_selection": "eager", "send_anonymous_usage_stats": true, "strict_mode": false, "compile": true, "populate_cache": true, "log_path": "/Users/romulo.carvalho/git/fasttrack_cost_reporting/logs", "quiet": false, "require_resource_names_without_spaces": false, "project_dir": "/Users/romulo.carvalho/git/fasttrack_cost_reporting", "invocation_command": "dbt docs generate", "use_colors_file": true, "printer_width": 80, "version_check": true, "profiles_dir": "/Users/romulo.carvalho/.dbt", "use_colors": true, "partial_parse_file_diff": true, "write_json": true, "log_format": "default", "state_modified_compare_vars": false, "skip_nodes_if_on_run_start_fails": false, "introspect": true, "which": "generate", "macro_debugging": false, "require_nested_cumulative_type_params": false, "empty_catalog": false, "static_parser": true, "state_modified_compare_more_unrendered_values": false, "log_level_file": "debug", "source_freshness_run_project_hooks": false, "defer": false, "exclude": [], "cache_selected_only": false, "require_explicit_package_overrides_for_builtin_materializations": true, "favor_state": false}}